
trimmed_RoverMission.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000144  00800100  00004f72  00005006  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004f72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000034e  00800244  00800244  0000514a  2**0
                  ALLOC
  3 .stab         00002a84  00000000  00000000  0000514c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000a28  00000000  00000000  00007bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000488  00000000  00000000  000085f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000114b  00000000  00000000  00008a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000860b  00000000  00000000  00009bcb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000345a  00000000  00000000  000121d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005548  00000000  00000000  00015630  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000ad0  00000000  00000000  0001ab78  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001a9e  00000000  00000000  0001b648  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000359f  00000000  00000000  0001d0e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000110  00000000  00000000  00020685  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__ctors_end>
       4:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <__vector_1>
       8:	0c 94 a9 04 	jmp	0x952	; 0x952 <__vector_2>
       c:	0c 94 03 02 	jmp	0x406	; 0x406 <__bad_interrupt>
      10:	0c 94 03 02 	jmp	0x406	; 0x406 <__bad_interrupt>
      14:	0c 94 03 02 	jmp	0x406	; 0x406 <__bad_interrupt>
      18:	0c 94 03 02 	jmp	0x406	; 0x406 <__bad_interrupt>
      1c:	0c 94 c2 0e 	jmp	0x1d84	; 0x1d84 <__vector_7>
      20:	0c 94 03 02 	jmp	0x406	; 0x406 <__bad_interrupt>
      24:	0c 94 03 02 	jmp	0x406	; 0x406 <__bad_interrupt>
      28:	0c 94 03 02 	jmp	0x406	; 0x406 <__bad_interrupt>
      2c:	0c 94 03 02 	jmp	0x406	; 0x406 <__bad_interrupt>
      30:	0c 94 03 02 	jmp	0x406	; 0x406 <__bad_interrupt>
      34:	0c 94 03 02 	jmp	0x406	; 0x406 <__bad_interrupt>
      38:	0c 94 03 02 	jmp	0x406	; 0x406 <__bad_interrupt>
      3c:	0c 94 03 02 	jmp	0x406	; 0x406 <__bad_interrupt>
      40:	0c 94 d6 04 	jmp	0x9ac	; 0x9ac <__vector_16>
      44:	0c 94 03 02 	jmp	0x406	; 0x406 <__bad_interrupt>
      48:	0c 94 ab 0c 	jmp	0x1956	; 0x1956 <__vector_18>
      4c:	0c 94 03 02 	jmp	0x406	; 0x406 <__bad_interrupt>
      50:	0c 94 03 02 	jmp	0x406	; 0x406 <__bad_interrupt>
      54:	0c 94 03 02 	jmp	0x406	; 0x406 <__bad_interrupt>
      58:	0c 94 03 02 	jmp	0x406	; 0x406 <__bad_interrupt>
      5c:	0c 94 03 02 	jmp	0x406	; 0x406 <__bad_interrupt>
      60:	0c 94 ce 02 	jmp	0x59c	; 0x59c <__vector_24>
      64:	0c 94 03 02 	jmp	0x406	; 0x406 <__bad_interrupt>
      68:	07 2c       	mov	r0, r7
      6a:	7a a5       	ldd	r23, Y+42	; 0x2a
      6c:	ba 6c       	ori	r27, 0xCA	; 202
      6e:	c5 90       	lpm	r12, Z+
      70:	da 3b       	cpi	r29, 0xBA	; 186
      72:	93 65       	ori	r25, 0x53	; 83
      74:	fc 8b       	std	Y+20, r31	; 0x14
      76:	bc 53       	subi	r27, 0x3C	; 60
      78:	f8 10       	cpse	r15, r8
      7a:	fd 3c       	cpi	r31, 0xCD	; 205
      7c:	56 92       	.word	0x9256	; ????
      7e:	83 4d       	sbci	r24, 0xD3	; 211
      80:	bd 87       	std	Y+13, r27	; 0x0d
      82:	9d 3a       	cpi	r25, 0xAD	; 173
      84:	b6 3d       	cpi	r27, 0xD6	; 214
      86:	cb c9       	rjmp	.-3178   	; 0xfffff41e <__eeprom_end+0xff7ef41e>
      88:	bf 5b       	subi	r27, 0xBF	; 191
      8a:	be 73       	andi	r27, 0x3E	; 62
      8c:	da 0f       	add	r29, r26
      8e:	c9 3f       	cpi	r28, 0xF9	; 249
      90:	05 a8       	ldd	r0, Z+53	; 0x35
      92:	4c cd       	rjmp	.-1384   	; 0xfffffb2c <__eeprom_end+0xff7efb2c>
      94:	b2 d4       	rcall	.+2404   	; 0x9fa <__vector_16+0x4e>
      96:	4e b9       	out	0x0e, r20	; 14
      98:	38 36       	cpi	r19, 0x68	; 104
      9a:	a9 02       	muls	r26, r25
      9c:	0c 50       	subi	r16, 0x0C	; 12
      9e:	b9 91       	ld	r27, Y+
      a0:	86 88       	ldd	r8, Z+22	; 0x16
      a2:	08 3c       	cpi	r16, 0xC8	; 200
      a4:	a6 aa       	std	Z+54, r10	; 0x36
      a6:	aa 2a       	or	r10, r26
      a8:	be 00       	.word	0x00be	; ????
      aa:	00 00       	nop
      ac:	80 3f       	cpi	r24, 0xF0	; 240

000000ae <port_to_mode_PGM>:
      ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <port_to_output_PGM>:
      b8:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000c2 <port_to_input_PGM>:
      c2:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000cc <digital_pin_to_port_PGM>:
      cc:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      dc:	03 03 03 03                                         ....

000000e0 <digital_pin_to_bit_mask_PGM>:
      e0:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      f0:	04 08 10 20                                         ... 

000000f4 <digital_pin_to_timer_PGM>:
      f4:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     104:	00 00 00 00                                         ....

00000108 <_ZL21tone_pin_to_timer_PGM>:
     108:	02                                                  .

00000109 <_ZL17medium_range_data>:
     109:	4b 4a 4a 49 49 48 48 47 47 46 46 45 44 44 44 43     KJJIIHHGGFFEDDDC
     119:	43 42 42 41 41 40 40 3f 3f 3f 3e 3e 3d 3d 3d 3c     CBBAA@@???>>===<
     129:	3c 3b 3b 3b 3a 3a 3a 39 39 39 38 38 38 37 37 37     <;;;:::999888777
     139:	36 36 36 35 35 35 34 34 34 34 33 33 33 32 32 32     6665554444333222
     149:	32 31 31 31 31 30 30 30 30 2f 2f 2f 2f 2e 2e 2e     211110000////...
     159:	2e 2e 2d 2d 2d 2d 2c 2c 2c 2c 2c 2b 2b 2b 2b 2b     ..----,,,,,+++++
     169:	2a 2a 2a 2a 2a 2a 29 29 29 29 29 28 28 28 28 28     ******)))))(((((
     179:	28 27 27 27 27 27 27 26 26 26 26 26 26 26 25 25     (''''''&&&&&&&%%
     189:	25 25 25 25 25 24 24 24 24 24 24 24 23 23 23 23     %%%%%$$$$$$$####
     199:	23 23 23 23 22 22 22 22 22 22 22 22 21 21 21 21     ####""""""""!!!!
     1a9:	21 21 21 21 21 20 20 20 20 20 20 20 20 20 1f 1f     !!!!!         ..
     1b9:	1f 1f 1f 1f 1f 1f 1f 1f 1e 1e 1e 1e 1e 1e 1e 1e     ................
     1c9:	1e 1e 1d 1d 1d 1d 1d 1d 1d 1d 1d 1d 1d 1c 1c 1c     ................
     1d9:	1c 1c 1c 1c 1c 1c 1c 1c 1c 1b 1b 1b 1b 1b 1b 1b     ................
     1e9:	1b 1b 1b 1b 1b 1b 1a 1a 1a 1a 1a 1a 1a 1a 1a 1a     ................
     1f9:	1a 1a 1a 1a 19 19 19 19 19 19 19 19 19 19 19 19     ................
     209:	19 19 19 18 18 18 18 18 18 18 18 18 18 18 18 18     ................
     219:	18 18 18 18 17 17 17 17 17 17 17 17 17 17 17 17     ................
     229:	17 17 17 17 17 16 16 16 16 16 16 16 16 16 16 16     ................
     239:	16 16 16 16 16 16 16 16 16 15 15 15 15 15 15 15     ................
     249:	15 15 15 15 15 15 15 15 15 15 15 15 15 15 14 14     ................
     259:	14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14     ................
     269:	14 14 14 14 14 14 13 13 13 13 13 13 13 13 13 13     ................
     279:	13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13     ................
     289:	12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12     ................
     299:	12 12 12 12 12 12 12 12 12 12 12 12 12 11 11 11     ................
     2a9:	11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11     ................
     2b9:	11 11 11 11 11 11 11 11 11 11 11 11 11 11 10 10     ................
     2c9:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
     2d9:	10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
     2e9:	10 10 10 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     2f9:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     309:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0e 0e 0e     ................
     319:	0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e     ................
     329:	0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e     ................
     339:	0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0d 0d 0d     ................
     349:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
     359:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
     369:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
     379:	0d 0d 0d 0d 0d 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
     389:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
     399:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
     3a9:	0c 0c 0c 0c 0c 0a 00                                .......

000003b0 <__ctors_start>:
     3b0:	4b 08       	sbc	r4, r11
     3b2:	51 0e       	add	r5, r17
     3b4:	3f 12       	cpse	r3, r31

000003b6 <__ctors_end>:
     3b6:	11 24       	eor	r1, r1
     3b8:	1f be       	out	0x3f, r1	; 63
     3ba:	cf ef       	ldi	r28, 0xFF	; 255
     3bc:	d8 e0       	ldi	r29, 0x08	; 8
     3be:	de bf       	out	0x3e, r29	; 62
     3c0:	cd bf       	out	0x3d, r28	; 61

000003c2 <__do_copy_data>:
     3c2:	12 e0       	ldi	r17, 0x02	; 2
     3c4:	a0 e0       	ldi	r26, 0x00	; 0
     3c6:	b1 e0       	ldi	r27, 0x01	; 1
     3c8:	e2 e7       	ldi	r30, 0x72	; 114
     3ca:	ff e4       	ldi	r31, 0x4F	; 79
     3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <__do_copy_data+0x10>
     3ce:	05 90       	lpm	r0, Z+
     3d0:	0d 92       	st	X+, r0
     3d2:	a4 34       	cpi	r26, 0x44	; 68
     3d4:	b1 07       	cpc	r27, r17
     3d6:	d9 f7       	brne	.-10     	; 0x3ce <__do_copy_data+0xc>

000003d8 <__do_clear_bss>:
     3d8:	15 e0       	ldi	r17, 0x05	; 5
     3da:	a4 e4       	ldi	r26, 0x44	; 68
     3dc:	b2 e0       	ldi	r27, 0x02	; 2
     3de:	01 c0       	rjmp	.+2      	; 0x3e2 <.do_clear_bss_start>

000003e0 <.do_clear_bss_loop>:
     3e0:	1d 92       	st	X+, r1

000003e2 <.do_clear_bss_start>:
     3e2:	a2 39       	cpi	r26, 0x92	; 146
     3e4:	b1 07       	cpc	r27, r17
     3e6:	e1 f7       	brne	.-8      	; 0x3e0 <.do_clear_bss_loop>

000003e8 <__do_global_ctors>:
     3e8:	13 e0       	ldi	r17, 0x03	; 3
     3ea:	c6 eb       	ldi	r28, 0xB6	; 182
     3ec:	d3 e0       	ldi	r29, 0x03	; 3
     3ee:	04 c0       	rjmp	.+8      	; 0x3f8 <__do_global_ctors+0x10>
     3f0:	22 97       	sbiw	r28, 0x02	; 2
     3f2:	fe 01       	movw	r30, r28
     3f4:	0e 94 98 21 	call	0x4330	; 0x4330 <__tablejump__>
     3f8:	c0 3b       	cpi	r28, 0xB0	; 176
     3fa:	d1 07       	cpc	r29, r17
     3fc:	c9 f7       	brne	.-14     	; 0x3f0 <__do_global_ctors+0x8>
     3fe:	0e 94 a1 13 	call	0x2742	; 0x2742 <main>
     402:	0c 94 b7 27 	jmp	0x4f6e	; 0x4f6e <_exit>

00000406 <__bad_interrupt>:
     406:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000040a <twi_init>:
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
     40a:	10 92 68 02 	sts	0x0268, r1

  #if defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) || defined(__AVR_ATmega328P__)
    // activate internal pull-ups for twi
    // as per note from atmega8 manual pg167
    sbi(PORTC, 4);
     40e:	44 9a       	sbi	0x08, 4	; 8
    sbi(PORTC, 5);
     410:	45 9a       	sbi	0x08, 5	; 8
    sbi(PORTD, 0);
    sbi(PORTD, 1);
  #endif

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
     412:	e9 eb       	ldi	r30, 0xB9	; 185
     414:	f0 e0       	ldi	r31, 0x00	; 0
     416:	80 81       	ld	r24, Z
     418:	8e 7f       	andi	r24, 0xFE	; 254
     41a:	80 83       	st	Z, r24
  cbi(TWSR, TWPS1);
     41c:	80 81       	ld	r24, Z
     41e:	8d 7f       	andi	r24, 0xFD	; 253
     420:	80 83       	st	Z, r24
  TWBR = ((CPU_FREQ / TWI_FREQ) - 16) / 2;
     422:	88 e4       	ldi	r24, 0x48	; 72
     424:	80 93 b8 00 	sts	0x00B8, r24
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
     428:	85 e4       	ldi	r24, 0x45	; 69
     42a:	80 93 bc 00 	sts	0x00BC, r24
}
     42e:	08 95       	ret

00000430 <twi_setAddress>:
 * Output   none
 */
void twi_setAddress(uint8_t address)
{
  // set twi slave address (skip over TWGCE bit)
  TWAR = address << 1;
     430:	88 0f       	add	r24, r24
     432:	80 93 ba 00 	sts	0x00BA, r24
}
     436:	08 95       	ret

00000438 <twi_readFrom>:
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
     438:	41 32       	cpi	r20, 0x21	; 33
     43a:	10 f0       	brcs	.+4      	; 0x440 <twi_readFrom+0x8>
     43c:	40 e0       	ldi	r20, 0x00	; 0
     43e:	2f c0       	rjmp	.+94     	; 0x49e <twi_readFrom+0x66>
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
     440:	90 91 68 02 	lds	r25, 0x0268
     444:	99 23       	and	r25, r25
     446:	e1 f7       	brne	.-8      	; 0x440 <twi_readFrom+0x8>
    continue;
  }
  twi_state = TWI_MRX;
     448:	91 e0       	ldi	r25, 0x01	; 1
     44a:	90 93 68 02 	sts	0x0268, r25
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
     44e:	9f ef       	ldi	r25, 0xFF	; 255
     450:	90 93 67 02 	sts	0x0267, r25

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
     454:	10 92 45 02 	sts	0x0245, r1
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
     458:	94 2f       	mov	r25, r20
     45a:	91 50       	subi	r25, 0x01	; 1
     45c:	90 93 46 02 	sts	0x0246, r25
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
  twi_slarw |= address << 1;
     460:	88 0f       	add	r24, r24
     462:	81 60       	ori	r24, 0x01	; 1
     464:	80 93 44 02 	sts	0x0244, r24

  // send start condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
     468:	85 ee       	ldi	r24, 0xE5	; 229
     46a:	80 93 bc 00 	sts	0x00BC, r24

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
     46e:	80 91 68 02 	lds	r24, 0x0268
     472:	81 30       	cpi	r24, 0x01	; 1
     474:	e1 f3       	breq	.-8      	; 0x46e <twi_readFrom+0x36>
    continue;
  }

  if (twi_masterBufferIndex < length)
     476:	80 91 45 02 	lds	r24, 0x0245
     47a:	84 17       	cp	r24, r20
     47c:	10 f4       	brcc	.+4      	; 0x482 <twi_readFrom+0x4a>
    length = twi_masterBufferIndex;
     47e:	40 91 45 02 	lds	r20, 0x0245
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	90 e0       	ldi	r25, 0x00	; 0

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
     486:	09 c0       	rjmp	.+18     	; 0x49a <twi_readFrom+0x62>
    data[i] = twi_masterBuffer[i];
     488:	fb 01       	movw	r30, r22
     48a:	e8 0f       	add	r30, r24
     48c:	f9 1f       	adc	r31, r25
     48e:	dc 01       	movw	r26, r24
     490:	a9 5b       	subi	r26, 0xB9	; 185
     492:	bd 4f       	sbci	r27, 0xFD	; 253
     494:	2c 91       	ld	r18, X
     496:	20 83       	st	Z, r18
     498:	01 96       	adiw	r24, 0x01	; 1

  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
     49a:	84 17       	cp	r24, r20
     49c:	a8 f3       	brcs	.-22     	; 0x488 <twi_readFrom+0x50>
    data[i] = twi_masterBuffer[i];
  }
	
  return length;
}
     49e:	84 2f       	mov	r24, r20
     4a0:	08 95       	ret

000004a2 <twi_writeTo>:
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
     4a2:	41 32       	cpi	r20, 0x21	; 33
     4a4:	10 f0       	brcs	.+4      	; 0x4aa <twi_writeTo+0x8>
     4a6:	81 e0       	ldi	r24, 0x01	; 1
     4a8:	08 95       	ret
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
     4aa:	90 91 68 02 	lds	r25, 0x0268
     4ae:	99 23       	and	r25, r25
     4b0:	e1 f7       	brne	.-8      	; 0x4aa <twi_writeTo+0x8>
    continue;
  }
  twi_state = TWI_MTX;
     4b2:	92 e0       	ldi	r25, 0x02	; 2
     4b4:	90 93 68 02 	sts	0x0268, r25
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
     4b8:	9f ef       	ldi	r25, 0xFF	; 255
     4ba:	90 93 67 02 	sts	0x0267, r25

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
     4be:	10 92 45 02 	sts	0x0245, r1
  twi_masterBufferLength = length;
     4c2:	40 93 46 02 	sts	0x0246, r20
     4c6:	db 01       	movw	r26, r22
     4c8:	e7 e4       	ldi	r30, 0x47	; 71
     4ca:	f2 e0       	ldi	r31, 0x02	; 2
 *          1 .. length to long for buffer
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait)
     4cc:	50 e0       	ldi	r21, 0x00	; 0
     4ce:	4e 0f       	add	r20, r30
     4d0:	5f 1f       	adc	r21, r31
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
     4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <twi_writeTo+0x36>
    twi_masterBuffer[i] = data[i];
     4d4:	9d 91       	ld	r25, X+
     4d6:	91 93       	st	Z+, r25
  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
     4d8:	e4 17       	cp	r30, r20
     4da:	f5 07       	cpc	r31, r21
     4dc:	d9 f7       	brne	.-10     	; 0x4d4 <twi_writeTo+0x32>
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
  twi_slarw |= address << 1;
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	88 0f       	add	r24, r24
     4e2:	99 1f       	adc	r25, r25
     4e4:	80 93 44 02 	sts	0x0244, r24
  
  // send start condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
     4e8:	85 ee       	ldi	r24, 0xE5	; 229
     4ea:	80 93 bc 00 	sts	0x00BC, r24

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
     4ee:	22 23       	and	r18, r18
     4f0:	99 f0       	breq	.+38     	; 0x518 <twi_writeTo+0x76>
     4f2:	80 91 68 02 	lds	r24, 0x0268
     4f6:	82 30       	cpi	r24, 0x02	; 2
     4f8:	79 f4       	brne	.+30     	; 0x518 <twi_writeTo+0x76>
     4fa:	fb cf       	rjmp	.-10     	; 0x4f2 <twi_writeTo+0x50>
    continue;
  }
  
  if (twi_error == 0xFF)
    return 0;	// success
  else if (twi_error == TW_MT_SLA_NACK)
     4fc:	80 91 67 02 	lds	r24, 0x0267
     500:	80 32       	cpi	r24, 0x20	; 32
     502:	11 f4       	brne	.+4      	; 0x508 <twi_writeTo+0x66>
     504:	82 e0       	ldi	r24, 0x02	; 2
     506:	08 95       	ret
    return 2;	// error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
     508:	80 91 67 02 	lds	r24, 0x0267
     50c:	80 33       	cpi	r24, 0x30	; 48
     50e:	11 f0       	breq	.+4      	; 0x514 <twi_writeTo+0x72>
     510:	84 e0       	ldi	r24, 0x04	; 4
     512:	08 95       	ret
     514:	83 e0       	ldi	r24, 0x03	; 3
    return 3;	// error: data send, nack received
  else
    return 4;	// other twi error
}
     516:	08 95       	ret
  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    continue;
  }
  
  if (twi_error == 0xFF)
     518:	80 91 67 02 	lds	r24, 0x0267
     51c:	8f 3f       	cpi	r24, 0xFF	; 255
     51e:	71 f7       	brne	.-36     	; 0x4fc <twi_writeTo+0x5a>
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	08 95       	ret

00000524 <twi_transmit>:
uint8_t twi_transmit(uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_LENGTH < length){
     524:	61 32       	cpi	r22, 0x21	; 33
     526:	10 f0       	brcs	.+4      	; 0x52c <twi_transmit+0x8>
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	08 95       	ret
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
     52c:	20 91 68 02 	lds	r18, 0x0268
     530:	24 30       	cpi	r18, 0x04	; 4
     532:	11 f0       	breq	.+4      	; 0x538 <twi_transmit+0x14>
     534:	82 e0       	ldi	r24, 0x02	; 2
     536:	08 95       	ret
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
     538:	60 93 8d 02 	sts	0x028D, r22
     53c:	dc 01       	movw	r26, r24
     53e:	e0 e9       	ldi	r30, 0x90	; 144
     540:	f2 e0       	ldi	r31, 0x02	; 2
 *          length: number of bytes in array
 * Output   1 length too long for buffer
 *          2 not slave transmitter
 *          0 ok
 */
uint8_t twi_transmit(uint8_t* data, uint8_t length)
     542:	70 e0       	ldi	r23, 0x00	; 0
     544:	6e 0f       	add	r22, r30
     546:	7f 1f       	adc	r23, r31
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
     548:	02 c0       	rjmp	.+4      	; 0x54e <twi_transmit+0x2a>
    twi_txBuffer[i] = data[i];
     54a:	8d 91       	ld	r24, X+
     54c:	81 93       	st	Z+, r24
    return 2;
  }
  
  // set length and copy data into tx buffer
  twi_txBufferLength = length;
  for(i = 0; i < length; ++i){
     54e:	e6 17       	cp	r30, r22
     550:	f7 07       	cpc	r31, r23
     552:	d9 f7       	brne	.-10     	; 0x54a <twi_transmit+0x26>
     554:	80 e0       	ldi	r24, 0x00	; 0
    twi_txBuffer[i] = data[i];
  }
  
  return 0;
}
     556:	08 95       	ret

00000558 <twi_attachSlaveRxEvent>:
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
  twi_onSlaveReceive = function;
     558:	90 93 8b 02 	sts	0x028B, r25
     55c:	80 93 8a 02 	sts	0x028A, r24
}
     560:	08 95       	ret

00000562 <twi_attachSlaveTxEvent>:
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
     562:	90 93 8f 02 	sts	0x028F, r25
     566:	80 93 8e 02 	sts	0x028E, r24
}
     56a:	08 95       	ret

0000056c <twi_reply>:
 * Output   none
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
     56c:	88 23       	and	r24, r24
     56e:	11 f0       	breq	.+4      	; 0x574 <twi_reply+0x8>
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     570:	85 ec       	ldi	r24, 0xC5	; 197
     572:	01 c0       	rjmp	.+2      	; 0x576 <twi_reply+0xa>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     574:	85 e8       	ldi	r24, 0x85	; 133
     576:	80 93 bc 00 	sts	0x00BC, r24
     57a:	08 95       	ret

0000057c <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     57c:	85 ed       	ldi	r24, 0xD5	; 213
     57e:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     582:	80 91 bc 00 	lds	r24, 0x00BC
     586:	84 fd       	sbrc	r24, 4
     588:	fc cf       	rjmp	.-8      	; 0x582 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     58a:	10 92 68 02 	sts	0x0268, r1
}
     58e:	08 95       	ret

00000590 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
     590:	85 ec       	ldi	r24, 0xC5	; 197
     592:	80 93 bc 00 	sts	0x00BC, r24

  // update twi state
  twi_state = TWI_READY;
     596:	10 92 68 02 	sts	0x0268, r1
}
     59a:	08 95       	ret

0000059c <__vector_24>:

SIGNAL(TWI_vect)
{
     59c:	1f 92       	push	r1
     59e:	0f 92       	push	r0
     5a0:	0f b6       	in	r0, 0x3f	; 63
     5a2:	0f 92       	push	r0
     5a4:	11 24       	eor	r1, r1
     5a6:	2f 93       	push	r18
     5a8:	3f 93       	push	r19
     5aa:	4f 93       	push	r20
     5ac:	5f 93       	push	r21
     5ae:	6f 93       	push	r22
     5b0:	7f 93       	push	r23
     5b2:	8f 93       	push	r24
     5b4:	9f 93       	push	r25
     5b6:	af 93       	push	r26
     5b8:	bf 93       	push	r27
     5ba:	ef 93       	push	r30
     5bc:	ff 93       	push	r31
  switch(TW_STATUS){
     5be:	80 91 b9 00 	lds	r24, 0x00B9
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	88 7f       	andi	r24, 0xF8	; 248
     5c6:	90 70       	andi	r25, 0x00	; 0
     5c8:	80 36       	cpi	r24, 0x60	; 96
     5ca:	91 05       	cpc	r25, r1
     5cc:	09 f4       	brne	.+2      	; 0x5d0 <__vector_24+0x34>
     5ce:	df c0       	rjmp	.+446    	; 0x78e <__vector_24+0x1f2>
     5d0:	81 36       	cpi	r24, 0x61	; 97
     5d2:	91 05       	cpc	r25, r1
     5d4:	e4 f5       	brge	.+120    	; 0x64e <__vector_24+0xb2>
     5d6:	88 32       	cpi	r24, 0x28	; 40
     5d8:	91 05       	cpc	r25, r1
     5da:	09 f4       	brne	.+2      	; 0x5de <__vector_24+0x42>
     5dc:	7e c0       	rjmp	.+252    	; 0x6da <__vector_24+0x13e>
     5de:	89 32       	cpi	r24, 0x29	; 41
     5e0:	91 05       	cpc	r25, r1
     5e2:	c4 f4       	brge	.+48     	; 0x614 <__vector_24+0x78>
     5e4:	80 31       	cpi	r24, 0x10	; 16
     5e6:	91 05       	cpc	r25, r1
     5e8:	09 f4       	brne	.+2      	; 0x5ec <__vector_24+0x50>
     5ea:	72 c0       	rjmp	.+228    	; 0x6d0 <__vector_24+0x134>
     5ec:	81 31       	cpi	r24, 0x11	; 17
     5ee:	91 05       	cpc	r25, r1
     5f0:	44 f4       	brge	.+16     	; 0x602 <__vector_24+0x66>
     5f2:	00 97       	sbiw	r24, 0x00	; 0
     5f4:	09 f4       	brne	.+2      	; 0x5f8 <__vector_24+0x5c>
     5f6:	34 c1       	rjmp	.+616    	; 0x860 <__vector_24+0x2c4>
     5f8:	88 30       	cpi	r24, 0x08	; 8
     5fa:	91 05       	cpc	r25, r1
     5fc:	09 f0       	breq	.+2      	; 0x600 <__vector_24+0x64>
     5fe:	3b c1       	rjmp	.+630    	; 0x876 <__vector_24+0x2da>
     600:	67 c0       	rjmp	.+206    	; 0x6d0 <__vector_24+0x134>
     602:	88 31       	cpi	r24, 0x18	; 24
     604:	91 05       	cpc	r25, r1
     606:	09 f4       	brne	.+2      	; 0x60a <__vector_24+0x6e>
     608:	68 c0       	rjmp	.+208    	; 0x6da <__vector_24+0x13e>
     60a:	80 32       	cpi	r24, 0x20	; 32
     60c:	91 05       	cpc	r25, r1
     60e:	09 f0       	breq	.+2      	; 0x612 <__vector_24+0x76>
     610:	32 c1       	rjmp	.+612    	; 0x876 <__vector_24+0x2da>
     612:	7e c0       	rjmp	.+252    	; 0x710 <__vector_24+0x174>
     614:	80 34       	cpi	r24, 0x40	; 64
     616:	91 05       	cpc	r25, r1
     618:	09 f4       	brne	.+2      	; 0x61c <__vector_24+0x80>
     61a:	a0 c0       	rjmp	.+320    	; 0x75c <__vector_24+0x1c0>
     61c:	81 34       	cpi	r24, 0x41	; 65
     61e:	91 05       	cpc	r25, r1
     620:	4c f4       	brge	.+18     	; 0x634 <__vector_24+0x98>
     622:	80 33       	cpi	r24, 0x30	; 48
     624:	91 05       	cpc	r25, r1
     626:	09 f4       	brne	.+2      	; 0x62a <__vector_24+0x8e>
     628:	7e c0       	rjmp	.+252    	; 0x726 <__vector_24+0x18a>
     62a:	88 33       	cpi	r24, 0x38	; 56
     62c:	91 05       	cpc	r25, r1
     62e:	09 f0       	breq	.+2      	; 0x632 <__vector_24+0x96>
     630:	22 c1       	rjmp	.+580    	; 0x876 <__vector_24+0x2da>
     632:	84 c0       	rjmp	.+264    	; 0x73c <__vector_24+0x1a0>
     634:	80 35       	cpi	r24, 0x50	; 80
     636:	91 05       	cpc	r25, r1
     638:	09 f4       	brne	.+2      	; 0x63c <__vector_24+0xa0>
     63a:	84 c0       	rjmp	.+264    	; 0x744 <__vector_24+0x1a8>
     63c:	88 35       	cpi	r24, 0x58	; 88
     63e:	91 05       	cpc	r25, r1
     640:	09 f4       	brne	.+2      	; 0x644 <__vector_24+0xa8>
     642:	91 c0       	rjmp	.+290    	; 0x766 <__vector_24+0x1ca>
     644:	88 34       	cpi	r24, 0x48	; 72
     646:	91 05       	cpc	r25, r1
     648:	09 f0       	breq	.+2      	; 0x64c <__vector_24+0xb0>
     64a:	15 c1       	rjmp	.+554    	; 0x876 <__vector_24+0x2da>
     64c:	98 c0       	rjmp	.+304    	; 0x77e <__vector_24+0x1e2>
     64e:	88 39       	cpi	r24, 0x98	; 152
     650:	91 05       	cpc	r25, r1
     652:	09 f4       	brne	.+2      	; 0x656 <__vector_24+0xba>
     654:	fd c0       	rjmp	.+506    	; 0x850 <__vector_24+0x2b4>
     656:	89 39       	cpi	r24, 0x99	; 153
     658:	91 05       	cpc	r25, r1
     65a:	ec f4       	brge	.+58     	; 0x696 <__vector_24+0xfa>
     65c:	88 37       	cpi	r24, 0x78	; 120
     65e:	91 05       	cpc	r25, r1
     660:	09 f4       	brne	.+2      	; 0x664 <__vector_24+0xc8>
     662:	95 c0       	rjmp	.+298    	; 0x78e <__vector_24+0x1f2>
     664:	89 37       	cpi	r24, 0x79	; 121
     666:	91 05       	cpc	r25, r1
     668:	4c f4       	brge	.+18     	; 0x67c <__vector_24+0xe0>
     66a:	88 36       	cpi	r24, 0x68	; 104
     66c:	91 05       	cpc	r25, r1
     66e:	09 f4       	brne	.+2      	; 0x672 <__vector_24+0xd6>
     670:	8e c0       	rjmp	.+284    	; 0x78e <__vector_24+0x1f2>
     672:	80 37       	cpi	r24, 0x70	; 112
     674:	91 05       	cpc	r25, r1
     676:	09 f0       	breq	.+2      	; 0x67a <__vector_24+0xde>
     678:	fe c0       	rjmp	.+508    	; 0x876 <__vector_24+0x2da>
     67a:	89 c0       	rjmp	.+274    	; 0x78e <__vector_24+0x1f2>
     67c:	88 38       	cpi	r24, 0x88	; 136
     67e:	91 05       	cpc	r25, r1
     680:	09 f4       	brne	.+2      	; 0x684 <__vector_24+0xe8>
     682:	e6 c0       	rjmp	.+460    	; 0x850 <__vector_24+0x2b4>
     684:	80 39       	cpi	r24, 0x90	; 144
     686:	91 05       	cpc	r25, r1
     688:	09 f4       	brne	.+2      	; 0x68c <__vector_24+0xf0>
     68a:	87 c0       	rjmp	.+270    	; 0x79a <__vector_24+0x1fe>
     68c:	80 38       	cpi	r24, 0x80	; 128
     68e:	91 05       	cpc	r25, r1
     690:	09 f0       	breq	.+2      	; 0x694 <__vector_24+0xf8>
     692:	f1 c0       	rjmp	.+482    	; 0x876 <__vector_24+0x2da>
     694:	82 c0       	rjmp	.+260    	; 0x79a <__vector_24+0x1fe>
     696:	80 3b       	cpi	r24, 0xB0	; 176
     698:	91 05       	cpc	r25, r1
     69a:	09 f4       	brne	.+2      	; 0x69e <__vector_24+0x102>
     69c:	b0 c0       	rjmp	.+352    	; 0x7fe <__vector_24+0x262>
     69e:	81 3b       	cpi	r24, 0xB1	; 177
     6a0:	91 05       	cpc	r25, r1
     6a2:	4c f4       	brge	.+18     	; 0x6b6 <__vector_24+0x11a>
     6a4:	80 3a       	cpi	r24, 0xA0	; 160
     6a6:	91 05       	cpc	r25, r1
     6a8:	09 f4       	brne	.+2      	; 0x6ac <__vector_24+0x110>
     6aa:	89 c0       	rjmp	.+274    	; 0x7be <__vector_24+0x222>
     6ac:	88 3a       	cpi	r24, 0xA8	; 168
     6ae:	91 05       	cpc	r25, r1
     6b0:	09 f0       	breq	.+2      	; 0x6b4 <__vector_24+0x118>
     6b2:	e1 c0       	rjmp	.+450    	; 0x876 <__vector_24+0x2da>
     6b4:	a4 c0       	rjmp	.+328    	; 0x7fe <__vector_24+0x262>
     6b6:	80 3c       	cpi	r24, 0xC0	; 192
     6b8:	91 05       	cpc	r25, r1
     6ba:	09 f4       	brne	.+2      	; 0x6be <__vector_24+0x122>
     6bc:	cd c0       	rjmp	.+410    	; 0x858 <__vector_24+0x2bc>
     6be:	88 3c       	cpi	r24, 0xC8	; 200
     6c0:	91 05       	cpc	r25, r1
     6c2:	09 f4       	brne	.+2      	; 0x6c6 <__vector_24+0x12a>
     6c4:	c9 c0       	rjmp	.+402    	; 0x858 <__vector_24+0x2bc>
     6c6:	88 3b       	cpi	r24, 0xB8	; 184
     6c8:	91 05       	cpc	r25, r1
     6ca:	09 f0       	breq	.+2      	; 0x6ce <__vector_24+0x132>
     6cc:	d4 c0       	rjmp	.+424    	; 0x876 <__vector_24+0x2da>
     6ce:	ac c0       	rjmp	.+344    	; 0x828 <__vector_24+0x28c>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
     6d0:	80 91 44 02 	lds	r24, 0x0244
     6d4:	80 93 bb 00 	sts	0x00BB, r24
     6d8:	b9 c0       	rjmp	.+370    	; 0x84c <__vector_24+0x2b0>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
     6da:	90 91 45 02 	lds	r25, 0x0245
     6de:	80 91 46 02 	lds	r24, 0x0246
     6e2:	98 17       	cp	r25, r24
     6e4:	68 f4       	brcc	.+26     	; 0x700 <__vector_24+0x164>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
     6e6:	80 91 45 02 	lds	r24, 0x0245
     6ea:	e8 2f       	mov	r30, r24
     6ec:	f0 e0       	ldi	r31, 0x00	; 0
     6ee:	e9 5b       	subi	r30, 0xB9	; 185
     6f0:	fd 4f       	sbci	r31, 0xFD	; 253
     6f2:	90 81       	ld	r25, Z
     6f4:	90 93 bb 00 	sts	0x00BB, r25
     6f8:	8f 5f       	subi	r24, 0xFF	; 255
     6fa:	80 93 45 02 	sts	0x0245, r24
     6fe:	a6 c0       	rjmp	.+332    	; 0x84c <__vector_24+0x2b0>
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     700:	85 ed       	ldi	r24, 0xD5	; 213
     702:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     706:	80 91 bc 00 	lds	r24, 0x00BC
     70a:	84 fd       	sbrc	r24, 4
     70c:	fc cf       	rjmp	.-8      	; 0x706 <__vector_24+0x16a>
     70e:	b1 c0       	rjmp	.+354    	; 0x872 <__vector_24+0x2d6>
      }else{
        twi_stop();
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
     710:	80 e2       	ldi	r24, 0x20	; 32
     712:	80 93 67 02 	sts	0x0267, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     716:	85 ed       	ldi	r24, 0xD5	; 213
     718:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     71c:	80 91 bc 00 	lds	r24, 0x00BC
     720:	84 fd       	sbrc	r24, 4
     722:	fc cf       	rjmp	.-8      	; 0x71c <__vector_24+0x180>
     724:	a6 c0       	rjmp	.+332    	; 0x872 <__vector_24+0x2d6>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
     726:	80 e3       	ldi	r24, 0x30	; 48
     728:	80 93 67 02 	sts	0x0267, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     72c:	85 ed       	ldi	r24, 0xD5	; 213
     72e:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     732:	80 91 bc 00 	lds	r24, 0x00BC
     736:	84 fd       	sbrc	r24, 4
     738:	fc cf       	rjmp	.-8      	; 0x732 <__vector_24+0x196>
     73a:	9b c0       	rjmp	.+310    	; 0x872 <__vector_24+0x2d6>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
     73c:	88 e3       	ldi	r24, 0x38	; 56
     73e:	80 93 67 02 	sts	0x0267, r24
     742:	8a c0       	rjmp	.+276    	; 0x858 <__vector_24+0x2bc>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     744:	80 91 45 02 	lds	r24, 0x0245
     748:	90 91 bb 00 	lds	r25, 0x00BB
     74c:	e8 2f       	mov	r30, r24
     74e:	f0 e0       	ldi	r31, 0x00	; 0
     750:	e9 5b       	subi	r30, 0xB9	; 185
     752:	fd 4f       	sbci	r31, 0xFD	; 253
     754:	90 83       	st	Z, r25
     756:	8f 5f       	subi	r24, 0xFF	; 255
     758:	80 93 45 02 	sts	0x0245, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
     75c:	90 91 45 02 	lds	r25, 0x0245
     760:	80 91 46 02 	lds	r24, 0x0246
     764:	71 c0       	rjmp	.+226    	; 0x848 <__vector_24+0x2ac>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     766:	80 91 45 02 	lds	r24, 0x0245
     76a:	90 91 bb 00 	lds	r25, 0x00BB
     76e:	e8 2f       	mov	r30, r24
     770:	f0 e0       	ldi	r31, 0x00	; 0
     772:	e9 5b       	subi	r30, 0xB9	; 185
     774:	fd 4f       	sbci	r31, 0xFD	; 253
     776:	90 83       	st	Z, r25
     778:	8f 5f       	subi	r24, 0xFF	; 255
     77a:	80 93 45 02 	sts	0x0245, r24
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     77e:	85 ed       	ldi	r24, 0xD5	; 213
     780:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     784:	80 91 bc 00 	lds	r24, 0x00BC
     788:	84 fd       	sbrc	r24, 4
     78a:	fc cf       	rjmp	.-8      	; 0x784 <__vector_24+0x1e8>
     78c:	72 c0       	rjmp	.+228    	; 0x872 <__vector_24+0x2d6>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
     78e:	83 e0       	ldi	r24, 0x03	; 3
     790:	80 93 68 02 	sts	0x0268, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
     794:	10 92 69 02 	sts	0x0269, r1
     798:	59 c0       	rjmp	.+178    	; 0x84c <__vector_24+0x2b0>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     79a:	80 91 69 02 	lds	r24, 0x0269
     79e:	80 32       	cpi	r24, 0x20	; 32
     7a0:	08 f0       	brcs	.+2      	; 0x7a4 <__vector_24+0x208>
     7a2:	56 c0       	rjmp	.+172    	; 0x850 <__vector_24+0x2b4>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
     7a4:	80 91 69 02 	lds	r24, 0x0269
     7a8:	90 91 bb 00 	lds	r25, 0x00BB
     7ac:	e8 2f       	mov	r30, r24
     7ae:	f0 e0       	ldi	r31, 0x00	; 0
     7b0:	e6 59       	subi	r30, 0x96	; 150
     7b2:	fd 4f       	sbci	r31, 0xFD	; 253
     7b4:	90 83       	st	Z, r25
     7b6:	8f 5f       	subi	r24, 0xFF	; 255
     7b8:	80 93 69 02 	sts	0x0269, r24
     7bc:	47 c0       	rjmp	.+142    	; 0x84c <__vector_24+0x2b0>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     7be:	80 91 69 02 	lds	r24, 0x0269
     7c2:	80 32       	cpi	r24, 0x20	; 32
     7c4:	30 f4       	brcc	.+12     	; 0x7d2 <__vector_24+0x236>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
     7c6:	e0 91 69 02 	lds	r30, 0x0269
     7ca:	f0 e0       	ldi	r31, 0x00	; 0
     7cc:	e6 59       	subi	r30, 0x96	; 150
     7ce:	fd 4f       	sbci	r31, 0xFD	; 253
     7d0:	10 82       	st	Z, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     7d2:	85 ed       	ldi	r24, 0xD5	; 213
     7d4:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     7d8:	80 91 bc 00 	lds	r24, 0x00BC
     7dc:	84 fd       	sbrc	r24, 4
     7de:	fc cf       	rjmp	.-8      	; 0x7d8 <__vector_24+0x23c>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     7e0:	10 92 68 02 	sts	0x0268, r1
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
     7e4:	60 91 69 02 	lds	r22, 0x0269
     7e8:	e0 91 8a 02 	lds	r30, 0x028A
     7ec:	f0 91 8b 02 	lds	r31, 0x028B
     7f0:	8a e6       	ldi	r24, 0x6A	; 106
     7f2:	92 e0       	ldi	r25, 0x02	; 2
     7f4:	70 e0       	ldi	r23, 0x00	; 0
     7f6:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
     7f8:	10 92 69 02 	sts	0x0269, r1
     7fc:	2d c0       	rjmp	.+90     	; 0x858 <__vector_24+0x2bc>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
     7fe:	84 e0       	ldi	r24, 0x04	; 4
     800:	80 93 68 02 	sts	0x0268, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
     804:	10 92 8c 02 	sts	0x028C, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
     808:	10 92 8d 02 	sts	0x028D, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
     80c:	e0 91 8e 02 	lds	r30, 0x028E
     810:	f0 91 8f 02 	lds	r31, 0x028F
     814:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
     816:	80 91 8d 02 	lds	r24, 0x028D
     81a:	88 23       	and	r24, r24
     81c:	29 f4       	brne	.+10     	; 0x828 <__vector_24+0x28c>
        twi_txBufferLength = 1;
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	80 93 8d 02 	sts	0x028D, r24
        twi_txBuffer[0] = 0x00;
     824:	10 92 90 02 	sts	0x0290, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
     828:	80 91 8c 02 	lds	r24, 0x028C
     82c:	e8 2f       	mov	r30, r24
     82e:	f0 e0       	ldi	r31, 0x00	; 0
     830:	e0 57       	subi	r30, 0x70	; 112
     832:	fd 4f       	sbci	r31, 0xFD	; 253
     834:	90 81       	ld	r25, Z
     836:	90 93 bb 00 	sts	0x00BB, r25
     83a:	8f 5f       	subi	r24, 0xFF	; 255
     83c:	80 93 8c 02 	sts	0x028C, r24
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
     840:	90 91 8c 02 	lds	r25, 0x028C
     844:	80 91 8d 02 	lds	r24, 0x028D
     848:	98 17       	cp	r25, r24
     84a:	10 f4       	brcc	.+4      	; 0x850 <__vector_24+0x2b4>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     84c:	85 ec       	ldi	r24, 0xC5	; 197
     84e:	01 c0       	rjmp	.+2      	; 0x852 <__vector_24+0x2b6>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     850:	85 e8       	ldi	r24, 0x85	; 133
     852:	80 93 bc 00 	sts	0x00BC, r24
     856:	0f c0       	rjmp	.+30     	; 0x876 <__vector_24+0x2da>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     858:	85 ec       	ldi	r24, 0xC5	; 197
     85a:	80 93 bc 00 	sts	0x00BC, r24
     85e:	09 c0       	rjmp	.+18     	; 0x872 <__vector_24+0x2d6>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
     860:	10 92 67 02 	sts	0x0267, r1
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     864:	85 ed       	ldi	r24, 0xD5	; 213
     866:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     86a:	80 91 bc 00 	lds	r24, 0x00BC
     86e:	84 fd       	sbrc	r24, 4
     870:	fc cf       	rjmp	.-8      	; 0x86a <__vector_24+0x2ce>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     872:	10 92 68 02 	sts	0x0268, r1
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
     876:	ff 91       	pop	r31
     878:	ef 91       	pop	r30
     87a:	bf 91       	pop	r27
     87c:	af 91       	pop	r26
     87e:	9f 91       	pop	r25
     880:	8f 91       	pop	r24
     882:	7f 91       	pop	r23
     884:	6f 91       	pop	r22
     886:	5f 91       	pop	r21
     888:	4f 91       	pop	r20
     88a:	3f 91       	pop	r19
     88c:	2f 91       	pop	r18
     88e:	0f 90       	pop	r0
     890:	0f be       	out	0x3f, r0	; 63
     892:	0f 90       	pop	r0
     894:	1f 90       	pop	r1
     896:	18 95       	reti

00000898 <attachInterrupt>:

volatile static voidFuncPtr intFunc[EXTERNAL_NUM_INTERRUPTS];
// volatile static voidFuncPtr twiIntFunc;

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
     898:	82 30       	cpi	r24, 0x02	; 2
     89a:	e8 f4       	brcc	.+58     	; 0x8d6 <attachInterrupt+0x3e>
    intFunc[interruptNum] = userFunc;
     89c:	e8 2f       	mov	r30, r24
     89e:	f0 e0       	ldi	r31, 0x00	; 0
     8a0:	ee 0f       	add	r30, r30
     8a2:	ff 1f       	adc	r31, r31
     8a4:	e0 55       	subi	r30, 0x50	; 80
     8a6:	fd 4f       	sbci	r31, 0xFD	; 253
     8a8:	71 83       	std	Z+1, r23	; 0x01
     8aa:	60 83       	st	Z, r22
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
     8ac:	81 30       	cpi	r24, 0x01	; 1
     8ae:	41 f0       	breq	.+16     	; 0x8c0 <attachInterrupt+0x28>
      EIMSK |= (1 << INT7);
      break;
#else
    case 0:
    #if defined(EICRA) && defined(ISC00) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
     8b0:	80 91 69 00 	lds	r24, 0x0069
     8b4:	8c 7f       	andi	r24, 0xFC	; 252
     8b6:	84 2b       	or	r24, r20
     8b8:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT0);
     8bc:	e8 9a       	sbi	0x1d, 0	; 29
      MCUCR = (MCUCR & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
      GIMSK |= (1 << INT0);
    #else
      #error attachInterrupt not finished for this CPU (case 0)
    #endif
      break;
     8be:	08 95       	ret

    case 1:
    #if defined(EICRA) && defined(ISC10) && defined(ISC11) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
     8c0:	80 91 69 00 	lds	r24, 0x0069
     8c4:	44 0f       	add	r20, r20
     8c6:	55 1f       	adc	r21, r21
     8c8:	44 0f       	add	r20, r20
     8ca:	55 1f       	adc	r21, r21
     8cc:	83 7f       	andi	r24, 0xF3	; 243
     8ce:	84 2b       	or	r24, r20
     8d0:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT1);
     8d4:	e9 9a       	sbi	0x1d, 1	; 29
     8d6:	08 95       	ret

000008d8 <detachInterrupt>:
    }
  }
}

void detachInterrupt(uint8_t interruptNum) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
     8d8:	82 30       	cpi	r24, 0x02	; 2
     8da:	68 f4       	brcc	.+26     	; 0x8f6 <detachInterrupt+0x1e>
    // Disable the interrupt.  (We can't assume that interruptNum is equal
    // to the number of the EIMSK bit to clear, as this isn't true on the 
    // ATmega8.  There, INT0 is 6 and INT1 is 7.)
    switch (interruptNum) {
     8dc:	81 30       	cpi	r24, 0x01	; 1
     8de:	11 f0       	breq	.+4      	; 0x8e4 <detachInterrupt+0xc>
      EIMSK &= ~(1 << INT7);
      break;
#else
    case 0:
    #if defined(EIMSK) && defined(INT0)
      EIMSK &= ~(1 << INT0);
     8e0:	e8 98       	cbi	0x1d, 0	; 29
    #elif defined(GIMSK) && defined(INT0)
      GIMSK &= ~(1 << INT0);
    #else
      #error detachInterrupt not finished for this cpu
    #endif
      break;
     8e2:	01 c0       	rjmp	.+2      	; 0x8e6 <detachInterrupt+0xe>

    case 1:
    #if defined(EIMSK) && defined(INT1)
      EIMSK &= ~(1 << INT1);
     8e4:	e9 98       	cbi	0x1d, 1	; 29
    #endif
      break;
#endif
    }
      
    intFunc[interruptNum] = 0;
     8e6:	e8 2f       	mov	r30, r24
     8e8:	f0 e0       	ldi	r31, 0x00	; 0
     8ea:	ee 0f       	add	r30, r30
     8ec:	ff 1f       	adc	r31, r31
     8ee:	e0 55       	subi	r30, 0x50	; 80
     8f0:	fd 4f       	sbci	r31, 0xFD	; 253
     8f2:	11 82       	std	Z+1, r1	; 0x01
     8f4:	10 82       	st	Z, r1
     8f6:	08 95       	ret

000008f8 <__vector_1>:
    intFunc[EXTERNAL_INT_7]();
}

#else

SIGNAL(INT0_vect) {
     8f8:	1f 92       	push	r1
     8fa:	0f 92       	push	r0
     8fc:	0f b6       	in	r0, 0x3f	; 63
     8fe:	0f 92       	push	r0
     900:	11 24       	eor	r1, r1
     902:	2f 93       	push	r18
     904:	3f 93       	push	r19
     906:	4f 93       	push	r20
     908:	5f 93       	push	r21
     90a:	6f 93       	push	r22
     90c:	7f 93       	push	r23
     90e:	8f 93       	push	r24
     910:	9f 93       	push	r25
     912:	af 93       	push	r26
     914:	bf 93       	push	r27
     916:	ef 93       	push	r30
     918:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
     91a:	80 91 b0 02 	lds	r24, 0x02B0
     91e:	90 91 b1 02 	lds	r25, 0x02B1
     922:	00 97       	sbiw	r24, 0x00	; 0
     924:	29 f0       	breq	.+10     	; 0x930 <__stack+0x31>
    intFunc[EXTERNAL_INT_0]();
     926:	e0 91 b0 02 	lds	r30, 0x02B0
     92a:	f0 91 b1 02 	lds	r31, 0x02B1
     92e:	09 95       	icall
}
     930:	ff 91       	pop	r31
     932:	ef 91       	pop	r30
     934:	bf 91       	pop	r27
     936:	af 91       	pop	r26
     938:	9f 91       	pop	r25
     93a:	8f 91       	pop	r24
     93c:	7f 91       	pop	r23
     93e:	6f 91       	pop	r22
     940:	5f 91       	pop	r21
     942:	4f 91       	pop	r20
     944:	3f 91       	pop	r19
     946:	2f 91       	pop	r18
     948:	0f 90       	pop	r0
     94a:	0f be       	out	0x3f, r0	; 63
     94c:	0f 90       	pop	r0
     94e:	1f 90       	pop	r1
     950:	18 95       	reti

00000952 <__vector_2>:

SIGNAL(INT1_vect) {
     952:	1f 92       	push	r1
     954:	0f 92       	push	r0
     956:	0f b6       	in	r0, 0x3f	; 63
     958:	0f 92       	push	r0
     95a:	11 24       	eor	r1, r1
     95c:	2f 93       	push	r18
     95e:	3f 93       	push	r19
     960:	4f 93       	push	r20
     962:	5f 93       	push	r21
     964:	6f 93       	push	r22
     966:	7f 93       	push	r23
     968:	8f 93       	push	r24
     96a:	9f 93       	push	r25
     96c:	af 93       	push	r26
     96e:	bf 93       	push	r27
     970:	ef 93       	push	r30
     972:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
     974:	80 91 b2 02 	lds	r24, 0x02B2
     978:	90 91 b3 02 	lds	r25, 0x02B3
     97c:	00 97       	sbiw	r24, 0x00	; 0
     97e:	29 f0       	breq	.+10     	; 0x98a <__vector_2+0x38>
    intFunc[EXTERNAL_INT_1]();
     980:	e0 91 b2 02 	lds	r30, 0x02B2
     984:	f0 91 b3 02 	lds	r31, 0x02B3
     988:	09 95       	icall
}
     98a:	ff 91       	pop	r31
     98c:	ef 91       	pop	r30
     98e:	bf 91       	pop	r27
     990:	af 91       	pop	r26
     992:	9f 91       	pop	r25
     994:	8f 91       	pop	r24
     996:	7f 91       	pop	r23
     998:	6f 91       	pop	r22
     99a:	5f 91       	pop	r21
     99c:	4f 91       	pop	r20
     99e:	3f 91       	pop	r19
     9a0:	2f 91       	pop	r18
     9a2:	0f 90       	pop	r0
     9a4:	0f be       	out	0x3f, r0	; 63
     9a6:	0f 90       	pop	r0
     9a8:	1f 90       	pop	r1
     9aa:	18 95       	reti

000009ac <__vector_16>:
volatile unsigned long timer0_overflow_count = 0;
volatile unsigned long timer0_millis = 0;
static unsigned char timer0_fract = 0;

SIGNAL(TIMER0_OVF_vect)
{
     9ac:	1f 92       	push	r1
     9ae:	0f 92       	push	r0
     9b0:	0f b6       	in	r0, 0x3f	; 63
     9b2:	0f 92       	push	r0
     9b4:	11 24       	eor	r1, r1
     9b6:	2f 93       	push	r18
     9b8:	3f 93       	push	r19
     9ba:	8f 93       	push	r24
     9bc:	9f 93       	push	r25
     9be:	af 93       	push	r26
     9c0:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     9c2:	80 91 b8 02 	lds	r24, 0x02B8
     9c6:	90 91 b9 02 	lds	r25, 0x02B9
     9ca:	a0 91 ba 02 	lds	r26, 0x02BA
     9ce:	b0 91 bb 02 	lds	r27, 0x02BB
	unsigned char f = timer0_fract;
     9d2:	30 91 bc 02 	lds	r19, 0x02BC

	m += MILLIS_INC;
     9d6:	01 96       	adiw	r24, 0x01	; 1
     9d8:	a1 1d       	adc	r26, r1
     9da:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
     9dc:	23 2f       	mov	r18, r19
     9de:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
     9e0:	2d 37       	cpi	r18, 0x7D	; 125
     9e2:	20 f0       	brcs	.+8      	; 0x9ec <__vector_16+0x40>
		f -= FRACT_MAX;
     9e4:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
     9e6:	01 96       	adiw	r24, 0x01	; 1
     9e8:	a1 1d       	adc	r26, r1
     9ea:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     9ec:	20 93 bc 02 	sts	0x02BC, r18
	timer0_millis = m;
     9f0:	80 93 b8 02 	sts	0x02B8, r24
     9f4:	90 93 b9 02 	sts	0x02B9, r25
     9f8:	a0 93 ba 02 	sts	0x02BA, r26
     9fc:	b0 93 bb 02 	sts	0x02BB, r27
	timer0_overflow_count++;
     a00:	80 91 b4 02 	lds	r24, 0x02B4
     a04:	90 91 b5 02 	lds	r25, 0x02B5
     a08:	a0 91 b6 02 	lds	r26, 0x02B6
     a0c:	b0 91 b7 02 	lds	r27, 0x02B7
     a10:	01 96       	adiw	r24, 0x01	; 1
     a12:	a1 1d       	adc	r26, r1
     a14:	b1 1d       	adc	r27, r1
     a16:	80 93 b4 02 	sts	0x02B4, r24
     a1a:	90 93 b5 02 	sts	0x02B5, r25
     a1e:	a0 93 b6 02 	sts	0x02B6, r26
     a22:	b0 93 b7 02 	sts	0x02B7, r27
}
     a26:	bf 91       	pop	r27
     a28:	af 91       	pop	r26
     a2a:	9f 91       	pop	r25
     a2c:	8f 91       	pop	r24
     a2e:	3f 91       	pop	r19
     a30:	2f 91       	pop	r18
     a32:	0f 90       	pop	r0
     a34:	0f be       	out	0x3f, r0	; 63
     a36:	0f 90       	pop	r0
     a38:	1f 90       	pop	r1
     a3a:	18 95       	reti

00000a3c <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
     a3c:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
     a3e:	f8 94       	cli
	m = timer0_millis;
     a40:	20 91 b8 02 	lds	r18, 0x02B8
     a44:	30 91 b9 02 	lds	r19, 0x02B9
     a48:	40 91 ba 02 	lds	r20, 0x02BA
     a4c:	50 91 bb 02 	lds	r21, 0x02BB
	SREG = oldSREG;
     a50:	8f bf       	out	0x3f, r24	; 63

	return m;
}
     a52:	b9 01       	movw	r22, r18
     a54:	ca 01       	movw	r24, r20
     a56:	08 95       	ret

00000a58 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     a58:	9f b7       	in	r25, 0x3f	; 63
	
	cli();
     a5a:	f8 94       	cli
	m = timer0_overflow_count;
     a5c:	20 91 b4 02 	lds	r18, 0x02B4
     a60:	30 91 b5 02 	lds	r19, 0x02B5
     a64:	40 91 b6 02 	lds	r20, 0x02B6
     a68:	50 91 b7 02 	lds	r21, 0x02B7
#if defined(TCNT0)
	t = TCNT0;
     a6c:	86 b5       	in	r24, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     a6e:	a8 9b       	sbis	0x15, 0	; 21
     a70:	06 c0       	rjmp	.+12     	; 0xa7e <micros+0x26>
     a72:	8f 3f       	cpi	r24, 0xFF	; 255
     a74:	21 f0       	breq	.+8      	; 0xa7e <micros+0x26>
		m++;
     a76:	2f 5f       	subi	r18, 0xFF	; 255
     a78:	3f 4f       	sbci	r19, 0xFF	; 255
     a7a:	4f 4f       	sbci	r20, 0xFF	; 255
     a7c:	5f 4f       	sbci	r21, 0xFF	; 255
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     a7e:	9f bf       	out	0x3f, r25	; 63
     a80:	54 2f       	mov	r21, r20
     a82:	43 2f       	mov	r20, r19
     a84:	32 2f       	mov	r19, r18
     a86:	22 27       	eor	r18, r18
     a88:	28 0f       	add	r18, r24
     a8a:	31 1d       	adc	r19, r1
     a8c:	41 1d       	adc	r20, r1
     a8e:	51 1d       	adc	r21, r1
     a90:	82 e0       	ldi	r24, 0x02	; 2
     a92:	22 0f       	add	r18, r18
     a94:	33 1f       	adc	r19, r19
     a96:	44 1f       	adc	r20, r20
     a98:	55 1f       	adc	r21, r21
     a9a:	8a 95       	dec	r24
     a9c:	d1 f7       	brne	.-12     	; 0xa92 <micros+0x3a>
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}
     a9e:	b9 01       	movw	r22, r18
     aa0:	ca 01       	movw	r24, r20
     aa2:	08 95       	ret

00000aa4 <delay>:

void delay(unsigned long ms)
{
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	cf 93       	push	r28
     aae:	df 93       	push	r29
     ab0:	7b 01       	movw	r14, r22
     ab2:	8c 01       	movw	r16, r24
	uint16_t start = (uint16_t)micros();
     ab4:	0e 94 2c 05 	call	0xa58	; 0xa58 <micros>
     ab8:	eb 01       	movw	r28, r22

	while (ms > 0) {
     aba:	0f c0       	rjmp	.+30     	; 0xada <delay+0x36>
		if (((uint16_t)micros() - start) >= 1000) {
     abc:	0e 94 2c 05 	call	0xa58	; 0xa58 <micros>
     ac0:	6c 1b       	sub	r22, r28
     ac2:	7d 0b       	sbc	r23, r29
     ac4:	83 e0       	ldi	r24, 0x03	; 3
     ac6:	68 3e       	cpi	r22, 0xE8	; 232
     ac8:	78 07       	cpc	r23, r24
     aca:	c0 f3       	brcs	.-16     	; 0xabc <delay+0x18>
			ms--;
     acc:	08 94       	sec
     ace:	e1 08       	sbc	r14, r1
     ad0:	f1 08       	sbc	r15, r1
     ad2:	01 09       	sbc	r16, r1
     ad4:	11 09       	sbc	r17, r1
			start += 1000;
     ad6:	c8 51       	subi	r28, 0x18	; 24
     ad8:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
     ada:	e1 14       	cp	r14, r1
     adc:	f1 04       	cpc	r15, r1
     ade:	01 05       	cpc	r16, r1
     ae0:	11 05       	cpc	r17, r1
     ae2:	61 f7       	brne	.-40     	; 0xabc <delay+0x18>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
     ae4:	df 91       	pop	r29
     ae6:	cf 91       	pop	r28
     ae8:	1f 91       	pop	r17
     aea:	0f 91       	pop	r16
     aec:	ff 90       	pop	r15
     aee:	ef 90       	pop	r14
     af0:	08 95       	ret

00000af2 <delayMicroseconds>:
#if F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
     af2:	01 97       	sbiw	r24, 0x01	; 1
     af4:	39 f0       	breq	.+14     	; 0xb04 <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
     af6:	88 0f       	add	r24, r24
     af8:	99 1f       	adc	r25, r25
     afa:	88 0f       	add	r24, r24
     afc:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
     afe:	02 97       	sbiw	r24, 0x02	; 2

	// busy wait
	__asm__ __volatile__ (
		"1: sbiw %0,1" "\n\t" // 2 cycles
		"brne 1b" : "=w" (us) : "0" (us) // 2 cycles
	);
     b00:	01 97       	sbiw	r24, 0x01	; 1
     b02:	f1 f7       	brne	.-4      	; 0xb00 <delayMicroseconds+0xe>
     b04:	08 95       	ret

00000b06 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     b06:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     b08:	84 b5       	in	r24, 0x24	; 36
     b0a:	82 60       	ori	r24, 0x02	; 2
     b0c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     b0e:	84 b5       	in	r24, 0x24	; 36
     b10:	81 60       	ori	r24, 0x01	; 1
     b12:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     b14:	85 b5       	in	r24, 0x25	; 37
     b16:	82 60       	ori	r24, 0x02	; 2
     b18:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     b1a:	85 b5       	in	r24, 0x25	; 37
     b1c:	81 60       	ori	r24, 0x01	; 1
     b1e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     b20:	ee e6       	ldi	r30, 0x6E	; 110
     b22:	f0 e0       	ldi	r31, 0x00	; 0
     b24:	80 81       	ld	r24, Z
     b26:	81 60       	ori	r24, 0x01	; 1
     b28:	80 83       	st	Z, r24
	// timers 1 and 2 are used for phase-correct hardware pwm
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

	TCCR1B = 0;
     b2a:	e1 e8       	ldi	r30, 0x81	; 129
     b2c:	f0 e0       	ldi	r31, 0x00	; 0
     b2e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	sbi(TCCR1B, CS11);
     b30:	80 81       	ld	r24, Z
     b32:	82 60       	ori	r24, 0x02	; 2
     b34:	80 83       	st	Z, r24
	sbi(TCCR1B, CS10);
     b36:	80 81       	ld	r24, Z
     b38:	81 60       	ori	r24, 0x01	; 1
     b3a:	80 83       	st	Z, r24
	sbi(TCCR1, CS11);
	sbi(TCCR1, CS10);
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     b3c:	e0 e8       	ldi	r30, 0x80	; 128
     b3e:	f0 e0       	ldi	r31, 0x00	; 0
     b40:	80 81       	ld	r24, Z
     b42:	81 60       	ori	r24, 0x01	; 1
     b44:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     b46:	e1 eb       	ldi	r30, 0xB1	; 177
     b48:	f0 e0       	ldi	r31, 0x00	; 0
     b4a:	80 81       	ld	r24, Z
     b4c:	84 60       	ori	r24, 0x04	; 4
     b4e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     b50:	e0 eb       	ldi	r30, 0xB0	; 176
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	80 81       	ld	r24, Z
     b56:	81 60       	ori	r24, 0x01	; 1
     b58:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
     b5a:	ea e7       	ldi	r30, 0x7A	; 122
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	80 81       	ld	r24, Z
     b60:	84 60       	ori	r24, 0x04	; 4
     b62:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
     b64:	80 81       	ld	r24, Z
     b66:	82 60       	ori	r24, 0x02	; 2
     b68:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
     b6a:	80 81       	ld	r24, Z
     b6c:	81 60       	ori	r24, 0x01	; 1
     b6e:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     b70:	80 81       	ld	r24, Z
     b72:	80 68       	ori	r24, 0x80	; 128
     b74:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     b76:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
     b7a:	08 95       	ret

00000b7c <analogReference>:
void analogReference(uint8_t mode)
{
	// can't actually set the register here because the default setting
	// will connect AVCC and the AREF pin, which would cause a short if
	// there's something connected to AREF.
	analog_reference = mode;
     b7c:	80 93 00 01 	sts	0x0100, r24
}
     b80:	08 95       	ret

00000b82 <analogRead>:
	uint8_t low, high;

#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
     b82:	8e 30       	cpi	r24, 0x0E	; 14
     b84:	08 f0       	brcs	.+2      	; 0xb88 <analogRead+0x6>
     b86:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
     b88:	87 70       	andi	r24, 0x07	; 7
     b8a:	90 91 00 01 	lds	r25, 0x0100
     b8e:	92 95       	swap	r25
     b90:	99 0f       	add	r25, r25
     b92:	99 0f       	add	r25, r25
     b94:	90 7c       	andi	r25, 0xC0	; 192
     b96:	98 2b       	or	r25, r24
     b98:	90 93 7c 00 	sts	0x007C, r25
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
     b9c:	80 91 7a 00 	lds	r24, 0x007A
     ba0:	80 64       	ori	r24, 0x40	; 64
     ba2:	80 93 7a 00 	sts	0x007A, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
     ba6:	80 91 7a 00 	lds	r24, 0x007A
     baa:	86 fd       	sbrc	r24, 6
     bac:	fc cf       	rjmp	.-8      	; 0xba6 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
     bae:	20 91 78 00 	lds	r18, 0x0078
	high = ADCH;
     bb2:	30 91 79 00 	lds	r19, 0x0079
     bb6:	93 2f       	mov	r25, r19
     bb8:	80 e0       	ldi	r24, 0x00	; 0
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	28 2b       	or	r18, r24
     bbe:	39 2b       	or	r19, r25
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
}
     bc0:	c9 01       	movw	r24, r18
     bc2:	08 95       	ret

00000bc4 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
     bc4:	1f 93       	push	r17
     bc6:	cf 93       	push	r28
     bc8:	df 93       	push	r29
     bca:	18 2f       	mov	r17, r24
     bcc:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
     bce:	61 e0       	ldi	r22, 0x01	; 1
     bd0:	0e 94 42 06 	call	0xc84	; 0xc84 <pinMode>
	if (val == 0)
     bd4:	20 97       	sbiw	r28, 0x00	; 0
     bd6:	09 f4       	brne	.+2      	; 0xbda <analogWrite+0x16>
     bd8:	4a c0       	rjmp	.+148    	; 0xc6e <analogWrite+0xaa>
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
     bda:	cf 3f       	cpi	r28, 0xFF	; 255
     bdc:	d1 05       	cpc	r29, r1
     bde:	09 f4       	brne	.+2      	; 0xbe2 <analogWrite+0x1e>
     be0:	49 c0       	rjmp	.+146    	; 0xc74 <analogWrite+0xb0>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
     be2:	e1 2f       	mov	r30, r17
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	ec 50       	subi	r30, 0x0C	; 12
     be8:	ff 4f       	sbci	r31, 0xFF	; 255
     bea:	84 91       	lpm	r24, Z+
     bec:	83 30       	cpi	r24, 0x03	; 3
     bee:	c1 f0       	breq	.+48     	; 0xc20 <analogWrite+0x5c>
     bf0:	84 30       	cpi	r24, 0x04	; 4
     bf2:	28 f4       	brcc	.+10     	; 0xbfe <analogWrite+0x3a>
     bf4:	81 30       	cpi	r24, 0x01	; 1
     bf6:	51 f0       	breq	.+20     	; 0xc0c <analogWrite+0x48>
     bf8:	82 30       	cpi	r24, 0x02	; 2
     bfa:	b1 f5       	brne	.+108    	; 0xc68 <analogWrite+0xa4>
     bfc:	0c c0       	rjmp	.+24     	; 0xc16 <analogWrite+0x52>
     bfe:	86 30       	cpi	r24, 0x06	; 6
     c00:	19 f1       	breq	.+70     	; 0xc48 <analogWrite+0x84>
     c02:	87 30       	cpi	r24, 0x07	; 7
     c04:	49 f1       	breq	.+82     	; 0xc58 <analogWrite+0x94>
     c06:	84 30       	cpi	r24, 0x04	; 4
     c08:	79 f5       	brne	.+94     	; 0xc68 <analogWrite+0xa4>
     c0a:	14 c0       	rjmp	.+40     	; 0xc34 <analogWrite+0x70>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
     c0c:	84 b5       	in	r24, 0x24	; 36
     c0e:	80 68       	ori	r24, 0x80	; 128
     c10:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
     c12:	c7 bd       	out	0x27, r28	; 39
				break;
     c14:	33 c0       	rjmp	.+102    	; 0xc7c <analogWrite+0xb8>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
     c16:	84 b5       	in	r24, 0x24	; 36
     c18:	80 62       	ori	r24, 0x20	; 32
     c1a:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
     c1c:	c8 bd       	out	0x28, r28	; 40
				break;
     c1e:	2e c0       	rjmp	.+92     	; 0xc7c <analogWrite+0xb8>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
     c20:	80 91 80 00 	lds	r24, 0x0080
     c24:	80 68       	ori	r24, 0x80	; 128
     c26:	80 93 80 00 	sts	0x0080, r24
				OCR1A = val; // set pwm duty
     c2a:	d0 93 89 00 	sts	0x0089, r29
     c2e:	c0 93 88 00 	sts	0x0088, r28
				break;
     c32:	24 c0       	rjmp	.+72     	; 0xc7c <analogWrite+0xb8>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
     c34:	80 91 80 00 	lds	r24, 0x0080
     c38:	80 62       	ori	r24, 0x20	; 32
     c3a:	80 93 80 00 	sts	0x0080, r24
				OCR1B = val; // set pwm duty
     c3e:	d0 93 8b 00 	sts	0x008B, r29
     c42:	c0 93 8a 00 	sts	0x008A, r28
				break;
     c46:	1a c0       	rjmp	.+52     	; 0xc7c <analogWrite+0xb8>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
     c48:	80 91 b0 00 	lds	r24, 0x00B0
     c4c:	80 68       	ori	r24, 0x80	; 128
     c4e:	80 93 b0 00 	sts	0x00B0, r24
				OCR2A = val; // set pwm duty
     c52:	c0 93 b3 00 	sts	0x00B3, r28
				break;
     c56:	12 c0       	rjmp	.+36     	; 0xc7c <analogWrite+0xb8>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
     c58:	80 91 b0 00 	lds	r24, 0x00B0
     c5c:	80 62       	ori	r24, 0x20	; 32
     c5e:	80 93 b0 00 	sts	0x00B0, r24
				OCR2B = val; // set pwm duty
     c62:	c0 93 b4 00 	sts	0x00B4, r28
				break;
     c66:	0a c0       	rjmp	.+20     	; 0xc7c <analogWrite+0xb8>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
     c68:	c0 38       	cpi	r28, 0x80	; 128
     c6a:	d1 05       	cpc	r29, r1
     c6c:	1c f4       	brge	.+6      	; 0xc74 <analogWrite+0xb0>
					digitalWrite(pin, LOW);
     c6e:	81 2f       	mov	r24, r17
     c70:	60 e0       	ldi	r22, 0x00	; 0
     c72:	02 c0       	rjmp	.+4      	; 0xc78 <analogWrite+0xb4>
				} else {
					digitalWrite(pin, HIGH);
     c74:	81 2f       	mov	r24, r17
     c76:	61 e0       	ldi	r22, 0x01	; 1
     c78:	0e 94 94 06 	call	0xd28	; 0xd28 <digitalWrite>
				}
		}
	}
}
     c7c:	df 91       	pop	r29
     c7e:	cf 91       	pop	r28
     c80:	1f 91       	pop	r17
     c82:	08 95       	ret

00000c84 <pinMode>:
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
     c84:	28 2f       	mov	r18, r24
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	c9 01       	movw	r24, r18
     c8a:	80 52       	subi	r24, 0x20	; 32
     c8c:	9f 4f       	sbci	r25, 0xFF	; 255
     c8e:	fc 01       	movw	r30, r24
     c90:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
     c92:	f9 01       	movw	r30, r18
     c94:	e4 53       	subi	r30, 0x34	; 52
     c96:	ff 4f       	sbci	r31, 0xFF	; 255
     c98:	e4 91       	lpm	r30, Z+
	volatile uint8_t *reg;

	if (port == NOT_A_PIN) return;
     c9a:	ee 23       	and	r30, r30
     c9c:	b9 f0       	breq	.+46     	; 0xccc <pinMode+0x48>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	ee 0f       	add	r30, r30
     ca2:	ff 1f       	adc	r31, r31
     ca4:	e2 55       	subi	r30, 0x52	; 82
     ca6:	ff 4f       	sbci	r31, 0xFF	; 255
     ca8:	a5 91       	lpm	r26, Z+
     caa:	b4 91       	lpm	r27, Z+

	if (mode == INPUT) { 
     cac:	66 23       	and	r22, r22
     cae:	41 f4       	brne	.+16     	; 0xcc0 <pinMode+0x3c>
		uint8_t oldSREG = SREG;
     cb0:	2f b7       	in	r18, 0x3f	; 63
                cli();
     cb2:	f8 94       	cli
		*reg &= ~bit;
     cb4:	8c 91       	ld	r24, X
     cb6:	90 95       	com	r25
     cb8:	89 23       	and	r24, r25
     cba:	8c 93       	st	X, r24
		SREG = oldSREG;
     cbc:	2f bf       	out	0x3f, r18	; 63
     cbe:	08 95       	ret
	} else {
		uint8_t oldSREG = SREG;
     cc0:	2f b7       	in	r18, 0x3f	; 63
                cli();
     cc2:	f8 94       	cli
		*reg |= bit;
     cc4:	8c 91       	ld	r24, X
     cc6:	89 2b       	or	r24, r25
     cc8:	8c 93       	st	X, r24
		SREG = oldSREG;
     cca:	2f bf       	out	0x3f, r18	; 63
     ccc:	08 95       	ret

00000cce <_ZL10turnOffPWMh>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     cce:	83 30       	cpi	r24, 0x03	; 3
     cd0:	71 f0       	breq	.+28     	; 0xcee <_ZL10turnOffPWMh+0x20>
     cd2:	84 30       	cpi	r24, 0x04	; 4
     cd4:	28 f4       	brcc	.+10     	; 0xce0 <_ZL10turnOffPWMh+0x12>
     cd6:	81 30       	cpi	r24, 0x01	; 1
     cd8:	a1 f0       	breq	.+40     	; 0xd02 <_ZL10turnOffPWMh+0x34>
     cda:	82 30       	cpi	r24, 0x02	; 2
     cdc:	21 f5       	brne	.+72     	; 0xd26 <_ZL10turnOffPWMh+0x58>
     cde:	14 c0       	rjmp	.+40     	; 0xd08 <_ZL10turnOffPWMh+0x3a>
     ce0:	86 30       	cpi	r24, 0x06	; 6
     ce2:	b1 f0       	breq	.+44     	; 0xd10 <_ZL10turnOffPWMh+0x42>
     ce4:	87 30       	cpi	r24, 0x07	; 7
     ce6:	d1 f0       	breq	.+52     	; 0xd1c <_ZL10turnOffPWMh+0x4e>
     ce8:	84 30       	cpi	r24, 0x04	; 4
     cea:	e9 f4       	brne	.+58     	; 0xd26 <_ZL10turnOffPWMh+0x58>
     cec:	04 c0       	rjmp	.+8      	; 0xcf6 <_ZL10turnOffPWMh+0x28>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     cee:	80 91 80 00 	lds	r24, 0x0080
     cf2:	8f 77       	andi	r24, 0x7F	; 127
     cf4:	03 c0       	rjmp	.+6      	; 0xcfc <_ZL10turnOffPWMh+0x2e>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     cf6:	80 91 80 00 	lds	r24, 0x0080
     cfa:	8f 7d       	andi	r24, 0xDF	; 223
     cfc:	80 93 80 00 	sts	0x0080, r24
     d00:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     d02:	84 b5       	in	r24, 0x24	; 36
     d04:	8f 77       	andi	r24, 0x7F	; 127
     d06:	02 c0       	rjmp	.+4      	; 0xd0c <_ZL10turnOffPWMh+0x3e>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     d08:	84 b5       	in	r24, 0x24	; 36
     d0a:	8f 7d       	andi	r24, 0xDF	; 223
     d0c:	84 bd       	out	0x24, r24	; 36
     d0e:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     d10:	80 91 b0 00 	lds	r24, 0x00B0
     d14:	8f 77       	andi	r24, 0x7F	; 127
     d16:	80 93 b0 00 	sts	0x00B0, r24
     d1a:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     d1c:	80 91 b0 00 	lds	r24, 0x00B0
     d20:	8f 7d       	andi	r24, 0xDF	; 223
     d22:	80 93 b0 00 	sts	0x00B0, r24
     d26:	08 95       	ret

00000d28 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     d28:	0f 93       	push	r16
     d2a:	1f 93       	push	r17
     d2c:	df 93       	push	r29
     d2e:	cf 93       	push	r28
     d30:	0f 92       	push	r0
     d32:	cd b7       	in	r28, 0x3d	; 61
     d34:	de b7       	in	r29, 0x3e	; 62
	uint8_t timer = digitalPinToTimer(pin);
     d36:	28 2f       	mov	r18, r24
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	f9 01       	movw	r30, r18
     d3c:	ec 50       	subi	r30, 0x0C	; 12
     d3e:	ff 4f       	sbci	r31, 0xFF	; 255
     d40:	84 91       	lpm	r24, Z+
	uint8_t bit = digitalPinToBitMask(pin);
     d42:	f9 01       	movw	r30, r18
     d44:	e0 52       	subi	r30, 0x20	; 32
     d46:	ff 4f       	sbci	r31, 0xFF	; 255
     d48:	14 91       	lpm	r17, Z+
	uint8_t port = digitalPinToPort(pin);
     d4a:	24 53       	subi	r18, 0x34	; 52
     d4c:	3f 4f       	sbci	r19, 0xFF	; 255
     d4e:	f9 01       	movw	r30, r18
     d50:	04 91       	lpm	r16, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     d52:	00 23       	and	r16, r16
     d54:	e1 f0       	breq	.+56     	; 0xd8e <digitalWrite+0x66>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     d56:	88 23       	and	r24, r24
     d58:	21 f0       	breq	.+8      	; 0xd62 <digitalWrite+0x3a>
     d5a:	69 83       	std	Y+1, r22	; 0x01
     d5c:	0e 94 67 06 	call	0xcce	; 0xcce <_ZL10turnOffPWMh>
     d60:	69 81       	ldd	r22, Y+1	; 0x01

	out = portOutputRegister(port);
     d62:	e0 2f       	mov	r30, r16
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	ee 0f       	add	r30, r30
     d68:	ff 1f       	adc	r31, r31
     d6a:	e8 54       	subi	r30, 0x48	; 72
     d6c:	ff 4f       	sbci	r31, 0xFF	; 255
     d6e:	a5 91       	lpm	r26, Z+
     d70:	b4 91       	lpm	r27, Z+

	if (val == LOW) {
     d72:	66 23       	and	r22, r22
     d74:	31 f4       	brne	.+12     	; 0xd82 <digitalWrite+0x5a>
		uint8_t oldSREG = SREG;
     d76:	9f b7       	in	r25, 0x3f	; 63
                cli();
     d78:	f8 94       	cli
		*out &= ~bit;
     d7a:	8c 91       	ld	r24, X
     d7c:	10 95       	com	r17
     d7e:	81 23       	and	r24, r17
     d80:	04 c0       	rjmp	.+8      	; 0xd8a <digitalWrite+0x62>
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
     d82:	9f b7       	in	r25, 0x3f	; 63
                cli();
     d84:	f8 94       	cli
		*out |= bit;
     d86:	8c 91       	ld	r24, X
     d88:	81 2b       	or	r24, r17
     d8a:	8c 93       	st	X, r24
		SREG = oldSREG;
     d8c:	9f bf       	out	0x3f, r25	; 63
	}
}
     d8e:	0f 90       	pop	r0
     d90:	cf 91       	pop	r28
     d92:	df 91       	pop	r29
     d94:	1f 91       	pop	r17
     d96:	0f 91       	pop	r16
     d98:	08 95       	ret

00000d9a <digitalRead>:

int digitalRead(uint8_t pin)
{
     d9a:	0f 93       	push	r16
     d9c:	1f 93       	push	r17
	uint8_t timer = digitalPinToTimer(pin);
     d9e:	28 2f       	mov	r18, r24
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	f9 01       	movw	r30, r18
     da4:	ec 50       	subi	r30, 0x0C	; 12
     da6:	ff 4f       	sbci	r31, 0xFF	; 255
     da8:	84 91       	lpm	r24, Z+
	uint8_t bit = digitalPinToBitMask(pin);
     daa:	f9 01       	movw	r30, r18
     dac:	e0 52       	subi	r30, 0x20	; 32
     dae:	ff 4f       	sbci	r31, 0xFF	; 255
     db0:	04 91       	lpm	r16, Z+
	uint8_t port = digitalPinToPort(pin);
     db2:	24 53       	subi	r18, 0x34	; 52
     db4:	3f 4f       	sbci	r19, 0xFF	; 255
     db6:	f9 01       	movw	r30, r18
     db8:	14 91       	lpm	r17, Z+

	if (port == NOT_A_PIN) return LOW;
     dba:	11 23       	and	r17, r17
     dbc:	19 f4       	brne	.+6      	; 0xdc4 <digitalRead+0x2a>
     dbe:	20 e0       	ldi	r18, 0x00	; 0
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	13 c0       	rjmp	.+38     	; 0xdea <digitalRead+0x50>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     dc4:	88 23       	and	r24, r24
     dc6:	11 f0       	breq	.+4      	; 0xdcc <digitalRead+0x32>
     dc8:	0e 94 67 06 	call	0xcce	; 0xcce <_ZL10turnOffPWMh>

	if (*portInputRegister(port) & bit) return HIGH;
     dcc:	e1 2f       	mov	r30, r17
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	ee 0f       	add	r30, r30
     dd2:	ff 1f       	adc	r31, r31
     dd4:	ee 53       	subi	r30, 0x3E	; 62
     dd6:	ff 4f       	sbci	r31, 0xFF	; 255
     dd8:	a5 91       	lpm	r26, Z+
     dda:	b4 91       	lpm	r27, Z+
     ddc:	8c 91       	ld	r24, X
     dde:	20 e0       	ldi	r18, 0x00	; 0
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	80 23       	and	r24, r16
     de4:	11 f0       	breq	.+4      	; 0xdea <digitalRead+0x50>
     de6:	21 e0       	ldi	r18, 0x01	; 1
     de8:	30 e0       	ldi	r19, 0x00	; 0
	return LOW;
}
     dea:	c9 01       	movw	r24, r18
     dec:	1f 91       	pop	r17
     dee:	0f 91       	pop	r16
     df0:	08 95       	ret

00000df2 <pulseIn>:
/* Measures the length (in microseconds) of a pulse on the pin; state is HIGH
 * or LOW, the type of pulse to measure.  Works on pulses from 2-3 microseconds
 * to 3 minutes in length, but must be called at least a few dozen microseconds
 * before the start of the pulse. */
unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)
{
     df2:	6f 92       	push	r6
     df4:	7f 92       	push	r7
     df6:	8f 92       	push	r8
     df8:	9f 92       	push	r9
     dfa:	af 92       	push	r10
     dfc:	bf 92       	push	r11
     dfe:	cf 92       	push	r12
     e00:	df 92       	push	r13
     e02:	ff 92       	push	r15
     e04:	0f 93       	push	r16
     e06:	1f 93       	push	r17
     e08:	96 2f       	mov	r25, r22
	// cache the port and bit of the pin in order to speed up the
	// pulse width measuring loop and achieve finer resolution.  calling
	// digitalRead() instead yields much coarser resolution.
	uint8_t bit = digitalPinToBitMask(pin);
     e0a:	68 2f       	mov	r22, r24
     e0c:	70 e0       	ldi	r23, 0x00	; 0
     e0e:	fb 01       	movw	r30, r22
     e10:	e0 52       	subi	r30, 0x20	; 32
     e12:	ff 4f       	sbci	r31, 0xFF	; 255
     e14:	14 91       	lpm	r17, Z+
	uint8_t port = digitalPinToPort(pin);
     e16:	64 53       	subi	r22, 0x34	; 52
     e18:	7f 4f       	sbci	r23, 0xFF	; 255
     e1a:	fb 01       	movw	r30, r22
     e1c:	f4 90       	lpm	r15, Z+
	uint8_t stateMask = (state ? bit : 0);
     e1e:	99 23       	and	r25, r25
     e20:	11 f0       	breq	.+4      	; 0xe26 <pulseIn+0x34>
     e22:	01 2f       	mov	r16, r17
     e24:	01 c0       	rjmp	.+2      	; 0xe28 <pulseIn+0x36>
     e26:	00 e0       	ldi	r16, 0x00	; 0
	unsigned long width = 0; // keep initialization out of time critical area
	
	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
     e28:	ca 01       	movw	r24, r20
     e2a:	b9 01       	movw	r22, r18
     e2c:	20 e8       	ldi	r18, 0x80	; 128
     e2e:	3e e3       	ldi	r19, 0x3E	; 62
     e30:	40 e0       	ldi	r20, 0x00	; 0
     e32:	50 e0       	ldi	r21, 0x00	; 0
     e34:	0e 94 f7 20 	call	0x41ee	; 0x41ee <__mulsi3>
     e38:	0e 94 3d 21 	call	0x427a	; 0x427a <__udivmodsi4>
     e3c:	59 01       	movw	r10, r18
     e3e:	6a 01       	movw	r12, r20
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
     e40:	8f 2d       	mov	r24, r15
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	8e 53       	subi	r24, 0x3E	; 62
     e4a:	9f 4f       	sbci	r25, 0xFF	; 255
     e4c:	20 e0       	ldi	r18, 0x00	; 0
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	a9 01       	movw	r20, r18
     e52:	fc 01       	movw	r30, r24
     e54:	a5 91       	lpm	r26, Z+
     e56:	b4 91       	lpm	r27, Z+
     e58:	0a c0       	rjmp	.+20     	; 0xe6e <pulseIn+0x7c>
		if (numloops++ == maxloops)
     e5a:	2a 15       	cp	r18, r10
     e5c:	3b 05       	cpc	r19, r11
     e5e:	4c 05       	cpc	r20, r12
     e60:	5d 05       	cpc	r21, r13
     e62:	09 f4       	brne	.+2      	; 0xe66 <pulseIn+0x74>
     e64:	49 c0       	rjmp	.+146    	; 0xef8 <pulseIn+0x106>
     e66:	2f 5f       	subi	r18, 0xFF	; 255
     e68:	3f 4f       	sbci	r19, 0xFF	; 255
     e6a:	4f 4f       	sbci	r20, 0xFF	; 255
     e6c:	5f 4f       	sbci	r21, 0xFF	; 255
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
     e6e:	6c 91       	ld	r22, X
     e70:	61 23       	and	r22, r17
     e72:	60 17       	cp	r22, r16
     e74:	91 f3       	breq	.-28     	; 0xe5a <pulseIn+0x68>
     e76:	0b c0       	rjmp	.+22     	; 0xe8e <pulseIn+0x9c>
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to start
	while ((*portInputRegister(port) & bit) != stateMask)
		if (numloops++ == maxloops)
     e78:	2a 15       	cp	r18, r10
     e7a:	3b 05       	cpc	r19, r11
     e7c:	4c 05       	cpc	r20, r12
     e7e:	5d 05       	cpc	r21, r13
     e80:	09 f4       	brne	.+2      	; 0xe84 <pulseIn+0x92>
     e82:	3a c0       	rjmp	.+116    	; 0xef8 <pulseIn+0x106>
     e84:	2f 5f       	subi	r18, 0xFF	; 255
     e86:	3f 4f       	sbci	r19, 0xFF	; 255
     e88:	4f 4f       	sbci	r20, 0xFF	; 255
     e8a:	5f 4f       	sbci	r21, 0xFF	; 255
     e8c:	03 c0       	rjmp	.+6      	; 0xe94 <pulseIn+0xa2>
	while ((*portInputRegister(port) & bit) == stateMask)
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to start
	while ((*portInputRegister(port) & bit) != stateMask)
     e8e:	fc 01       	movw	r30, r24
     e90:	a5 91       	lpm	r26, Z+
     e92:	b4 91       	lpm	r27, Z+
     e94:	6c 91       	ld	r22, X
     e96:	61 23       	and	r22, r17
     e98:	60 17       	cp	r22, r16
     e9a:	71 f7       	brne	.-36     	; 0xe78 <pulseIn+0x86>
     e9c:	66 24       	eor	r6, r6
     e9e:	77 24       	eor	r7, r7
     ea0:	43 01       	movw	r8, r6
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
     ea2:	fc 01       	movw	r30, r24
     ea4:	a5 91       	lpm	r26, Z+
     ea6:	b4 91       	lpm	r27, Z+
     ea8:	10 c0       	rjmp	.+32     	; 0xeca <pulseIn+0xd8>
		if (numloops++ == maxloops)
     eaa:	c4 01       	movw	r24, r8
     eac:	b3 01       	movw	r22, r6
     eae:	62 0f       	add	r22, r18
     eb0:	73 1f       	adc	r23, r19
     eb2:	84 1f       	adc	r24, r20
     eb4:	95 1f       	adc	r25, r21
     eb6:	6a 15       	cp	r22, r10
     eb8:	7b 05       	cpc	r23, r11
     eba:	8c 05       	cpc	r24, r12
     ebc:	9d 05       	cpc	r25, r13
     ebe:	e1 f0       	breq	.+56     	; 0xef8 <pulseIn+0x106>
			return 0;
		width++;
     ec0:	08 94       	sec
     ec2:	61 1c       	adc	r6, r1
     ec4:	71 1c       	adc	r7, r1
     ec6:	81 1c       	adc	r8, r1
     ec8:	91 1c       	adc	r9, r1
	while ((*portInputRegister(port) & bit) != stateMask)
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
     eca:	8c 91       	ld	r24, X
     ecc:	81 23       	and	r24, r17
     ece:	80 17       	cp	r24, r16
     ed0:	61 f3       	breq	.-40     	; 0xeaa <pulseIn+0xb8>

	// convert the reading to microseconds. The loop has been determined
	// to be 20 clock cycles long and have about 16 clocks between the edge
	// and the start of the loop. There will be some error introduced by
	// the interrupt handlers.
	return clockCyclesToMicroseconds(width * 21 + 16); 
     ed2:	c4 01       	movw	r24, r8
     ed4:	b3 01       	movw	r22, r6
     ed6:	28 e0       	ldi	r18, 0x08	; 8
     ed8:	32 e5       	ldi	r19, 0x52	; 82
     eda:	40 e0       	ldi	r20, 0x00	; 0
     edc:	50 e0       	ldi	r21, 0x00	; 0
     ede:	0e 94 f7 20 	call	0x41ee	; 0x41ee <__mulsi3>
     ee2:	60 58       	subi	r22, 0x80	; 128
     ee4:	71 4c       	sbci	r23, 0xC1	; 193
     ee6:	8f 4f       	sbci	r24, 0xFF	; 255
     ee8:	9f 4f       	sbci	r25, 0xFF	; 255
     eea:	20 e8       	ldi	r18, 0x80	; 128
     eec:	3e e3       	ldi	r19, 0x3E	; 62
     eee:	40 e0       	ldi	r20, 0x00	; 0
     ef0:	50 e0       	ldi	r21, 0x00	; 0
     ef2:	0e 94 3d 21 	call	0x427a	; 0x427a <__udivmodsi4>
     ef6:	03 c0       	rjmp	.+6      	; 0xefe <pulseIn+0x10c>
     ef8:	20 e0       	ldi	r18, 0x00	; 0
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	a9 01       	movw	r20, r18
}
     efe:	b9 01       	movw	r22, r18
     f00:	ca 01       	movw	r24, r20
     f02:	1f 91       	pop	r17
     f04:	0f 91       	pop	r16
     f06:	ff 90       	pop	r15
     f08:	df 90       	pop	r13
     f0a:	cf 90       	pop	r12
     f0c:	bf 90       	pop	r11
     f0e:	af 90       	pop	r10
     f10:	9f 90       	pop	r9
     f12:	8f 90       	pop	r8
     f14:	7f 90       	pop	r7
     f16:	6f 90       	pop	r6
     f18:	08 95       	ret

00000f1a <shiftOut>:
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
     f1a:	af 92       	push	r10
     f1c:	bf 92       	push	r11
     f1e:	cf 92       	push	r12
     f20:	df 92       	push	r13
     f22:	ff 92       	push	r15
     f24:	0f 93       	push	r16
     f26:	1f 93       	push	r17
     f28:	cf 93       	push	r28
     f2a:	df 93       	push	r29
     f2c:	08 2f       	mov	r16, r24
     f2e:	16 2f       	mov	r17, r22
     f30:	f4 2e       	mov	r15, r20
     f32:	c7 e0       	ldi	r28, 0x07	; 7
     f34:	d0 e0       	ldi	r29, 0x00	; 0
     f36:	c2 2e       	mov	r12, r18
     f38:	dd 24       	eor	r13, r13
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
			digitalWrite(dataPin, !!(val & (1 << i)));
     f3a:	87 e0       	ldi	r24, 0x07	; 7
     f3c:	a8 2e       	mov	r10, r24
     f3e:	b1 2c       	mov	r11, r1
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
     f40:	ff 20       	and	r15, r15
     f42:	59 f4       	brne	.+22     	; 0xf5a <shiftOut+0x40>
			digitalWrite(dataPin, !!(val & (1 << i)));
     f44:	b5 01       	movw	r22, r10
     f46:	6c 1b       	sub	r22, r28
     f48:	7d 0b       	sbc	r23, r29
     f4a:	c6 01       	movw	r24, r12
     f4c:	02 c0       	rjmp	.+4      	; 0xf52 <shiftOut+0x38>
     f4e:	95 95       	asr	r25
     f50:	87 95       	ror	r24
     f52:	6a 95       	dec	r22
     f54:	e2 f7       	brpl	.-8      	; 0xf4e <shiftOut+0x34>
     f56:	bc 01       	movw	r22, r24
     f58:	07 c0       	rjmp	.+14     	; 0xf68 <shiftOut+0x4e>
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
     f5a:	b6 01       	movw	r22, r12
     f5c:	0c 2e       	mov	r0, r28
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <shiftOut+0x4a>
     f60:	75 95       	asr	r23
     f62:	67 95       	ror	r22
     f64:	0a 94       	dec	r0
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <shiftOut+0x46>
     f68:	61 70       	andi	r22, 0x01	; 1
     f6a:	70 70       	andi	r23, 0x00	; 0
     f6c:	80 2f       	mov	r24, r16
     f6e:	0e 94 94 06 	call	0xd28	; 0xd28 <digitalWrite>
			
		digitalWrite(clockPin, HIGH);
     f72:	81 2f       	mov	r24, r17
     f74:	61 e0       	ldi	r22, 0x01	; 1
     f76:	0e 94 94 06 	call	0xd28	; 0xd28 <digitalWrite>
		digitalWrite(clockPin, LOW);		
     f7a:	81 2f       	mov	r24, r17
     f7c:	60 e0       	ldi	r22, 0x00	; 0
     f7e:	0e 94 94 06 	call	0xd28	; 0xd28 <digitalWrite>
     f82:	21 97       	sbiw	r28, 0x01	; 1

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
     f84:	9f ef       	ldi	r25, 0xFF	; 255
     f86:	cf 3f       	cpi	r28, 0xFF	; 255
     f88:	d9 07       	cpc	r29, r25
     f8a:	d1 f6       	brne	.-76     	; 0xf40 <shiftOut+0x26>
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
			
		digitalWrite(clockPin, HIGH);
		digitalWrite(clockPin, LOW);		
	}
}
     f8c:	df 91       	pop	r29
     f8e:	cf 91       	pop	r28
     f90:	1f 91       	pop	r17
     f92:	0f 91       	pop	r16
     f94:	ff 90       	pop	r15
     f96:	df 90       	pop	r13
     f98:	cf 90       	pop	r12
     f9a:	bf 90       	pop	r11
     f9c:	af 90       	pop	r10
     f9e:	08 95       	ret

00000fa0 <shiftIn>:
  $Id: wiring.c 248 2007-02-03 15:36:30Z mellis $
*/

#include "wiring_private.h"

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
     fa0:	cf 92       	push	r12
     fa2:	df 92       	push	r13
     fa4:	ef 92       	push	r14
     fa6:	ff 92       	push	r15
     fa8:	0f 93       	push	r16
     faa:	1f 93       	push	r17
     fac:	cf 93       	push	r28
     fae:	df 93       	push	r29
     fb0:	08 2f       	mov	r16, r24
     fb2:	16 2f       	mov	r17, r22
     fb4:	e4 2e       	mov	r14, r20
     fb6:	c7 e0       	ldi	r28, 0x07	; 7
     fb8:	d0 e0       	ldi	r29, 0x00	; 0
     fba:	ff 24       	eor	r15, r15
	uint8_t i;

	for (i = 0; i < 8; ++i) {
		digitalWrite(clockPin, HIGH);
		if (bitOrder == LSBFIRST)
			value |= digitalRead(dataPin) << i;
     fbc:	97 e0       	ldi	r25, 0x07	; 7
     fbe:	c9 2e       	mov	r12, r25
     fc0:	d1 2c       	mov	r13, r1
uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
	uint8_t value = 0;
	uint8_t i;

	for (i = 0; i < 8; ++i) {
		digitalWrite(clockPin, HIGH);
     fc2:	81 2f       	mov	r24, r17
     fc4:	61 e0       	ldi	r22, 0x01	; 1
     fc6:	0e 94 94 06 	call	0xd28	; 0xd28 <digitalWrite>
		if (bitOrder == LSBFIRST)
     fca:	ee 20       	and	r14, r14
     fcc:	71 f4       	brne	.+28     	; 0xfea <shiftIn+0x4a>
			value |= digitalRead(dataPin) << i;
     fce:	80 2f       	mov	r24, r16
     fd0:	0e 94 cd 06 	call	0xd9a	; 0xd9a <digitalRead>
     fd4:	96 01       	movw	r18, r12
     fd6:	2c 1b       	sub	r18, r28
     fd8:	3d 0b       	sbc	r19, r29
     fda:	ac 01       	movw	r20, r24
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <shiftIn+0x42>
     fde:	44 0f       	add	r20, r20
     fe0:	55 1f       	adc	r21, r21
     fe2:	2a 95       	dec	r18
     fe4:	e2 f7       	brpl	.-8      	; 0xfde <shiftIn+0x3e>
     fe6:	f4 2a       	or	r15, r20
     fe8:	0a c0       	rjmp	.+20     	; 0xffe <shiftIn+0x5e>
		else
			value |= digitalRead(dataPin) << (7 - i);
     fea:	80 2f       	mov	r24, r16
     fec:	0e 94 cd 06 	call	0xd9a	; 0xd9a <digitalRead>
     ff0:	0c 2e       	mov	r0, r28
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <shiftIn+0x58>
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	0a 94       	dec	r0
     ffa:	e2 f7       	brpl	.-8      	; 0xff4 <shiftIn+0x54>
     ffc:	f8 2a       	or	r15, r24
		digitalWrite(clockPin, LOW);
     ffe:	81 2f       	mov	r24, r17
    1000:	60 e0       	ldi	r22, 0x00	; 0
    1002:	0e 94 94 06 	call	0xd28	; 0xd28 <digitalWrite>
    1006:	21 97       	sbiw	r28, 0x01	; 1

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
	uint8_t value = 0;
	uint8_t i;

	for (i = 0; i < 8; ++i) {
    1008:	3f ef       	ldi	r19, 0xFF	; 255
    100a:	cf 3f       	cpi	r28, 0xFF	; 255
    100c:	d3 07       	cpc	r29, r19
    100e:	c9 f6       	brne	.-78     	; 0xfc2 <shiftIn+0x22>
		else
			value |= digitalRead(dataPin) << (7 - i);
		digitalWrite(clockPin, LOW);
	}
	return value;
}
    1010:	8f 2d       	mov	r24, r15
    1012:	df 91       	pop	r29
    1014:	cf 91       	pop	r28
    1016:	1f 91       	pop	r17
    1018:	0f 91       	pop	r16
    101a:	ff 90       	pop	r15
    101c:	ef 90       	pop	r14
    101e:	df 90       	pop	r13
    1020:	cf 90       	pop	r12
    1022:	08 95       	ret

00001024 <_ZN17AFMotorControllerC2Ev>:
#elif (MICROSTEPS == 16)
uint8_t microstepcurve[] = {0, 25, 50, 74, 98, 120, 141, 162, 180, 197, 212, 225, 236, 244, 250, 253, 255};
#endif

AFMotorController::AFMotorController(void) {
}
    1024:	08 95       	ret

00001026 <_ZN17AFMotorControllerC1Ev>:
    1026:	08 95       	ret

00001028 <_ZN10AF_DCMotor8setSpeedEh>:
    break;
  }
}

void AF_DCMotor::setSpeed(uint8_t speed) {
  switch (motornum) {
    1028:	fc 01       	movw	r30, r24
    102a:	80 81       	ld	r24, Z
    102c:	82 30       	cpi	r24, 0x02	; 2
    102e:	69 f0       	breq	.+26     	; 0x104a <_ZN10AF_DCMotor8setSpeedEh+0x22>
    1030:	83 30       	cpi	r24, 0x03	; 3
    1032:	18 f4       	brcc	.+6      	; 0x103a <_ZN10AF_DCMotor8setSpeedEh+0x12>
    1034:	81 30       	cpi	r24, 0x01	; 1
    1036:	79 f4       	brne	.+30     	; 0x1056 <_ZN10AF_DCMotor8setSpeedEh+0x2e>
    1038:	05 c0       	rjmp	.+10     	; 0x1044 <_ZN10AF_DCMotor8setSpeedEh+0x1c>
    103a:	83 30       	cpi	r24, 0x03	; 3
    103c:	49 f0       	breq	.+18     	; 0x1050 <_ZN10AF_DCMotor8setSpeedEh+0x28>
    103e:	84 30       	cpi	r24, 0x04	; 4
    1040:	51 f4       	brne	.+20     	; 0x1056 <_ZN10AF_DCMotor8setSpeedEh+0x2e>
    1042:	08 c0       	rjmp	.+16     	; 0x1054 <_ZN10AF_DCMotor8setSpeedEh+0x2c>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    OCR2A = s;
    1044:	60 93 b3 00 	sts	0x00B3, r22
}

void AF_DCMotor::setSpeed(uint8_t speed) {
  switch (motornum) {
  case 1:
    setPWM1(speed); break;
    1048:	08 95       	ret
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    OCR2B = s;
    104a:	60 93 b4 00 	sts	0x00B4, r22
void AF_DCMotor::setSpeed(uint8_t speed) {
  switch (motornum) {
  case 1:
    setPWM1(speed); break;
  case 2:
    setPWM2(speed); break;
    104e:	08 95       	ret
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A on PB3 (Arduino pin #6)
    OCR0A = s;
    1050:	67 bd       	out	0x27, r22	; 39
  case 1:
    setPWM1(speed); break;
  case 2:
    setPWM2(speed); break;
  case 3:
    setPWM3(speed); break;
    1052:	08 95       	ret
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A on PB3 (Arduino pin #6)
    OCR0B = s;
    1054:	68 bd       	out	0x28, r22	; 40
    1056:	08 95       	ret

00001058 <_ZN10AF_Stepper8setSpeedEj>:
    setPWM3(255);
    setPWM4(255);
  }
}

void AF_Stepper::setSpeed(uint16_t rpm) {
    1058:	cf 93       	push	r28
    105a:	df 93       	push	r29
    105c:	ec 01       	movw	r28, r24
  // fixes gcc internal comiple bug
  uint32_t tmp = 0;
  tmp = revsteps * rpm;
  usperstep = 60000000 / tmp;
    105e:	88 81       	ld	r24, Y
    1060:	99 81       	ldd	r25, Y+1	; 0x01
    1062:	68 9f       	mul	r22, r24
    1064:	90 01       	movw	r18, r0
    1066:	69 9f       	mul	r22, r25
    1068:	30 0d       	add	r19, r0
    106a:	78 9f       	mul	r23, r24
    106c:	30 0d       	add	r19, r0
    106e:	11 24       	eor	r1, r1
    1070:	40 e0       	ldi	r20, 0x00	; 0
    1072:	50 e0       	ldi	r21, 0x00	; 0
    1074:	60 e0       	ldi	r22, 0x00	; 0
    1076:	77 e8       	ldi	r23, 0x87	; 135
    1078:	83 e9       	ldi	r24, 0x93	; 147
    107a:	93 e0       	ldi	r25, 0x03	; 3
    107c:	0e 94 3d 21 	call	0x427a	; 0x427a <__udivmodsi4>
    1080:	2b 83       	std	Y+3, r18	; 0x03
    1082:	3c 83       	std	Y+4, r19	; 0x04
    1084:	4d 83       	std	Y+5, r20	; 0x05
    1086:	5e 83       	std	Y+6, r21	; 0x06
  // wont compile with -O2 or -O3 - see bug http://gcc.gnu.org/bugzilla/show_bug.cgi?id=44245#c5
  //usperstep = 60000000 / ((uint32_t)revsteps * (uint32_t)rpm);
  steppingcounter = 0;
    1088:	1f 82       	std	Y+7, r1	; 0x07
    108a:	18 86       	std	Y+8, r1	; 0x08
    108c:	19 86       	std	Y+9, r1	; 0x09
    108e:	1a 86       	std	Y+10, r1	; 0x0a
}
    1090:	df 91       	pop	r29
    1092:	cf 91       	pop	r28
    1094:	08 95       	ret

00001096 <_GLOBAL__I_microstepcurve>:
  }

 
  MC.latch_tx();
  return currentstep;
}
    1096:	08 95       	ret

00001098 <_Z8initPWM1h>:
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    // fast PWM, turn on oc2a
	TCCR2A |= _BV(COM2A1) | _BV(WGM20) | _BV(WGM21);
    1098:	e0 eb       	ldi	r30, 0xB0	; 176
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	90 81       	ld	r25, Z
    109e:	93 68       	ori	r25, 0x83	; 131
    10a0:	90 83       	st	Z, r25
    TCCR2B = freq & 0x7;
    10a2:	87 70       	andi	r24, 0x07	; 7
    10a4:	80 93 b1 00 	sts	0x00B1, r24
    OCR2A = 0;
    10a8:	10 92 b3 00 	sts	0x00B3, r1
    TCCR1B = (freq & 0x7) | _BV(WGM12);
    OCR1A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(11, OUTPUT);
    10ac:	8b e0       	ldi	r24, 0x0B	; 11
    10ae:	61 e0       	ldi	r22, 0x01	; 1
    10b0:	0e 94 42 06 	call	0xc84	; 0xc84 <pinMode>
}
    10b4:	08 95       	ret

000010b6 <_Z8initPWM2h>:
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2B (pin 3)
	// fast PWM, turn on oc2b
    TCCR2A |= _BV(COM2B1) | _BV(WGM20) | _BV(WGM21);
    10b6:	e0 eb       	ldi	r30, 0xB0	; 176
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	90 81       	ld	r25, Z
    10bc:	93 62       	ori	r25, 0x23	; 35
    10be:	90 83       	st	Z, r25
    TCCR2B = freq & 0x7;
    10c0:	87 70       	andi	r24, 0x07	; 7
    10c2:	80 93 b1 00 	sts	0x00B1, r24
    OCR2B = 0;
    10c6:	10 92 b4 00 	sts	0x00B4, r1
    OCR3C = 0;
#else
   #error "This chip is not supported!"
#endif

    pinMode(3, OUTPUT);
    10ca:	83 e0       	ldi	r24, 0x03	; 3
    10cc:	61 e0       	ldi	r22, 0x01	; 1
    10ce:	0e 94 42 06 	call	0xc84	; 0xc84 <pinMode>
}
    10d2:	08 95       	ret

000010d4 <_Z8initPWM3h>:
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A / PD6 (pin 6)
    // fast PWM, turn on OC0A
	TCCR0A |= _BV(COM0A1) | _BV(WGM00) | _BV(WGM01);
    10d4:	84 b5       	in	r24, 0x24	; 36
    10d6:	83 68       	ori	r24, 0x83	; 131
    10d8:	84 bd       	out	0x24, r24	; 36
    //TCCR0B = freq & 0x7;
    OCR0A = 0;
    10da:	17 bc       	out	0x27, r1	; 39
    //TCCR4B = 1 | _BV(WGM12);
    OCR4A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(6, OUTPUT);
    10dc:	86 e0       	ldi	r24, 0x06	; 6
    10de:	61 e0       	ldi	r22, 0x01	; 1
    10e0:	0e 94 42 06 	call	0xc84	; 0xc84 <pinMode>
}
    10e4:	08 95       	ret

000010e6 <_Z8initPWM4h>:
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0B / PD5 (pin 5)
    // fast PWM, turn on oc0a
	TCCR0A |= _BV(COM0B1) | _BV(WGM00) | _BV(WGM01);
    10e6:	84 b5       	in	r24, 0x24	; 36
    10e8:	83 62       	ori	r24, 0x23	; 35
    10ea:	84 bd       	out	0x24, r24	; 36
    //TCCR0B = freq & 0x7;
    OCR0B = 0;
    10ec:	18 bc       	out	0x28, r1	; 40
    //TCCR4B = 1 | _BV(WGM12);
    OCR3A = 0;
#else
   #error "This chip is not supported!"
#endif
    pinMode(5, OUTPUT);
    10ee:	85 e0       	ldi	r24, 0x05	; 5
    10f0:	61 e0       	ldi	r22, 0x01	; 1
    10f2:	0e 94 42 06 	call	0xc84	; 0xc84 <pinMode>
}
    10f6:	08 95       	ret

000010f8 <_ZN17AFMotorController8latch_txEv>:
	// enable the chip outputs!
	digitalWrite(MOTORENABLE, LOW);
}


void AFMotorController::latch_tx(void) {
    10f8:	cf 93       	push	r28
    10fa:	df 93       	push	r29
	uint8_t i;

	digitalWrite(MOTORLATCH, LOW);
    10fc:	8c e0       	ldi	r24, 0x0C	; 12
    10fe:	60 e0       	ldi	r22, 0x00	; 0
    1100:	0e 94 94 06 	call	0xd28	; 0xd28 <digitalWrite>
	digitalWrite(MOTORDATA, LOW);
    1104:	88 e0       	ldi	r24, 0x08	; 8
    1106:	60 e0       	ldi	r22, 0x00	; 0
    1108:	0e 94 94 06 	call	0xd28	; 0xd28 <digitalWrite>
    110c:	c7 e0       	ldi	r28, 0x07	; 7
    110e:	d0 e0       	ldi	r29, 0x00	; 0

	for (i=0; i<8; i++) {
		digitalWrite(MOTORCLK, LOW);
    1110:	84 e0       	ldi	r24, 0x04	; 4
    1112:	60 e0       	ldi	r22, 0x00	; 0
    1114:	0e 94 94 06 	call	0xd28	; 0xd28 <digitalWrite>
		if (latch_state & _BV(7-i)) {
    1118:	80 91 be 02 	lds	r24, 0x02BE
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	0c 2e       	mov	r0, r28
    1120:	02 c0       	rjmp	.+4      	; 0x1126 <_ZN17AFMotorController8latch_txEv+0x2e>
    1122:	95 95       	asr	r25
    1124:	87 95       	ror	r24
    1126:	0a 94       	dec	r0
    1128:	e2 f7       	brpl	.-8      	; 0x1122 <_ZN17AFMotorController8latch_txEv+0x2a>
    112a:	80 ff       	sbrs	r24, 0
    112c:	03 c0       	rjmp	.+6      	; 0x1134 <_ZN17AFMotorController8latch_txEv+0x3c>
			digitalWrite(MOTORDATA, HIGH);
    112e:	88 e0       	ldi	r24, 0x08	; 8
    1130:	61 e0       	ldi	r22, 0x01	; 1
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <_ZN17AFMotorController8latch_txEv+0x40>
		} else {
		  	digitalWrite(MOTORDATA, LOW);
    1134:	88 e0       	ldi	r24, 0x08	; 8
    1136:	60 e0       	ldi	r22, 0x00	; 0
    1138:	0e 94 94 06 	call	0xd28	; 0xd28 <digitalWrite>
		}
		digitalWrite(MOTORCLK, HIGH);
    113c:	84 e0       	ldi	r24, 0x04	; 4
    113e:	61 e0       	ldi	r22, 0x01	; 1
    1140:	0e 94 94 06 	call	0xd28	; 0xd28 <digitalWrite>
    1144:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t i;

	digitalWrite(MOTORLATCH, LOW);
	digitalWrite(MOTORDATA, LOW);

	for (i=0; i<8; i++) {
    1146:	3f ef       	ldi	r19, 0xFF	; 255
    1148:	cf 3f       	cpi	r28, 0xFF	; 255
    114a:	d3 07       	cpc	r29, r19
    114c:	09 f7       	brne	.-62     	; 0x1110 <_ZN17AFMotorController8latch_txEv+0x18>
		} else {
		  	digitalWrite(MOTORDATA, LOW);
		}
		digitalWrite(MOTORCLK, HIGH);
	}
	digitalWrite(MOTORLATCH, HIGH);
    114e:	8c e0       	ldi	r24, 0x0C	; 12
    1150:	61 e0       	ldi	r22, 0x01	; 1
    1152:	0e 94 94 06 	call	0xd28	; 0xd28 <digitalWrite>
}
    1156:	df 91       	pop	r29
    1158:	cf 91       	pop	r28
    115a:	08 95       	ret

0000115c <_ZN10AF_Stepper7onestepEhh>:
      } 
    }
  }
}

uint8_t AF_Stepper::onestep(uint8_t dir, uint8_t style) {
    115c:	cf 93       	push	r28
    115e:	df 93       	push	r29
    1160:	ec 01       	movw	r28, r24
  uint8_t a, b, c, d;
  uint8_t ocrb, ocra;

  ocra = ocrb = 255;

  if (steppernum == 1) {
    1162:	8a 81       	ldd	r24, Y+2	; 0x02
    1164:	81 30       	cpi	r24, 0x01	; 1
    1166:	29 f4       	brne	.+10     	; 0x1172 <_ZN10AF_Stepper7onestepEhh+0x16>
    1168:	50 e1       	ldi	r21, 0x10	; 16
    116a:	78 e0       	ldi	r23, 0x08	; 8
    116c:	f2 e0       	ldi	r31, 0x02	; 2
    116e:	e4 e0       	ldi	r30, 0x04	; 4
    1170:	08 c0       	rjmp	.+16     	; 0x1182 <_ZN10AF_Stepper7onestepEhh+0x26>
    a = _BV(MOTOR1_A);
    b = _BV(MOTOR2_A);
    c = _BV(MOTOR1_B);
    d = _BV(MOTOR2_B);
  } else if (steppernum == 2) {
    1172:	82 30       	cpi	r24, 0x02	; 2
    1174:	11 f0       	breq	.+4      	; 0x117a <_ZN10AF_Stepper7onestepEhh+0x1e>
    1176:	80 e0       	ldi	r24, 0x00	; 0
    1178:	e1 c0       	rjmp	.+450    	; 0x133c <_ZN10AF_Stepper7onestepEhh+0x1e0>
    117a:	50 e4       	ldi	r21, 0x40	; 64
    117c:	70 e8       	ldi	r23, 0x80	; 128
    117e:	f1 e0       	ldi	r31, 0x01	; 1
    1180:	e0 e2       	ldi	r30, 0x20	; 32
  } else {
    return 0;
  }

  // next determine what sort of stepping procedure we're up to
  if (style == SINGLE) {
    1182:	41 30       	cpi	r20, 0x01	; 1
    1184:	41 f4       	brne	.+16     	; 0x1196 <_ZN10AF_Stepper7onestepEhh+0x3a>
    if ((currentstep/(MICROSTEPS/2)) % 2) { // we're at an odd step, weird
    1186:	8b 85       	ldd	r24, Y+11	; 0x0b
    1188:	98 2f       	mov	r25, r24
    118a:	96 95       	lsr	r25
    118c:	96 95       	lsr	r25
    118e:	96 95       	lsr	r25
    1190:	90 ff       	sbrs	r25, 0
    1192:	0a c0       	rjmp	.+20     	; 0x11a8 <_ZN10AF_Stepper7onestepEhh+0x4c>
    1194:	13 c0       	rjmp	.+38     	; 0x11bc <_ZN10AF_Stepper7onestepEhh+0x60>
      }
      else {
	currentstep -= MICROSTEPS;
      }
    }
  } else if (style == DOUBLE) {
    1196:	42 30       	cpi	r20, 0x02	; 2
    1198:	71 f4       	brne	.+28     	; 0x11b6 <_ZN10AF_Stepper7onestepEhh+0x5a>
    if (! (currentstep/(MICROSTEPS/2) % 2)) { // we're at an even step, weird
    119a:	8b 85       	ldd	r24, Y+11	; 0x0b
    119c:	98 2f       	mov	r25, r24
    119e:	96 95       	lsr	r25
    11a0:	96 95       	lsr	r25
    11a2:	96 95       	lsr	r25
    11a4:	90 ff       	sbrs	r25, 0
    11a6:	0a c0       	rjmp	.+20     	; 0x11bc <_ZN10AF_Stepper7onestepEhh+0x60>
	currentstep += MICROSTEPS/2;
      } else {
	currentstep -= MICROSTEPS/2;
      }
    } else {           // go to the next odd step
      if (dir == FORWARD) {
    11a8:	61 30       	cpi	r22, 0x01	; 1
    11aa:	11 f4       	brne	.+4      	; 0x11b0 <_ZN10AF_Stepper7onestepEhh+0x54>
	currentstep += MICROSTEPS;
    11ac:	80 5f       	subi	r24, 0xF0	; 240
    11ae:	01 c0       	rjmp	.+2      	; 0x11b2 <_ZN10AF_Stepper7onestepEhh+0x56>
      } else {
	currentstep -= MICROSTEPS;
    11b0:	80 51       	subi	r24, 0x10	; 16
    11b2:	8b 87       	std	Y+11, r24	; 0x0b
    11b4:	51 c0       	rjmp	.+162    	; 0x1258 <_ZN10AF_Stepper7onestepEhh+0xfc>
      }
    }
  } else if (style == INTERLEAVE) {
    11b6:	43 30       	cpi	r20, 0x03	; 3
    11b8:	39 f4       	brne	.+14     	; 0x11c8 <_ZN10AF_Stepper7onestepEhh+0x6c>
    11ba:	8b 85       	ldd	r24, Y+11	; 0x0b
    if (dir == FORWARD) {
    11bc:	61 30       	cpi	r22, 0x01	; 1
    11be:	11 f4       	brne	.+4      	; 0x11c4 <_ZN10AF_Stepper7onestepEhh+0x68>
       currentstep += MICROSTEPS/2;
    11c0:	88 5f       	subi	r24, 0xF8	; 248
    11c2:	f7 cf       	rjmp	.-18     	; 0x11b2 <_ZN10AF_Stepper7onestepEhh+0x56>
    } else {
       currentstep -= MICROSTEPS/2;
    11c4:	88 50       	subi	r24, 0x08	; 8
    11c6:	f5 cf       	rjmp	.-22     	; 0x11b2 <_ZN10AF_Stepper7onestepEhh+0x56>
    }
  } 

  if (style == MICROSTEP) {
    11c8:	44 30       	cpi	r20, 0x04	; 4
    11ca:	09 f0       	breq	.+2      	; 0x11ce <_ZN10AF_Stepper7onestepEhh+0x72>
    11cc:	45 c0       	rjmp	.+138    	; 0x1258 <_ZN10AF_Stepper7onestepEhh+0xfc>
    11ce:	8b 85       	ldd	r24, Y+11	; 0x0b
    if (dir == FORWARD) {
    11d0:	61 30       	cpi	r22, 0x01	; 1
    11d2:	11 f4       	brne	.+4      	; 0x11d8 <_ZN10AF_Stepper7onestepEhh+0x7c>
      currentstep++;
    11d4:	8f 5f       	subi	r24, 0xFF	; 255
    11d6:	01 c0       	rjmp	.+2      	; 0x11da <_ZN10AF_Stepper7onestepEhh+0x7e>
    } else {
      // BACKWARDS
      currentstep--;
    11d8:	81 50       	subi	r24, 0x01	; 1
    11da:	8b 87       	std	Y+11, r24	; 0x0b
    }

    currentstep += MICROSTEPS*4;
    currentstep %= MICROSTEPS*4;
    11dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    11de:	9f 73       	andi	r25, 0x3F	; 63
    11e0:	9b 87       	std	Y+11, r25	; 0x0b

    ocra = ocrb = 0;
    if ( (currentstep >= 0) && (currentstep < MICROSTEPS)) {
    11e2:	90 31       	cpi	r25, 0x10	; 16
    11e4:	50 f4       	brcc	.+20     	; 0x11fa <_ZN10AF_Stepper7onestepEhh+0x9e>
      ocra = microstepcurve[MICROSTEPS - currentstep];
    11e6:	89 2f       	mov	r24, r25
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	a1 e1       	ldi	r26, 0x11	; 17
    11ec:	b1 e0       	ldi	r27, 0x01	; 1
    11ee:	a8 1b       	sub	r26, r24
    11f0:	b9 0b       	sbc	r27, r25
    11f2:	3c 91       	ld	r19, X
      ocrb = microstepcurve[currentstep];
    11f4:	8f 5f       	subi	r24, 0xFF	; 255
    11f6:	9e 4f       	sbci	r25, 0xFE	; 254
    11f8:	1a c0       	rjmp	.+52     	; 0x122e <_ZN10AF_Stepper7onestepEhh+0xd2>
    } else if  ( (currentstep >= MICROSTEPS) && (currentstep < MICROSTEPS*2)) {
    11fa:	89 2f       	mov	r24, r25
    11fc:	80 51       	subi	r24, 0x10	; 16
    11fe:	80 31       	cpi	r24, 0x10	; 16
    1200:	48 f4       	brcc	.+18     	; 0x1214 <_ZN10AF_Stepper7onestepEhh+0xb8>
      ocra = microstepcurve[currentstep - MICROSTEPS];
    1202:	89 2f       	mov	r24, r25
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	dc 01       	movw	r26, r24
    1208:	af 50       	subi	r26, 0x0F	; 15
    120a:	bf 4f       	sbci	r27, 0xFF	; 255
    120c:	3c 91       	ld	r19, X
      ocrb = microstepcurve[MICROSTEPS*2 - currentstep];
    120e:	a1 e2       	ldi	r26, 0x21	; 33
    1210:	b1 e0       	ldi	r27, 0x01	; 1
    1212:	1e c0       	rjmp	.+60     	; 0x1250 <_ZN10AF_Stepper7onestepEhh+0xf4>
    } else if  ( (currentstep >= MICROSTEPS*2) && (currentstep < MICROSTEPS*3)) {
    1214:	89 2f       	mov	r24, r25
    1216:	80 52       	subi	r24, 0x20	; 32
    1218:	80 31       	cpi	r24, 0x10	; 16
    121a:	58 f4       	brcc	.+22     	; 0x1232 <_ZN10AF_Stepper7onestepEhh+0xd6>
      ocra = microstepcurve[MICROSTEPS*3 - currentstep];
    121c:	89 2f       	mov	r24, r25
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	a1 e3       	ldi	r26, 0x31	; 49
    1222:	b1 e0       	ldi	r27, 0x01	; 1
    1224:	a8 1b       	sub	r26, r24
    1226:	b9 0b       	sbc	r27, r25
    1228:	3c 91       	ld	r19, X
      ocrb = microstepcurve[currentstep - MICROSTEPS*2];
    122a:	8f 51       	subi	r24, 0x1F	; 31
    122c:	9f 4f       	sbci	r25, 0xFF	; 255
    122e:	dc 01       	movw	r26, r24
    1230:	11 c0       	rjmp	.+34     	; 0x1254 <_ZN10AF_Stepper7onestepEhh+0xf8>
    } else if  ( (currentstep >= MICROSTEPS*3) && (currentstep < MICROSTEPS*4)) {
    1232:	89 2f       	mov	r24, r25
    1234:	80 53       	subi	r24, 0x30	; 48
    1236:	80 31       	cpi	r24, 0x10	; 16
    1238:	18 f0       	brcs	.+6      	; 0x1240 <_ZN10AF_Stepper7onestepEhh+0xe4>
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	20 e0       	ldi	r18, 0x00	; 0
    123e:	0e c0       	rjmp	.+28     	; 0x125c <_ZN10AF_Stepper7onestepEhh+0x100>
      ocra = microstepcurve[currentstep - MICROSTEPS*3];
    1240:	89 2f       	mov	r24, r25
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	dc 01       	movw	r26, r24
    1246:	af 52       	subi	r26, 0x2F	; 47
    1248:	bf 4f       	sbci	r27, 0xFF	; 255
    124a:	3c 91       	ld	r19, X
      ocrb = microstepcurve[MICROSTEPS*4 - currentstep];
    124c:	a1 e4       	ldi	r26, 0x41	; 65
    124e:	b1 e0       	ldi	r27, 0x01	; 1
    1250:	a8 1b       	sub	r26, r24
    1252:	b9 0b       	sbc	r27, r25
    1254:	2c 91       	ld	r18, X
    1256:	02 c0       	rjmp	.+4      	; 0x125c <_ZN10AF_Stepper7onestepEhh+0x100>
    1258:	3f ef       	ldi	r19, 0xFF	; 255
    125a:	2f ef       	ldi	r18, 0xFF	; 255
    }
  }

  currentstep += MICROSTEPS*4;
  currentstep %= MICROSTEPS*4;
    125c:	9b 85       	ldd	r25, Y+11	; 0x0b
    125e:	9f 73       	andi	r25, 0x3F	; 63
    1260:	9b 87       	std	Y+11, r25	; 0x0b
  Serial.print("current step: "); Serial.println(currentstep, DEC);
  Serial.print(" pwmA = "); Serial.print(ocra, DEC); 
  Serial.print(" pwmB = "); Serial.println(ocrb, DEC); 
#endif

  if (steppernum == 1) {
    1262:	8a 81       	ldd	r24, Y+2	; 0x02
    1264:	81 30       	cpi	r24, 0x01	; 1
    1266:	29 f4       	brne	.+10     	; 0x1272 <_ZN10AF_Stepper7onestepEhh+0x116>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    OCR2A = s;
    1268:	30 93 b3 00 	sts	0x00B3, r19
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    OCR2B = s;
    126c:	20 93 b4 00 	sts	0x00B4, r18
    1270:	04 c0       	rjmp	.+8      	; 0x127a <_ZN10AF_Stepper7onestepEhh+0x11e>
#endif

  if (steppernum == 1) {
    setPWM1(ocra);
    setPWM2(ocrb);
  } else if (steppernum == 2) {
    1272:	82 30       	cpi	r24, 0x02	; 2
    1274:	11 f4       	brne	.+4      	; 0x127a <_ZN10AF_Stepper7onestepEhh+0x11e>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A on PB3 (Arduino pin #6)
    OCR0A = s;
    1276:	37 bd       	out	0x27, r19	; 39
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A on PB3 (Arduino pin #6)
    OCR0B = s;
    1278:	28 bd       	out	0x28, r18	; 40
    setPWM4(ocrb);
  }


  // release all
  latch_state &= ~a & ~b & ~c & ~d; // all motor pins to 0
    127a:	2f 2f       	mov	r18, r31
    127c:	2e 2b       	or	r18, r30
    127e:	35 2f       	mov	r19, r21
    1280:	37 2b       	or	r19, r23
    1282:	83 2f       	mov	r24, r19
    1284:	82 2b       	or	r24, r18
    1286:	80 95       	com	r24
    1288:	60 91 be 02 	lds	r22, 0x02BE
    128c:	86 23       	and	r24, r22
    128e:	80 93 be 02 	sts	0x02BE, r24

  //Serial.println(step, DEC);
  if (style == MICROSTEP) {
    1292:	44 30       	cpi	r20, 0x04	; 4
    1294:	19 f5       	brne	.+70     	; 0x12dc <_ZN10AF_Stepper7onestepEhh+0x180>
    if ((currentstep >= 0) && (currentstep < MICROSTEPS))
    1296:	90 31       	cpi	r25, 0x10	; 16
    1298:	18 f4       	brcc	.+6      	; 0x12a0 <_ZN10AF_Stepper7onestepEhh+0x144>
      latch_state |= a | b;
    129a:	82 2b       	or	r24, r18
    129c:	80 93 be 02 	sts	0x02BE, r24
    if ((currentstep >= MICROSTEPS) && (currentstep < MICROSTEPS*2))
    12a0:	89 2f       	mov	r24, r25
    12a2:	80 51       	subi	r24, 0x10	; 16
    12a4:	80 31       	cpi	r24, 0x10	; 16
    12a6:	30 f4       	brcc	.+12     	; 0x12b4 <_ZN10AF_Stepper7onestepEhh+0x158>
      latch_state |= b | c;
    12a8:	f7 2b       	or	r31, r23
    12aa:	20 91 be 02 	lds	r18, 0x02BE
    12ae:	2f 2b       	or	r18, r31
    12b0:	20 93 be 02 	sts	0x02BE, r18
    if ((currentstep >= MICROSTEPS*2) && (currentstep < MICROSTEPS*3))
    12b4:	89 2f       	mov	r24, r25
    12b6:	80 52       	subi	r24, 0x20	; 32
    12b8:	80 31       	cpi	r24, 0x10	; 16
    12ba:	30 f4       	brcc	.+12     	; 0x12c8 <_ZN10AF_Stepper7onestepEhh+0x16c>
      latch_state |= c | d;
    12bc:	75 2b       	or	r23, r21
    12be:	20 91 be 02 	lds	r18, 0x02BE
    12c2:	27 2b       	or	r18, r23
    12c4:	20 93 be 02 	sts	0x02BE, r18
    if ((currentstep >= MICROSTEPS*3) && (currentstep < MICROSTEPS*4))
    12c8:	90 53       	subi	r25, 0x30	; 48
    12ca:	90 31       	cpi	r25, 0x10	; 16
    12cc:	90 f5       	brcc	.+100    	; 0x1332 <_ZN10AF_Stepper7onestepEhh+0x1d6>
      latch_state |= d | a;
    12ce:	5e 2b       	or	r21, r30
    12d0:	90 91 be 02 	lds	r25, 0x02BE
    12d4:	95 2b       	or	r25, r21
    12d6:	90 93 be 02 	sts	0x02BE, r25
    12da:	2b c0       	rjmp	.+86     	; 0x1332 <_ZN10AF_Stepper7onestepEhh+0x1d6>
  } else {
    switch (currentstep/(MICROSTEPS/2)) {
    12dc:	96 95       	lsr	r25
    12de:	96 95       	lsr	r25
    12e0:	96 95       	lsr	r25
    12e2:	94 30       	cpi	r25, 0x04	; 4
    12e4:	e1 f0       	breq	.+56     	; 0x131e <_ZN10AF_Stepper7onestepEhh+0x1c2>
    12e6:	95 30       	cpi	r25, 0x05	; 5
    12e8:	38 f4       	brcc	.+14     	; 0x12f8 <_ZN10AF_Stepper7onestepEhh+0x19c>
    12ea:	92 30       	cpi	r25, 0x02	; 2
    12ec:	89 f0       	breq	.+34     	; 0x1310 <_ZN10AF_Stepper7onestepEhh+0x1b4>
    12ee:	93 30       	cpi	r25, 0x03	; 3
    12f0:	88 f4       	brcc	.+34     	; 0x1314 <_ZN10AF_Stepper7onestepEhh+0x1b8>
    12f2:	91 30       	cpi	r25, 0x01	; 1
    12f4:	39 f4       	brne	.+14     	; 0x1304 <_ZN10AF_Stepper7onestepEhh+0x1a8>
    12f6:	08 c0       	rjmp	.+16     	; 0x1308 <_ZN10AF_Stepper7onestepEhh+0x1ac>
    12f8:	96 30       	cpi	r25, 0x06	; 6
    12fa:	a9 f0       	breq	.+42     	; 0x1326 <_ZN10AF_Stepper7onestepEhh+0x1ca>
    12fc:	96 30       	cpi	r25, 0x06	; 6
    12fe:	88 f0       	brcs	.+34     	; 0x1322 <_ZN10AF_Stepper7onestepEhh+0x1c6>
    1300:	97 30       	cpi	r25, 0x07	; 7
    1302:	99 f0       	breq	.+38     	; 0x132a <_ZN10AF_Stepper7onestepEhh+0x1ce>
    case 0:
      latch_state |= a; // energize coil 1 only
    1304:	8e 2b       	or	r24, r30
    1306:	01 c0       	rjmp	.+2      	; 0x130a <_ZN10AF_Stepper7onestepEhh+0x1ae>
      break;
    case 1:
      latch_state |= a | b; // energize coil 1+2
    1308:	82 2b       	or	r24, r18
    130a:	80 93 be 02 	sts	0x02BE, r24
      break;
    130e:	11 c0       	rjmp	.+34     	; 0x1332 <_ZN10AF_Stepper7onestepEhh+0x1d6>
    case 2:
      latch_state |= b; // energize coil 2 only
    1310:	8f 2b       	or	r24, r31
    1312:	fb cf       	rjmp	.-10     	; 0x130a <_ZN10AF_Stepper7onestepEhh+0x1ae>
      break;
    case 3:
      latch_state |= b | c; // energize coil 2+3
    1314:	7f 2b       	or	r23, r31
    1316:	78 2b       	or	r23, r24
    1318:	70 93 be 02 	sts	0x02BE, r23
      break;
    131c:	0a c0       	rjmp	.+20     	; 0x1332 <_ZN10AF_Stepper7onestepEhh+0x1d6>
    case 4:
      latch_state |= c; // energize coil 3 only
    131e:	87 2b       	or	r24, r23
    1320:	f4 cf       	rjmp	.-24     	; 0x130a <_ZN10AF_Stepper7onestepEhh+0x1ae>
      break; 
    case 5:
      latch_state |= c | d; // energize coil 3+4
    1322:	83 2b       	or	r24, r19
    1324:	f2 cf       	rjmp	.-28     	; 0x130a <_ZN10AF_Stepper7onestepEhh+0x1ae>
      break;
    case 6:
      latch_state |= d; // energize coil 4 only
    1326:	85 2b       	or	r24, r21
    1328:	f0 cf       	rjmp	.-32     	; 0x130a <_ZN10AF_Stepper7onestepEhh+0x1ae>
      break;
    case 7:
      latch_state |= d | a; // energize coil 1+4
    132a:	5e 2b       	or	r21, r30
    132c:	58 2b       	or	r21, r24
    132e:	50 93 be 02 	sts	0x02BE, r21
      break;
    }
  }

 
  MC.latch_tx();
    1332:	8d eb       	ldi	r24, 0xBD	; 189
    1334:	92 e0       	ldi	r25, 0x02	; 2
    1336:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <_ZN17AFMotorController8latch_txEv>
  return currentstep;
    133a:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    133c:	df 91       	pop	r29
    133e:	cf 91       	pop	r28
    1340:	08 95       	ret

00001342 <_ZN10AF_Stepper4stepEjhh>:
      ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // all motor pins to 0
    MC.latch_tx();
  }
}

void AF_Stepper::step(uint16_t steps, uint8_t dir,  uint8_t style) {
    1342:	5f 92       	push	r5
    1344:	6f 92       	push	r6
    1346:	7f 92       	push	r7
    1348:	8f 92       	push	r8
    134a:	9f 92       	push	r9
    134c:	af 92       	push	r10
    134e:	bf 92       	push	r11
    1350:	cf 92       	push	r12
    1352:	df 92       	push	r13
    1354:	ef 92       	push	r14
    1356:	ff 92       	push	r15
    1358:	0f 93       	push	r16
    135a:	1f 93       	push	r17
    135c:	cf 93       	push	r28
    135e:	df 93       	push	r29
    1360:	ec 01       	movw	r28, r24
    1362:	6b 01       	movw	r12, r22
    1364:	54 2e       	mov	r5, r20
    1366:	b2 2e       	mov	r11, r18
  uint32_t uspers = usperstep;
    1368:	eb 80       	ldd	r14, Y+3	; 0x03
    136a:	fc 80       	ldd	r15, Y+4	; 0x04
    136c:	0d 81       	ldd	r16, Y+5	; 0x05
    136e:	1e 81       	ldd	r17, Y+6	; 0x06
  uint8_t ret = 0;

  if (style == INTERLEAVE) {
    1370:	23 e0       	ldi	r18, 0x03	; 3
    1372:	b2 16       	cp	r11, r18
    1374:	e1 f4       	brne	.+56     	; 0x13ae <_ZN10AF_Stepper4stepEjhh+0x6c>
    uspers /= 2;
    1376:	16 95       	lsr	r17
    1378:	07 95       	ror	r16
    137a:	f7 94       	ror	r15
    137c:	e7 94       	ror	r14
#endif
  }

  while (steps--) {
    ret = onestep(dir, style);
    delay(uspers/1000); // in ms
    137e:	c8 01       	movw	r24, r16
    1380:	b7 01       	movw	r22, r14
    1382:	28 ee       	ldi	r18, 0xE8	; 232
    1384:	33 e0       	ldi	r19, 0x03	; 3
    1386:	40 e0       	ldi	r20, 0x00	; 0
    1388:	50 e0       	ldi	r21, 0x00	; 0
    138a:	0e 94 3d 21 	call	0x427a	; 0x427a <__udivmodsi4>
    138e:	72 2e       	mov	r7, r18
    1390:	83 2e       	mov	r8, r19
    1392:	94 2e       	mov	r9, r20
    1394:	a5 2e       	mov	r10, r21
    steppingcounter += (uspers % 1000);
    1396:	c8 01       	movw	r24, r16
    1398:	b7 01       	movw	r22, r14
    139a:	28 ee       	ldi	r18, 0xE8	; 232
    139c:	33 e0       	ldi	r19, 0x03	; 3
    139e:	40 e0       	ldi	r20, 0x00	; 0
    13a0:	50 e0       	ldi	r21, 0x00	; 0
    13a2:	0e 94 3d 21 	call	0x427a	; 0x427a <__udivmodsi4>
    13a6:	7b 01       	movw	r14, r22
    13a8:	8c 01       	movw	r16, r24
    13aa:	66 24       	eor	r6, r6
    13ac:	45 c0       	rjmp	.+138    	; 0x1438 <_ZN10AF_Stepper4stepEjhh+0xf6>
  uint8_t ret = 0;

  if (style == INTERLEAVE) {
    uspers /= 2;
  }
 else if (style == MICROSTEP) {
    13ae:	84 e0       	ldi	r24, 0x04	; 4
    13b0:	b8 16       	cp	r11, r24
    13b2:	29 f7       	brne	.-54     	; 0x137e <_ZN10AF_Stepper4stepEjhh+0x3c>
    uspers /= MICROSTEPS;
    13b4:	94 e0       	ldi	r25, 0x04	; 4
    13b6:	16 95       	lsr	r17
    13b8:	07 95       	ror	r16
    13ba:	f7 94       	ror	r15
    13bc:	e7 94       	ror	r14
    13be:	9a 95       	dec	r25
    13c0:	d1 f7       	brne	.-12     	; 0x13b6 <_ZN10AF_Stepper4stepEjhh+0x74>
    steps *= MICROSTEPS;
    13c2:	84 e0       	ldi	r24, 0x04	; 4
    13c4:	cc 0c       	add	r12, r12
    13c6:	dd 1c       	adc	r13, r13
    13c8:	8a 95       	dec	r24
    13ca:	e1 f7       	brne	.-8      	; 0x13c4 <_ZN10AF_Stepper4stepEjhh+0x82>
    13cc:	d8 cf       	rjmp	.-80     	; 0x137e <_ZN10AF_Stepper4stepEjhh+0x3c>
    Serial.print("steps = "); Serial.println(steps, DEC);
#endif
  }

  while (steps--) {
    ret = onestep(dir, style);
    13ce:	ce 01       	movw	r24, r28
    13d0:	65 2d       	mov	r22, r5
    13d2:	4b 2d       	mov	r20, r11
    13d4:	0e 94 ae 08 	call	0x115c	; 0x115c <_ZN10AF_Stepper7onestepEhh>
    13d8:	68 2e       	mov	r6, r24
    delay(uspers/1000); // in ms
    13da:	67 2d       	mov	r22, r7
    13dc:	78 2d       	mov	r23, r8
    13de:	89 2d       	mov	r24, r9
    13e0:	9a 2d       	mov	r25, r10
    13e2:	0e 94 52 05 	call	0xaa4	; 0xaa4 <delay>
    steppingcounter += (uspers % 1000);
    13e6:	8f 81       	ldd	r24, Y+7	; 0x07
    13e8:	98 85       	ldd	r25, Y+8	; 0x08
    13ea:	a9 85       	ldd	r26, Y+9	; 0x09
    13ec:	ba 85       	ldd	r27, Y+10	; 0x0a
    13ee:	8e 0d       	add	r24, r14
    13f0:	9f 1d       	adc	r25, r15
    13f2:	a0 1f       	adc	r26, r16
    13f4:	b1 1f       	adc	r27, r17
    13f6:	8f 83       	std	Y+7, r24	; 0x07
    13f8:	98 87       	std	Y+8, r25	; 0x08
    13fa:	a9 87       	std	Y+9, r26	; 0x09
    13fc:	ba 87       	std	Y+10, r27	; 0x0a
    if (steppingcounter >= 1000) {
    13fe:	88 3e       	cpi	r24, 0xE8	; 232
    1400:	23 e0       	ldi	r18, 0x03	; 3
    1402:	92 07       	cpc	r25, r18
    1404:	20 e0       	ldi	r18, 0x00	; 0
    1406:	a2 07       	cpc	r26, r18
    1408:	20 e0       	ldi	r18, 0x00	; 0
    140a:	b2 07       	cpc	r27, r18
    140c:	90 f0       	brcs	.+36     	; 0x1432 <_ZN10AF_Stepper4stepEjhh+0xf0>
      delay(1);
    140e:	61 e0       	ldi	r22, 0x01	; 1
    1410:	70 e0       	ldi	r23, 0x00	; 0
    1412:	80 e0       	ldi	r24, 0x00	; 0
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	0e 94 52 05 	call	0xaa4	; 0xaa4 <delay>
      steppingcounter -= 1000;
    141a:	8f 81       	ldd	r24, Y+7	; 0x07
    141c:	98 85       	ldd	r25, Y+8	; 0x08
    141e:	a9 85       	ldd	r26, Y+9	; 0x09
    1420:	ba 85       	ldd	r27, Y+10	; 0x0a
    1422:	88 5e       	subi	r24, 0xE8	; 232
    1424:	93 40       	sbci	r25, 0x03	; 3
    1426:	a0 40       	sbci	r26, 0x00	; 0
    1428:	b0 40       	sbci	r27, 0x00	; 0
    142a:	8f 83       	std	Y+7, r24	; 0x07
    142c:	98 87       	std	Y+8, r25	; 0x08
    142e:	a9 87       	std	Y+9, r26	; 0x09
    1430:	ba 87       	std	Y+10, r27	; 0x0a
    1432:	08 94       	sec
    1434:	c1 08       	sbc	r12, r1
    1436:	d1 08       	sbc	r13, r1
#ifdef MOTORDEBUG
    Serial.print("steps = "); Serial.println(steps, DEC);
#endif
  }

  while (steps--) {
    1438:	c1 14       	cp	r12, r1
    143a:	d1 04       	cpc	r13, r1
    143c:	41 f6       	brne	.-112    	; 0x13ce <_ZN10AF_Stepper4stepEjhh+0x8c>
    if (steppingcounter >= 1000) {
      delay(1);
      steppingcounter -= 1000;
    }
  }
  if (style == MICROSTEP) {
    143e:	84 e0       	ldi	r24, 0x04	; 4
    1440:	b8 16       	cp	r11, r24
    1442:	c9 f5       	brne	.+114    	; 0x14b6 <_ZN10AF_Stepper4stepEjhh+0x174>
    1444:	12 c0       	rjmp	.+36     	; 0x146a <_ZN10AF_Stepper4stepEjhh+0x128>
    while ((ret != 0) && (ret != MICROSTEPS)) {
      ret = onestep(dir, style);
      delay(uspers/1000); // in ms
      steppingcounter += (uspers % 1000);
      if (steppingcounter >= 1000) {
	delay(1);
    1446:	61 e0       	ldi	r22, 0x01	; 1
    1448:	70 e0       	ldi	r23, 0x00	; 0
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	0e 94 52 05 	call	0xaa4	; 0xaa4 <delay>
	steppingcounter -= 1000;
    1452:	8f 81       	ldd	r24, Y+7	; 0x07
    1454:	98 85       	ldd	r25, Y+8	; 0x08
    1456:	a9 85       	ldd	r26, Y+9	; 0x09
    1458:	ba 85       	ldd	r27, Y+10	; 0x0a
    145a:	88 5e       	subi	r24, 0xE8	; 232
    145c:	93 40       	sbci	r25, 0x03	; 3
    145e:	a0 40       	sbci	r26, 0x00	; 0
    1460:	b0 40       	sbci	r27, 0x00	; 0
    1462:	8f 83       	std	Y+7, r24	; 0x07
    1464:	98 87       	std	Y+8, r25	; 0x08
    1466:	a9 87       	std	Y+9, r26	; 0x09
    1468:	ba 87       	std	Y+10, r27	; 0x0a
      delay(1);
      steppingcounter -= 1000;
    }
  }
  if (style == MICROSTEP) {
    while ((ret != 0) && (ret != MICROSTEPS)) {
    146a:	66 20       	and	r6, r6
    146c:	21 f1       	breq	.+72     	; 0x14b6 <_ZN10AF_Stepper4stepEjhh+0x174>
    146e:	20 e1       	ldi	r18, 0x10	; 16
    1470:	62 16       	cp	r6, r18
    1472:	09 f1       	breq	.+66     	; 0x14b6 <_ZN10AF_Stepper4stepEjhh+0x174>
      ret = onestep(dir, style);
    1474:	ce 01       	movw	r24, r28
    1476:	65 2d       	mov	r22, r5
    1478:	44 e0       	ldi	r20, 0x04	; 4
    147a:	0e 94 ae 08 	call	0x115c	; 0x115c <_ZN10AF_Stepper7onestepEhh>
    147e:	68 2e       	mov	r6, r24
      delay(uspers/1000); // in ms
    1480:	67 2d       	mov	r22, r7
    1482:	78 2d       	mov	r23, r8
    1484:	89 2d       	mov	r24, r9
    1486:	9a 2d       	mov	r25, r10
    1488:	0e 94 52 05 	call	0xaa4	; 0xaa4 <delay>
      steppingcounter += (uspers % 1000);
    148c:	8f 81       	ldd	r24, Y+7	; 0x07
    148e:	98 85       	ldd	r25, Y+8	; 0x08
    1490:	a9 85       	ldd	r26, Y+9	; 0x09
    1492:	ba 85       	ldd	r27, Y+10	; 0x0a
    1494:	8e 0d       	add	r24, r14
    1496:	9f 1d       	adc	r25, r15
    1498:	a0 1f       	adc	r26, r16
    149a:	b1 1f       	adc	r27, r17
    149c:	8f 83       	std	Y+7, r24	; 0x07
    149e:	98 87       	std	Y+8, r25	; 0x08
    14a0:	a9 87       	std	Y+9, r26	; 0x09
    14a2:	ba 87       	std	Y+10, r27	; 0x0a
      if (steppingcounter >= 1000) {
    14a4:	88 3e       	cpi	r24, 0xE8	; 232
    14a6:	23 e0       	ldi	r18, 0x03	; 3
    14a8:	92 07       	cpc	r25, r18
    14aa:	20 e0       	ldi	r18, 0x00	; 0
    14ac:	a2 07       	cpc	r26, r18
    14ae:	20 e0       	ldi	r18, 0x00	; 0
    14b0:	b2 07       	cpc	r27, r18
    14b2:	d8 f2       	brcs	.-74     	; 0x146a <_ZN10AF_Stepper4stepEjhh+0x128>
    14b4:	c8 cf       	rjmp	.-112    	; 0x1446 <_ZN10AF_Stepper4stepEjhh+0x104>
	delay(1);
	steppingcounter -= 1000;
      } 
    }
  }
}
    14b6:	df 91       	pop	r29
    14b8:	cf 91       	pop	r28
    14ba:	1f 91       	pop	r17
    14bc:	0f 91       	pop	r16
    14be:	ff 90       	pop	r15
    14c0:	ef 90       	pop	r14
    14c2:	df 90       	pop	r13
    14c4:	cf 90       	pop	r12
    14c6:	bf 90       	pop	r11
    14c8:	af 90       	pop	r10
    14ca:	9f 90       	pop	r9
    14cc:	8f 90       	pop	r8
    14ce:	7f 90       	pop	r7
    14d0:	6f 90       	pop	r6
    14d2:	5f 90       	pop	r5
    14d4:	08 95       	ret

000014d6 <_ZN10AF_Stepper7releaseEv>:
  //usperstep = 60000000 / ((uint32_t)revsteps * (uint32_t)rpm);
  steppingcounter = 0;
}

void AF_Stepper::release(void) {
  if (steppernum == 1) {
    14d6:	fc 01       	movw	r30, r24
    14d8:	82 81       	ldd	r24, Z+2	; 0x02
    14da:	81 30       	cpi	r24, 0x01	; 1
    14dc:	51 f4       	brne	.+20     	; 0x14f2 <_ZN10AF_Stepper7releaseEv+0x1c>
    latch_state &= ~_BV(MOTOR1_A) & ~_BV(MOTOR1_B) &
      ~_BV(MOTOR2_A) & ~_BV(MOTOR2_B); // all motor pins to 0
    14de:	80 91 be 02 	lds	r24, 0x02BE
    14e2:	81 7e       	andi	r24, 0xE1	; 225
    14e4:	80 93 be 02 	sts	0x02BE, r24
    MC.latch_tx();
    14e8:	8d eb       	ldi	r24, 0xBD	; 189
    14ea:	92 e0       	ldi	r25, 0x02	; 2
    14ec:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <_ZN17AFMotorController8latch_txEv>
    14f0:	08 95       	ret
  } else if (steppernum == 2) {
    14f2:	82 30       	cpi	r24, 0x02	; 2
    14f4:	49 f4       	brne	.+18     	; 0x1508 <_ZN10AF_Stepper7releaseEv+0x32>
    latch_state &= ~_BV(MOTOR3_A) & ~_BV(MOTOR3_B) &
      ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // all motor pins to 0
    14f6:	80 91 be 02 	lds	r24, 0x02BE
    14fa:	8e 71       	andi	r24, 0x1E	; 30
    14fc:	80 93 be 02 	sts	0x02BE, r24
    MC.latch_tx();
    1500:	8d eb       	ldi	r24, 0xBD	; 189
    1502:	92 e0       	ldi	r25, 0x02	; 2
    1504:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <_ZN17AFMotorController8latch_txEv>
    1508:	08 95       	ret

0000150a <_ZN10AF_DCMotor3runEh>:
  }
}

void AF_DCMotor::run(uint8_t cmd) {
  uint8_t a, b;
  switch (motornum) {
    150a:	fc 01       	movw	r30, r24
    150c:	80 81       	ld	r24, Z
    150e:	82 30       	cpi	r24, 0x02	; 2
    1510:	61 f0       	breq	.+24     	; 0x152a <_ZN10AF_DCMotor3runEh+0x20>
    1512:	83 30       	cpi	r24, 0x03	; 3
    1514:	20 f4       	brcc	.+8      	; 0x151e <_ZN10AF_DCMotor3runEh+0x14>
    1516:	81 30       	cpi	r24, 0x01	; 1
    1518:	09 f0       	breq	.+2      	; 0x151c <_ZN10AF_DCMotor3runEh+0x12>
    151a:	64 c0       	rjmp	.+200    	; 0x15e4 <_ZN10AF_DCMotor3runEh+0xda>
    151c:	09 c0       	rjmp	.+18     	; 0x1530 <_ZN10AF_DCMotor3runEh+0x26>
    151e:	83 30       	cpi	r24, 0x03	; 3
    1520:	51 f0       	breq	.+20     	; 0x1536 <_ZN10AF_DCMotor3runEh+0x2c>
    1522:	84 30       	cpi	r24, 0x04	; 4
    1524:	09 f0       	breq	.+2      	; 0x1528 <_ZN10AF_DCMotor3runEh+0x1e>
    1526:	5e c0       	rjmp	.+188    	; 0x15e4 <_ZN10AF_DCMotor3runEh+0xda>
    1528:	09 c0       	rjmp	.+18     	; 0x153c <_ZN10AF_DCMotor3runEh+0x32>
    152a:	84 e0       	ldi	r24, 0x04	; 4
    152c:	91 e0       	ldi	r25, 0x01	; 1
    152e:	08 c0       	rjmp	.+16     	; 0x1540 <_ZN10AF_DCMotor3runEh+0x36>
    1530:	83 e0       	ldi	r24, 0x03	; 3
    1532:	92 e0       	ldi	r25, 0x02	; 2
    1534:	05 c0       	rjmp	.+10     	; 0x1540 <_ZN10AF_DCMotor3runEh+0x36>
    1536:	87 e0       	ldi	r24, 0x07	; 7
    1538:	95 e0       	ldi	r25, 0x05	; 5
  case 1:
    a = MOTOR1_A; b = MOTOR1_B; break;
  case 2:
    a = MOTOR2_A; b = MOTOR2_B; break;
  case 3:
    a = MOTOR3_A; b = MOTOR3_B; break;
    153a:	02 c0       	rjmp	.+4      	; 0x1540 <_ZN10AF_DCMotor3runEh+0x36>
    153c:	86 e0       	ldi	r24, 0x06	; 6
    153e:	90 e0       	ldi	r25, 0x00	; 0
    a = MOTOR4_A; b = MOTOR4_B; break;
  default:
    return;
  }
  
  switch (cmd) {
    1540:	62 30       	cpi	r22, 0x02	; 2
    1542:	e1 f0       	breq	.+56     	; 0x157c <_ZN10AF_DCMotor3runEh+0x72>
    1544:	64 30       	cpi	r22, 0x04	; 4
    1546:	a1 f1       	breq	.+104    	; 0x15b0 <_ZN10AF_DCMotor3runEh+0xa6>
    1548:	61 30       	cpi	r22, 0x01	; 1
    154a:	09 f0       	breq	.+2      	; 0x154e <_ZN10AF_DCMotor3runEh+0x44>
    154c:	4b c0       	rjmp	.+150    	; 0x15e4 <_ZN10AF_DCMotor3runEh+0xda>
  case FORWARD:
    latch_state |= _BV(a);
    latch_state &= ~_BV(b); 
    154e:	21 e0       	ldi	r18, 0x01	; 1
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	a9 01       	movw	r20, r18
    1554:	02 c0       	rjmp	.+4      	; 0x155a <_ZN10AF_DCMotor3runEh+0x50>
    1556:	44 0f       	add	r20, r20
    1558:	55 1f       	adc	r21, r21
    155a:	8a 95       	dec	r24
    155c:	e2 f7       	brpl	.-8      	; 0x1556 <_ZN10AF_DCMotor3runEh+0x4c>
    155e:	84 2f       	mov	r24, r20
    1560:	80 95       	com	r24
    1562:	a9 01       	movw	r20, r18
    1564:	02 c0       	rjmp	.+4      	; 0x156a <_ZN10AF_DCMotor3runEh+0x60>
    1566:	44 0f       	add	r20, r20
    1568:	55 1f       	adc	r21, r21
    156a:	9a 95       	dec	r25
    156c:	e2 f7       	brpl	.-8      	; 0x1566 <_ZN10AF_DCMotor3runEh+0x5c>
    156e:	20 91 be 02 	lds	r18, 0x02BE
    1572:	24 2b       	or	r18, r20
    1574:	82 23       	and	r24, r18
    1576:	80 93 be 02 	sts	0x02BE, r24
    157a:	15 c0       	rjmp	.+42     	; 0x15a6 <_ZN10AF_DCMotor3runEh+0x9c>
    MC.latch_tx();
    break;
  case BACKWARD:
    latch_state &= ~_BV(a);
    latch_state |= _BV(b); 
    157c:	21 e0       	ldi	r18, 0x01	; 1
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	a9 01       	movw	r20, r18
    1582:	02 c0       	rjmp	.+4      	; 0x1588 <_ZN10AF_DCMotor3runEh+0x7e>
    1584:	44 0f       	add	r20, r20
    1586:	55 1f       	adc	r21, r21
    1588:	9a 95       	dec	r25
    158a:	e2 f7       	brpl	.-8      	; 0x1584 <_ZN10AF_DCMotor3runEh+0x7a>
    158c:	94 2f       	mov	r25, r20
    158e:	90 95       	com	r25
    1590:	40 91 be 02 	lds	r20, 0x02BE
    1594:	94 23       	and	r25, r20
    1596:	02 c0       	rjmp	.+4      	; 0x159c <_ZN10AF_DCMotor3runEh+0x92>
    1598:	22 0f       	add	r18, r18
    159a:	33 1f       	adc	r19, r19
    159c:	8a 95       	dec	r24
    159e:	e2 f7       	brpl	.-8      	; 0x1598 <_ZN10AF_DCMotor3runEh+0x8e>
    15a0:	92 2b       	or	r25, r18
    15a2:	90 93 be 02 	sts	0x02BE, r25
    MC.latch_tx();
    15a6:	8d eb       	ldi	r24, 0xBD	; 189
    15a8:	92 e0       	ldi	r25, 0x02	; 2
    15aa:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <_ZN17AFMotorController8latch_txEv>
    break;
    15ae:	08 95       	ret
  case RELEASE:
    latch_state &= ~_BV(a);
    latch_state &= ~_BV(b); 
    15b0:	21 e0       	ldi	r18, 0x01	; 1
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	a9 01       	movw	r20, r18
    15b6:	02 c0       	rjmp	.+4      	; 0x15bc <_ZN10AF_DCMotor3runEh+0xb2>
    15b8:	44 0f       	add	r20, r20
    15ba:	55 1f       	adc	r21, r21
    15bc:	9a 95       	dec	r25
    15be:	e2 f7       	brpl	.-8      	; 0x15b8 <_ZN10AF_DCMotor3runEh+0xae>
    15c0:	b9 01       	movw	r22, r18
    15c2:	02 c0       	rjmp	.+4      	; 0x15c8 <_ZN10AF_DCMotor3runEh+0xbe>
    15c4:	66 0f       	add	r22, r22
    15c6:	77 1f       	adc	r23, r23
    15c8:	8a 95       	dec	r24
    15ca:	e2 f7       	brpl	.-8      	; 0x15c4 <_ZN10AF_DCMotor3runEh+0xba>
    15cc:	cb 01       	movw	r24, r22
    15ce:	84 2b       	or	r24, r20
    15d0:	80 95       	com	r24
    15d2:	20 91 be 02 	lds	r18, 0x02BE
    15d6:	28 23       	and	r18, r24
    15d8:	20 93 be 02 	sts	0x02BE, r18
    MC.latch_tx();
    15dc:	8d eb       	ldi	r24, 0xBD	; 189
    15de:	92 e0       	ldi	r25, 0x02	; 2
    15e0:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <_ZN17AFMotorController8latch_txEv>
    15e4:	08 95       	ret

000015e6 <_ZN17AFMotorController6enableEv>:
#endif

AFMotorController::AFMotorController(void) {
}

void AFMotorController::enable(void) {
    15e6:	cf 93       	push	r28
    15e8:	df 93       	push	r29
    15ea:	ec 01       	movw	r28, r24
	// setup the latch
	pinMode(MOTORLATCH, OUTPUT);
    15ec:	8c e0       	ldi	r24, 0x0C	; 12
    15ee:	61 e0       	ldi	r22, 0x01	; 1
    15f0:	0e 94 42 06 	call	0xc84	; 0xc84 <pinMode>
	pinMode(MOTORENABLE, OUTPUT);
    15f4:	87 e0       	ldi	r24, 0x07	; 7
    15f6:	61 e0       	ldi	r22, 0x01	; 1
    15f8:	0e 94 42 06 	call	0xc84	; 0xc84 <pinMode>
	pinMode(MOTORDATA, OUTPUT);
    15fc:	88 e0       	ldi	r24, 0x08	; 8
    15fe:	61 e0       	ldi	r22, 0x01	; 1
    1600:	0e 94 42 06 	call	0xc84	; 0xc84 <pinMode>
	pinMode(MOTORCLK, OUTPUT);
    1604:	84 e0       	ldi	r24, 0x04	; 4
    1606:	61 e0       	ldi	r22, 0x01	; 1
    1608:	0e 94 42 06 	call	0xc84	; 0xc84 <pinMode>

	latch_state = 0;
    160c:	10 92 be 02 	sts	0x02BE, r1

	latch_tx();  // "reset"
    1610:	ce 01       	movw	r24, r28
    1612:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <_ZN17AFMotorController8latch_txEv>

	// enable the chip outputs!
	digitalWrite(MOTORENABLE, LOW);
    1616:	87 e0       	ldi	r24, 0x07	; 7
    1618:	60 e0       	ldi	r22, 0x00	; 0
    161a:	0e 94 94 06 	call	0xd28	; 0xd28 <digitalWrite>
}
    161e:	df 91       	pop	r29
    1620:	cf 91       	pop	r28
    1622:	08 95       	ret

00001624 <_ZN10AF_DCMotorC1Ehh>:
#else
   #error "This chip is not supported!"
#endif
}

AF_DCMotor::AF_DCMotor(uint8_t num, uint8_t freq) {
    1624:	1f 93       	push	r17
    1626:	df 93       	push	r29
    1628:	cf 93       	push	r28
    162a:	0f 92       	push	r0
    162c:	cd b7       	in	r28, 0x3d	; 61
    162e:	de b7       	in	r29, 0x3e	; 62
    1630:	fc 01       	movw	r30, r24
    1632:	14 2f       	mov	r17, r20
  motornum = num;
    1634:	60 83       	st	Z, r22
  pwmfreq = freq;
    1636:	41 83       	std	Z+1, r20	; 0x01

  MC.enable();
    1638:	8d eb       	ldi	r24, 0xBD	; 189
    163a:	92 e0       	ldi	r25, 0x02	; 2
    163c:	69 83       	std	Y+1, r22	; 0x01
    163e:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <_ZN17AFMotorController6enableEv>

  switch (num) {
    1642:	69 81       	ldd	r22, Y+1	; 0x01
    1644:	62 30       	cpi	r22, 0x02	; 2
    1646:	b9 f0       	breq	.+46     	; 0x1676 <_ZN10AF_DCMotorC1Ehh+0x52>
    1648:	63 30       	cpi	r22, 0x03	; 3
    164a:	18 f4       	brcc	.+6      	; 0x1652 <_ZN10AF_DCMotorC1Ehh+0x2e>
    164c:	61 30       	cpi	r22, 0x01	; 1
    164e:	c9 f5       	brne	.+114    	; 0x16c2 <_ZN10AF_DCMotorC1Ehh+0x9e>
    1650:	05 c0       	rjmp	.+10     	; 0x165c <_ZN10AF_DCMotorC1Ehh+0x38>
    1652:	63 30       	cpi	r22, 0x03	; 3
    1654:	e9 f0       	breq	.+58     	; 0x1690 <_ZN10AF_DCMotorC1Ehh+0x6c>
    1656:	64 30       	cpi	r22, 0x04	; 4
    1658:	a1 f5       	brne	.+104    	; 0x16c2 <_ZN10AF_DCMotorC1Ehh+0x9e>
    165a:	27 c0       	rjmp	.+78     	; 0x16aa <_ZN10AF_DCMotorC1Ehh+0x86>
  case 1:
    latch_state &= ~_BV(MOTOR1_A) & ~_BV(MOTOR1_B); // set both motor pins to 0
    165c:	80 91 be 02 	lds	r24, 0x02BE
    1660:	83 7f       	andi	r24, 0xF3	; 243
    1662:	80 93 be 02 	sts	0x02BE, r24
    MC.latch_tx();
    1666:	8d eb       	ldi	r24, 0xBD	; 189
    1668:	92 e0       	ldi	r25, 0x02	; 2
    166a:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <_ZN17AFMotorController8latch_txEv>
    initPWM1(freq);
    166e:	81 2f       	mov	r24, r17
    1670:	0e 94 4c 08 	call	0x1098	; 0x1098 <_Z8initPWM1h>
    break;
    1674:	26 c0       	rjmp	.+76     	; 0x16c2 <_ZN10AF_DCMotorC1Ehh+0x9e>
  case 2:
    latch_state &= ~_BV(MOTOR2_A) & ~_BV(MOTOR2_B); // set both motor pins to 0
    1676:	80 91 be 02 	lds	r24, 0x02BE
    167a:	8d 7e       	andi	r24, 0xED	; 237
    167c:	80 93 be 02 	sts	0x02BE, r24
    MC.latch_tx();
    1680:	8d eb       	ldi	r24, 0xBD	; 189
    1682:	92 e0       	ldi	r25, 0x02	; 2
    1684:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <_ZN17AFMotorController8latch_txEv>
    initPWM2(freq);
    1688:	81 2f       	mov	r24, r17
    168a:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <_Z8initPWM2h>
    break;
    168e:	19 c0       	rjmp	.+50     	; 0x16c2 <_ZN10AF_DCMotorC1Ehh+0x9e>
  case 3:
    latch_state &= ~_BV(MOTOR3_A) & ~_BV(MOTOR3_B); // set both motor pins to 0
    1690:	80 91 be 02 	lds	r24, 0x02BE
    1694:	8f 75       	andi	r24, 0x5F	; 95
    1696:	80 93 be 02 	sts	0x02BE, r24
    MC.latch_tx();
    169a:	8d eb       	ldi	r24, 0xBD	; 189
    169c:	92 e0       	ldi	r25, 0x02	; 2
    169e:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <_ZN17AFMotorController8latch_txEv>
    initPWM3(freq);
    16a2:	81 2f       	mov	r24, r17
    16a4:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <_Z8initPWM3h>
    break;
    16a8:	0c c0       	rjmp	.+24     	; 0x16c2 <_ZN10AF_DCMotorC1Ehh+0x9e>
  case 4:
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    16aa:	80 91 be 02 	lds	r24, 0x02BE
    16ae:	8e 7b       	andi	r24, 0xBE	; 190
    16b0:	80 93 be 02 	sts	0x02BE, r24
    MC.latch_tx();
    16b4:	8d eb       	ldi	r24, 0xBD	; 189
    16b6:	92 e0       	ldi	r25, 0x02	; 2
    16b8:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <_ZN17AFMotorController8latch_txEv>
    initPWM4(freq);
    16bc:	81 2f       	mov	r24, r17
    16be:	0e 94 73 08 	call	0x10e6	; 0x10e6 <_Z8initPWM4h>
    break;
  }
}
    16c2:	0f 90       	pop	r0
    16c4:	cf 91       	pop	r28
    16c6:	df 91       	pop	r29
    16c8:	1f 91       	pop	r17
    16ca:	08 95       	ret

000016cc <_ZN10AF_DCMotorC2Ehh>:
#else
   #error "This chip is not supported!"
#endif
}

AF_DCMotor::AF_DCMotor(uint8_t num, uint8_t freq) {
    16cc:	1f 93       	push	r17
    16ce:	df 93       	push	r29
    16d0:	cf 93       	push	r28
    16d2:	0f 92       	push	r0
    16d4:	cd b7       	in	r28, 0x3d	; 61
    16d6:	de b7       	in	r29, 0x3e	; 62
    16d8:	fc 01       	movw	r30, r24
    16da:	14 2f       	mov	r17, r20
  motornum = num;
    16dc:	60 83       	st	Z, r22
  pwmfreq = freq;
    16de:	41 83       	std	Z+1, r20	; 0x01

  MC.enable();
    16e0:	8d eb       	ldi	r24, 0xBD	; 189
    16e2:	92 e0       	ldi	r25, 0x02	; 2
    16e4:	69 83       	std	Y+1, r22	; 0x01
    16e6:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <_ZN17AFMotorController6enableEv>

  switch (num) {
    16ea:	69 81       	ldd	r22, Y+1	; 0x01
    16ec:	62 30       	cpi	r22, 0x02	; 2
    16ee:	b9 f0       	breq	.+46     	; 0x171e <_ZN10AF_DCMotorC2Ehh+0x52>
    16f0:	63 30       	cpi	r22, 0x03	; 3
    16f2:	18 f4       	brcc	.+6      	; 0x16fa <_ZN10AF_DCMotorC2Ehh+0x2e>
    16f4:	61 30       	cpi	r22, 0x01	; 1
    16f6:	c9 f5       	brne	.+114    	; 0x176a <_ZN10AF_DCMotorC2Ehh+0x9e>
    16f8:	05 c0       	rjmp	.+10     	; 0x1704 <_ZN10AF_DCMotorC2Ehh+0x38>
    16fa:	63 30       	cpi	r22, 0x03	; 3
    16fc:	e9 f0       	breq	.+58     	; 0x1738 <_ZN10AF_DCMotorC2Ehh+0x6c>
    16fe:	64 30       	cpi	r22, 0x04	; 4
    1700:	a1 f5       	brne	.+104    	; 0x176a <_ZN10AF_DCMotorC2Ehh+0x9e>
    1702:	27 c0       	rjmp	.+78     	; 0x1752 <_ZN10AF_DCMotorC2Ehh+0x86>
  case 1:
    latch_state &= ~_BV(MOTOR1_A) & ~_BV(MOTOR1_B); // set both motor pins to 0
    1704:	80 91 be 02 	lds	r24, 0x02BE
    1708:	83 7f       	andi	r24, 0xF3	; 243
    170a:	80 93 be 02 	sts	0x02BE, r24
    MC.latch_tx();
    170e:	8d eb       	ldi	r24, 0xBD	; 189
    1710:	92 e0       	ldi	r25, 0x02	; 2
    1712:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <_ZN17AFMotorController8latch_txEv>
    initPWM1(freq);
    1716:	81 2f       	mov	r24, r17
    1718:	0e 94 4c 08 	call	0x1098	; 0x1098 <_Z8initPWM1h>
    break;
    171c:	26 c0       	rjmp	.+76     	; 0x176a <_ZN10AF_DCMotorC2Ehh+0x9e>
  case 2:
    latch_state &= ~_BV(MOTOR2_A) & ~_BV(MOTOR2_B); // set both motor pins to 0
    171e:	80 91 be 02 	lds	r24, 0x02BE
    1722:	8d 7e       	andi	r24, 0xED	; 237
    1724:	80 93 be 02 	sts	0x02BE, r24
    MC.latch_tx();
    1728:	8d eb       	ldi	r24, 0xBD	; 189
    172a:	92 e0       	ldi	r25, 0x02	; 2
    172c:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <_ZN17AFMotorController8latch_txEv>
    initPWM2(freq);
    1730:	81 2f       	mov	r24, r17
    1732:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <_Z8initPWM2h>
    break;
    1736:	19 c0       	rjmp	.+50     	; 0x176a <_ZN10AF_DCMotorC2Ehh+0x9e>
  case 3:
    latch_state &= ~_BV(MOTOR3_A) & ~_BV(MOTOR3_B); // set both motor pins to 0
    1738:	80 91 be 02 	lds	r24, 0x02BE
    173c:	8f 75       	andi	r24, 0x5F	; 95
    173e:	80 93 be 02 	sts	0x02BE, r24
    MC.latch_tx();
    1742:	8d eb       	ldi	r24, 0xBD	; 189
    1744:	92 e0       	ldi	r25, 0x02	; 2
    1746:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <_ZN17AFMotorController8latch_txEv>
    initPWM3(freq);
    174a:	81 2f       	mov	r24, r17
    174c:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <_Z8initPWM3h>
    break;
    1750:	0c c0       	rjmp	.+24     	; 0x176a <_ZN10AF_DCMotorC2Ehh+0x9e>
  case 4:
    latch_state &= ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B); // set both motor pins to 0
    1752:	80 91 be 02 	lds	r24, 0x02BE
    1756:	8e 7b       	andi	r24, 0xBE	; 190
    1758:	80 93 be 02 	sts	0x02BE, r24
    MC.latch_tx();
    175c:	8d eb       	ldi	r24, 0xBD	; 189
    175e:	92 e0       	ldi	r25, 0x02	; 2
    1760:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <_ZN17AFMotorController8latch_txEv>
    initPWM4(freq);
    1764:	81 2f       	mov	r24, r17
    1766:	0e 94 73 08 	call	0x10e6	; 0x10e6 <_Z8initPWM4h>
    break;
  }
}
    176a:	0f 90       	pop	r0
    176c:	cf 91       	pop	r28
    176e:	df 91       	pop	r29
    1770:	1f 91       	pop	r17
    1772:	08 95       	ret

00001774 <_ZN10AF_StepperC1Ejh>:

/******************************************
               STEPPERS
******************************************/

AF_Stepper::AF_Stepper(uint16_t steps, uint8_t num) {
    1774:	ef 92       	push	r14
    1776:	ff 92       	push	r15
    1778:	0f 93       	push	r16
    177a:	1f 93       	push	r17
    177c:	df 93       	push	r29
    177e:	cf 93       	push	r28
    1780:	0f 92       	push	r0
    1782:	cd b7       	in	r28, 0x3d	; 61
    1784:	de b7       	in	r29, 0x3e	; 62
    1786:	7c 01       	movw	r14, r24
    1788:	8b 01       	movw	r16, r22
  MC.enable();
    178a:	8d eb       	ldi	r24, 0xBD	; 189
    178c:	92 e0       	ldi	r25, 0x02	; 2
    178e:	49 83       	std	Y+1, r20	; 0x01
    1790:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <_ZN17AFMotorController6enableEv>

  revsteps = steps;
    1794:	f7 01       	movw	r30, r14
    1796:	11 83       	std	Z+1, r17	; 0x01
    1798:	00 83       	st	Z, r16
  steppernum = num;
    179a:	49 81       	ldd	r20, Y+1	; 0x01
    179c:	42 83       	std	Z+2, r20	; 0x02
  currentstep = 0;
    179e:	13 86       	std	Z+11, r1	; 0x0b

  if (steppernum == 1) {
    17a0:	41 30       	cpi	r20, 0x01	; 1
    17a2:	29 f5       	brne	.+74     	; 0x17ee <_ZN10AF_StepperC1Ejh+0x7a>
    // all motor pins to 0
	latch_state &= ~_BV(MOTOR1_A) & ~_BV(MOTOR1_B) & ~_BV(MOTOR2_A) & ~_BV(MOTOR2_B);
    17a4:	80 91 be 02 	lds	r24, 0x02BE
    17a8:	81 7e       	andi	r24, 0xE1	; 225
    17aa:	80 93 be 02 	sts	0x02BE, r24
    MC.latch_tx();
    17ae:	8d eb       	ldi	r24, 0xBD	; 189
    17b0:	92 e0       	ldi	r25, 0x02	; 2
    17b2:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <_ZN17AFMotorController8latch_txEv>
    
    // enable both H bridges
    pinMode(11, OUTPUT);
    17b6:	8b e0       	ldi	r24, 0x0B	; 11
    17b8:	61 e0       	ldi	r22, 0x01	; 1
    17ba:	0e 94 42 06 	call	0xc84	; 0xc84 <pinMode>
    pinMode(3, OUTPUT);
    17be:	83 e0       	ldi	r24, 0x03	; 3
    17c0:	61 e0       	ldi	r22, 0x01	; 1
    17c2:	0e 94 42 06 	call	0xc84	; 0xc84 <pinMode>
    digitalWrite(11, HIGH);
    17c6:	8b e0       	ldi	r24, 0x0B	; 11
    17c8:	61 e0       	ldi	r22, 0x01	; 1
    17ca:	0e 94 94 06 	call	0xd28	; 0xd28 <digitalWrite>
    digitalWrite(3, HIGH);
    17ce:	83 e0       	ldi	r24, 0x03	; 3
    17d0:	61 e0       	ldi	r22, 0x01	; 1
    17d2:	0e 94 94 06 	call	0xd28	; 0xd28 <digitalWrite>

    // use PWM for microstepping support
    initPWM1(MOTOR12_64KHZ);
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	0e 94 4c 08 	call	0x1098	; 0x1098 <_Z8initPWM1h>
    initPWM2(MOTOR12_64KHZ);
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <_Z8initPWM2h>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    OCR2A = s;
    17e2:	8f ef       	ldi	r24, 0xFF	; 255
    17e4:	80 93 b3 00 	sts	0x00B3, r24
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    OCR2B = s;
    17e8:	80 93 b4 00 	sts	0x00B4, r24
    17ec:	24 c0       	rjmp	.+72     	; 0x1836 <_ZN10AF_StepperC1Ejh+0xc2>
    initPWM1(MOTOR12_64KHZ);
    initPWM2(MOTOR12_64KHZ);
    setPWM1(255);
    setPWM2(255);

  } else if (steppernum == 2) {
    17ee:	42 30       	cpi	r20, 0x02	; 2
    17f0:	11 f5       	brne	.+68     	; 0x1836 <_ZN10AF_StepperC1Ejh+0xc2>
    // all motor pins to 0
	latch_state &= ~_BV(MOTOR3_A) & ~_BV(MOTOR3_B) & ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B);
    17f2:	80 91 be 02 	lds	r24, 0x02BE
    17f6:	8e 71       	andi	r24, 0x1E	; 30
    17f8:	80 93 be 02 	sts	0x02BE, r24
    MC.latch_tx();
    17fc:	8d eb       	ldi	r24, 0xBD	; 189
    17fe:	92 e0       	ldi	r25, 0x02	; 2
    1800:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <_ZN17AFMotorController8latch_txEv>

    // enable both H bridges
    pinMode(5, OUTPUT);
    1804:	85 e0       	ldi	r24, 0x05	; 5
    1806:	61 e0       	ldi	r22, 0x01	; 1
    1808:	0e 94 42 06 	call	0xc84	; 0xc84 <pinMode>
    pinMode(6, OUTPUT);
    180c:	86 e0       	ldi	r24, 0x06	; 6
    180e:	61 e0       	ldi	r22, 0x01	; 1
    1810:	0e 94 42 06 	call	0xc84	; 0xc84 <pinMode>
    digitalWrite(5, HIGH);
    1814:	85 e0       	ldi	r24, 0x05	; 5
    1816:	61 e0       	ldi	r22, 0x01	; 1
    1818:	0e 94 94 06 	call	0xd28	; 0xd28 <digitalWrite>
    digitalWrite(6, HIGH);
    181c:	86 e0       	ldi	r24, 0x06	; 6
    181e:	61 e0       	ldi	r22, 0x01	; 1
    1820:	0e 94 94 06 	call	0xd28	; 0xd28 <digitalWrite>

    // use PWM for microstepping support
    // use PWM for microstepping support
    initPWM3(1);
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <_Z8initPWM3h>
    initPWM4(1);
    182a:	81 e0       	ldi	r24, 0x01	; 1
    182c:	0e 94 73 08 	call	0x10e6	; 0x10e6 <_Z8initPWM4h>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A on PB3 (Arduino pin #6)
    OCR0A = s;
    1830:	8f ef       	ldi	r24, 0xFF	; 255
    1832:	87 bd       	out	0x27, r24	; 39
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A on PB3 (Arduino pin #6)
    OCR0B = s;
    1834:	88 bd       	out	0x28, r24	; 40
    initPWM3(1);
    initPWM4(1);
    setPWM3(255);
    setPWM4(255);
  }
}
    1836:	0f 90       	pop	r0
    1838:	cf 91       	pop	r28
    183a:	df 91       	pop	r29
    183c:	1f 91       	pop	r17
    183e:	0f 91       	pop	r16
    1840:	ff 90       	pop	r15
    1842:	ef 90       	pop	r14
    1844:	08 95       	ret

00001846 <_ZN10AF_StepperC2Ejh>:

/******************************************
               STEPPERS
******************************************/

AF_Stepper::AF_Stepper(uint16_t steps, uint8_t num) {
    1846:	ef 92       	push	r14
    1848:	ff 92       	push	r15
    184a:	0f 93       	push	r16
    184c:	1f 93       	push	r17
    184e:	df 93       	push	r29
    1850:	cf 93       	push	r28
    1852:	0f 92       	push	r0
    1854:	cd b7       	in	r28, 0x3d	; 61
    1856:	de b7       	in	r29, 0x3e	; 62
    1858:	7c 01       	movw	r14, r24
    185a:	8b 01       	movw	r16, r22
  MC.enable();
    185c:	8d eb       	ldi	r24, 0xBD	; 189
    185e:	92 e0       	ldi	r25, 0x02	; 2
    1860:	49 83       	std	Y+1, r20	; 0x01
    1862:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <_ZN17AFMotorController6enableEv>

  revsteps = steps;
    1866:	f7 01       	movw	r30, r14
    1868:	11 83       	std	Z+1, r17	; 0x01
    186a:	00 83       	st	Z, r16
  steppernum = num;
    186c:	49 81       	ldd	r20, Y+1	; 0x01
    186e:	42 83       	std	Z+2, r20	; 0x02
  currentstep = 0;
    1870:	13 86       	std	Z+11, r1	; 0x0b

  if (steppernum == 1) {
    1872:	41 30       	cpi	r20, 0x01	; 1
    1874:	29 f5       	brne	.+74     	; 0x18c0 <_ZN10AF_StepperC2Ejh+0x7a>
    // all motor pins to 0
	latch_state &= ~_BV(MOTOR1_A) & ~_BV(MOTOR1_B) & ~_BV(MOTOR2_A) & ~_BV(MOTOR2_B);
    1876:	80 91 be 02 	lds	r24, 0x02BE
    187a:	81 7e       	andi	r24, 0xE1	; 225
    187c:	80 93 be 02 	sts	0x02BE, r24
    MC.latch_tx();
    1880:	8d eb       	ldi	r24, 0xBD	; 189
    1882:	92 e0       	ldi	r25, 0x02	; 2
    1884:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <_ZN17AFMotorController8latch_txEv>
    
    // enable both H bridges
    pinMode(11, OUTPUT);
    1888:	8b e0       	ldi	r24, 0x0B	; 11
    188a:	61 e0       	ldi	r22, 0x01	; 1
    188c:	0e 94 42 06 	call	0xc84	; 0xc84 <pinMode>
    pinMode(3, OUTPUT);
    1890:	83 e0       	ldi	r24, 0x03	; 3
    1892:	61 e0       	ldi	r22, 0x01	; 1
    1894:	0e 94 42 06 	call	0xc84	; 0xc84 <pinMode>
    digitalWrite(11, HIGH);
    1898:	8b e0       	ldi	r24, 0x0B	; 11
    189a:	61 e0       	ldi	r22, 0x01	; 1
    189c:	0e 94 94 06 	call	0xd28	; 0xd28 <digitalWrite>
    digitalWrite(3, HIGH);
    18a0:	83 e0       	ldi	r24, 0x03	; 3
    18a2:	61 e0       	ldi	r22, 0x01	; 1
    18a4:	0e 94 94 06 	call	0xd28	; 0xd28 <digitalWrite>

    // use PWM for microstepping support
    initPWM1(MOTOR12_64KHZ);
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	0e 94 4c 08 	call	0x1098	; 0x1098 <_Z8initPWM1h>
    initPWM2(MOTOR12_64KHZ);
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <_Z8initPWM2h>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    OCR2A = s;
    18b4:	8f ef       	ldi	r24, 0xFF	; 255
    18b6:	80 93 b3 00 	sts	0x00B3, r24
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer2A on PB3 (Arduino pin #11)
    OCR2B = s;
    18ba:	80 93 b4 00 	sts	0x00B4, r24
    18be:	24 c0       	rjmp	.+72     	; 0x1908 <_ZN10AF_StepperC2Ejh+0xc2>
    initPWM1(MOTOR12_64KHZ);
    initPWM2(MOTOR12_64KHZ);
    setPWM1(255);
    setPWM2(255);

  } else if (steppernum == 2) {
    18c0:	42 30       	cpi	r20, 0x02	; 2
    18c2:	11 f5       	brne	.+68     	; 0x1908 <_ZN10AF_StepperC2Ejh+0xc2>
    // all motor pins to 0
	latch_state &= ~_BV(MOTOR3_A) & ~_BV(MOTOR3_B) & ~_BV(MOTOR4_A) & ~_BV(MOTOR4_B);
    18c4:	80 91 be 02 	lds	r24, 0x02BE
    18c8:	8e 71       	andi	r24, 0x1E	; 30
    18ca:	80 93 be 02 	sts	0x02BE, r24
    MC.latch_tx();
    18ce:	8d eb       	ldi	r24, 0xBD	; 189
    18d0:	92 e0       	ldi	r25, 0x02	; 2
    18d2:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <_ZN17AFMotorController8latch_txEv>

    // enable both H bridges
    pinMode(5, OUTPUT);
    18d6:	85 e0       	ldi	r24, 0x05	; 5
    18d8:	61 e0       	ldi	r22, 0x01	; 1
    18da:	0e 94 42 06 	call	0xc84	; 0xc84 <pinMode>
    pinMode(6, OUTPUT);
    18de:	86 e0       	ldi	r24, 0x06	; 6
    18e0:	61 e0       	ldi	r22, 0x01	; 1
    18e2:	0e 94 42 06 	call	0xc84	; 0xc84 <pinMode>
    digitalWrite(5, HIGH);
    18e6:	85 e0       	ldi	r24, 0x05	; 5
    18e8:	61 e0       	ldi	r22, 0x01	; 1
    18ea:	0e 94 94 06 	call	0xd28	; 0xd28 <digitalWrite>
    digitalWrite(6, HIGH);
    18ee:	86 e0       	ldi	r24, 0x06	; 6
    18f0:	61 e0       	ldi	r22, 0x01	; 1
    18f2:	0e 94 94 06 	call	0xd28	; 0xd28 <digitalWrite>

    // use PWM for microstepping support
    // use PWM for microstepping support
    initPWM3(1);
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <_Z8initPWM3h>
    initPWM4(1);
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	0e 94 73 08 	call	0x10e6	; 0x10e6 <_Z8initPWM4h>
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A on PB3 (Arduino pin #6)
    OCR0A = s;
    1902:	8f ef       	ldi	r24, 0xFF	; 255
    1904:	87 bd       	out	0x27, r24	; 39
    defined(__AVR_ATmega48__) || \
    defined(__AVR_ATmega88__) || \
    defined(__AVR_ATmega168__) || \
    defined(__AVR_ATmega328P__)
    // use PWM from timer0A on PB3 (Arduino pin #6)
    OCR0B = s;
    1906:	88 bd       	out	0x28, r24	; 40
    initPWM3(1);
    initPWM4(1);
    setPWM3(255);
    setPWM4(255);
  }
}
    1908:	0f 90       	pop	r0
    190a:	cf 91       	pop	r28
    190c:	df 91       	pop	r29
    190e:	1f 91       	pop	r17
    1910:	0f 91       	pop	r16
    1912:	ff 90       	pop	r15
    1914:	ef 90       	pop	r14
    1916:	08 95       	ret

00001918 <__cxa_pure_virtual>:
#include "cplusplushelper.h"

void __cxa_pure_virtual(void)
{

}
    1918:	08 95       	ret

0000191a <__cxa_guard_acquire>:

int __cxa_guard_acquire(__guard *g)
{
    191a:	20 e0       	ldi	r18, 0x00	; 0
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	fc 01       	movw	r30, r24
    1920:	80 81       	ld	r24, Z
    1922:	88 23       	and	r24, r24
    1924:	11 f4       	brne	.+4      	; 0x192a <__cxa_guard_acquire+0x10>
    1926:	21 e0       	ldi	r18, 0x01	; 1
    1928:	30 e0       	ldi	r19, 0x00	; 0
	return !*(char *)(g);
}
    192a:	c9 01       	movw	r24, r18
    192c:	08 95       	ret

0000192e <__cxa_guard_release>:
 
void __cxa_guard_release (__guard *g)
{
	*(char *)g = 1;
    192e:	21 e0       	ldi	r18, 0x01	; 1
    1930:	fc 01       	movw	r30, r24
    1932:	20 83       	st	Z, r18
}
    1934:	08 95       	ret

00001936 <__cxa_guard_abort>:
 
void __cxa_guard_abort (__guard *)
{

}
    1936:	08 95       	ret

00001938 <_ZdlPv>:
  return malloc(size); 
} 

void operator delete(void * ptr) 
{ 
  free(ptr); 
    1938:	0e 94 67 24 	call	0x48ce	; 0x48ce <free>
}
    193c:	08 95       	ret

0000193e <_Znwj>:

}

void* operator new(size_t size) 
{ 
  return malloc(size); 
    193e:	0e 94 c5 23 	call	0x478a	; 0x478a <malloc>
} 
    1942:	08 95       	ret

00001944 <_ZN11EEPROMClass5writeEih>:
{
	return eeprom_read_byte((unsigned char *) address);
}

void EEPROMClass::write(int address, uint8_t value)
{
    1944:	cb 01       	movw	r24, r22
	eeprom_write_byte((unsigned char *) address, value);
    1946:	64 2f       	mov	r22, r20
    1948:	0e 94 09 27 	call	0x4e12	; 0x4e12 <__eewr_byte_m328p>
}
    194c:	08 95       	ret

0000194e <_ZN11EEPROMClass4readEi>:
/******************************************************************************
 * User API
 ******************************************************************************/

uint8_t EEPROMClass::read(int address)
{
    194e:	cb 01       	movw	r24, r22
	return eeprom_read_byte((unsigned char *) address);
    1950:	0e 94 01 27 	call	0x4e02	; 0x4e02 <__eerd_byte_m328p>
}
    1954:	08 95       	ret

00001956 <__vector_18>:
  }
}

#if defined(USART_RX_vect)
  SIGNAL(USART_RX_vect)
  {
    1956:	1f 92       	push	r1
    1958:	0f 92       	push	r0
    195a:	0f b6       	in	r0, 0x3f	; 63
    195c:	0f 92       	push	r0
    195e:	11 24       	eor	r1, r1
    1960:	2f 93       	push	r18
    1962:	3f 93       	push	r19
    1964:	4f 93       	push	r20
    1966:	6f 93       	push	r22
    1968:	7f 93       	push	r23
    196a:	8f 93       	push	r24
    196c:	9f 93       	push	r25
    196e:	ef 93       	push	r30
    1970:	ff 93       	push	r31
  #if defined(UDR0)
    unsigned char c  =  UDR0;
    1972:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer rx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *rx_buffer)
{
  int i = (unsigned int)(rx_buffer->head + 1) % RX_BUFFER_SIZE;
    1976:	20 91 3f 03 	lds	r18, 0x033F
    197a:	30 91 40 03 	lds	r19, 0x0340
    197e:	c9 01       	movw	r24, r18
    1980:	01 96       	adiw	r24, 0x01	; 1
    1982:	8f 77       	andi	r24, 0x7F	; 127
    1984:	90 70       	andi	r25, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != rx_buffer->tail) {
    1986:	60 91 41 03 	lds	r22, 0x0341
    198a:	70 91 42 03 	lds	r23, 0x0342
    198e:	86 17       	cp	r24, r22
    1990:	97 07       	cpc	r25, r23
    1992:	41 f0       	breq	.+16     	; 0x19a4 <__vector_18+0x4e>
    rx_buffer->buffer[rx_buffer->head] = c;
    1994:	21 54       	subi	r18, 0x41	; 65
    1996:	3d 4f       	sbci	r19, 0xFD	; 253
    1998:	f9 01       	movw	r30, r18
    199a:	40 83       	st	Z, r20
    rx_buffer->head = i;
    199c:	90 93 40 03 	sts	0x0340, r25
    19a0:	80 93 3f 03 	sts	0x033F, r24
    unsigned char c  =  UDR;  //  atmega8535
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
  }
    19a4:	ff 91       	pop	r31
    19a6:	ef 91       	pop	r30
    19a8:	9f 91       	pop	r25
    19aa:	8f 91       	pop	r24
    19ac:	7f 91       	pop	r23
    19ae:	6f 91       	pop	r22
    19b0:	4f 91       	pop	r20
    19b2:	3f 91       	pop	r19
    19b4:	2f 91       	pop	r18
    19b6:	0f 90       	pop	r0
    19b8:	0f be       	out	0x3f, r0	; 63
    19ba:	0f 90       	pop	r0
    19bc:	1f 90       	pop	r1
    19be:	18 95       	reti

000019c0 <_ZN14HardwareSerialC2EP11ring_bufferPVhS3_S3_S3_S3_hhhhh>:



// Constructors ////////////////////////////////////////////////////////////////

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer,
    19c0:	8f 92       	push	r8
    19c2:	af 92       	push	r10
    19c4:	cf 92       	push	r12
    19c6:	df 92       	push	r13
    19c8:	ef 92       	push	r14
    19ca:	ff 92       	push	r15
    19cc:	0f 93       	push	r16
    19ce:	1f 93       	push	r17
    19d0:	df 93       	push	r29
    19d2:	cf 93       	push	r28
    19d4:	cd b7       	in	r28, 0x3d	; 61
    19d6:	de b7       	in	r29, 0x3e	; 62
    19d8:	fc 01       	movw	r30, r24
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udre, uint8_t u2x)
    19da:	86 e1       	ldi	r24, 0x16	; 22
    19dc:	91 e0       	ldi	r25, 0x01	; 1
    19de:	91 83       	std	Z+1, r25	; 0x01
    19e0:	80 83       	st	Z, r24
{
  _rx_buffer = rx_buffer;
    19e2:	73 83       	std	Z+3, r23	; 0x03
    19e4:	62 83       	std	Z+2, r22	; 0x02
  _ubrrh = ubrrh;
    19e6:	55 83       	std	Z+5, r21	; 0x05
    19e8:	44 83       	std	Z+4, r20	; 0x04
  _ubrrl = ubrrl;
    19ea:	37 83       	std	Z+7, r19	; 0x07
    19ec:	26 83       	std	Z+6, r18	; 0x06
  _ucsra = ucsra;
    19ee:	11 87       	std	Z+9, r17	; 0x09
    19f0:	00 87       	std	Z+8, r16	; 0x08
  _ucsrb = ucsrb;
    19f2:	f3 86       	std	Z+11, r15	; 0x0b
    19f4:	e2 86       	std	Z+10, r14	; 0x0a
  _udr = udr;
    19f6:	d5 86       	std	Z+13, r13	; 0x0d
    19f8:	c4 86       	std	Z+12, r12	; 0x0c
  _rxen = rxen;
    19fa:	a6 86       	std	Z+14, r10	; 0x0e
  _txen = txen;
    19fc:	87 86       	std	Z+15, r8	; 0x0f
  _rxcie = rxcie;
    19fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a00:	80 8b       	std	Z+16, r24	; 0x10
  _udre = udre;
    1a02:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a04:	81 8b       	std	Z+17, r24	; 0x11
  _u2x = u2x;
    1a06:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a08:	82 8b       	std	Z+18, r24	; 0x12
}
    1a0a:	cf 91       	pop	r28
    1a0c:	df 91       	pop	r29
    1a0e:	1f 91       	pop	r17
    1a10:	0f 91       	pop	r16
    1a12:	ff 90       	pop	r15
    1a14:	ef 90       	pop	r14
    1a16:	df 90       	pop	r13
    1a18:	cf 90       	pop	r12
    1a1a:	af 90       	pop	r10
    1a1c:	8f 90       	pop	r8
    1a1e:	08 95       	ret

00001a20 <_ZN14HardwareSerialC1EP11ring_bufferPVhS3_S3_S3_S3_hhhhh>:



// Constructors ////////////////////////////////////////////////////////////////

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer,
    1a20:	8f 92       	push	r8
    1a22:	af 92       	push	r10
    1a24:	cf 92       	push	r12
    1a26:	df 92       	push	r13
    1a28:	ef 92       	push	r14
    1a2a:	ff 92       	push	r15
    1a2c:	0f 93       	push	r16
    1a2e:	1f 93       	push	r17
    1a30:	df 93       	push	r29
    1a32:	cf 93       	push	r28
    1a34:	cd b7       	in	r28, 0x3d	; 61
    1a36:	de b7       	in	r29, 0x3e	; 62
    1a38:	fc 01       	movw	r30, r24
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udre, uint8_t u2x)
    1a3a:	86 e1       	ldi	r24, 0x16	; 22
    1a3c:	91 e0       	ldi	r25, 0x01	; 1
    1a3e:	91 83       	std	Z+1, r25	; 0x01
    1a40:	80 83       	st	Z, r24
{
  _rx_buffer = rx_buffer;
    1a42:	73 83       	std	Z+3, r23	; 0x03
    1a44:	62 83       	std	Z+2, r22	; 0x02
  _ubrrh = ubrrh;
    1a46:	55 83       	std	Z+5, r21	; 0x05
    1a48:	44 83       	std	Z+4, r20	; 0x04
  _ubrrl = ubrrl;
    1a4a:	37 83       	std	Z+7, r19	; 0x07
    1a4c:	26 83       	std	Z+6, r18	; 0x06
  _ucsra = ucsra;
    1a4e:	11 87       	std	Z+9, r17	; 0x09
    1a50:	00 87       	std	Z+8, r16	; 0x08
  _ucsrb = ucsrb;
    1a52:	f3 86       	std	Z+11, r15	; 0x0b
    1a54:	e2 86       	std	Z+10, r14	; 0x0a
  _udr = udr;
    1a56:	d5 86       	std	Z+13, r13	; 0x0d
    1a58:	c4 86       	std	Z+12, r12	; 0x0c
  _rxen = rxen;
    1a5a:	a6 86       	std	Z+14, r10	; 0x0e
  _txen = txen;
    1a5c:	87 86       	std	Z+15, r8	; 0x0f
  _rxcie = rxcie;
    1a5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a60:	80 8b       	std	Z+16, r24	; 0x10
  _udre = udre;
    1a62:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a64:	81 8b       	std	Z+17, r24	; 0x11
  _u2x = u2x;
    1a66:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a68:	82 8b       	std	Z+18, r24	; 0x12
}
    1a6a:	cf 91       	pop	r28
    1a6c:	df 91       	pop	r29
    1a6e:	1f 91       	pop	r17
    1a70:	0f 91       	pop	r16
    1a72:	ff 90       	pop	r15
    1a74:	ef 90       	pop	r14
    1a76:	df 90       	pop	r13
    1a78:	cf 90       	pop	r12
    1a7a:	af 90       	pop	r10
    1a7c:	8f 90       	pop	r8
    1a7e:	08 95       	ret

00001a80 <_ZN14HardwareSerial5beginEl>:

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(long baud)
{
    1a80:	cf 93       	push	r28
    1a82:	df 93       	push	r29
    1a84:	ec 01       	movw	r28, r24
    1a86:	9a 01       	movw	r18, r20
    1a88:	ab 01       	movw	r20, r22
    1a8a:	e8 85       	ldd	r30, Y+8	; 0x08
    1a8c:	f9 85       	ldd	r31, Y+9	; 0x09

#if F_CPU == 16000000UL
  // hardcoded exception for compatibility with the bootloader shipped
  // with the Duemilanove and previous boards and the firmware on the 8U2
  // on the Uno and Mega 2560.
  if (baud == 57600) {
    1a8e:	20 30       	cpi	r18, 0x00	; 0
    1a90:	81 ee       	ldi	r24, 0xE1	; 225
    1a92:	38 07       	cpc	r19, r24
    1a94:	80 e0       	ldi	r24, 0x00	; 0
    1a96:	48 07       	cpc	r20, r24
    1a98:	80 e0       	ldi	r24, 0x00	; 0
    1a9a:	58 07       	cpc	r21, r24
    1a9c:	09 f4       	brne	.+2      	; 0x1aa0 <_ZN14HardwareSerial5beginEl+0x20>
    1a9e:	45 c0       	rjmp	.+138    	; 0x1b2a <_ZN14HardwareSerial5beginEl+0xaa>
    use_u2x = false;
  }
#endif
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	0a 88       	ldd	r0, Y+18	; 0x12
    1aa6:	02 c0       	rjmp	.+4      	; 0x1aac <_ZN14HardwareSerial5beginEl+0x2c>
    1aa8:	88 0f       	add	r24, r24
    1aaa:	99 1f       	adc	r25, r25
    1aac:	0a 94       	dec	r0
    1aae:	e2 f7       	brpl	.-8      	; 0x1aa8 <_ZN14HardwareSerial5beginEl+0x28>
    1ab0:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1ab2:	60 e0       	ldi	r22, 0x00	; 0
    1ab4:	79 e0       	ldi	r23, 0x09	; 9
    1ab6:	8d e3       	ldi	r24, 0x3D	; 61
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	0e 94 3d 21 	call	0x427a	; 0x427a <__udivmodsi4>
    1abe:	21 50       	subi	r18, 0x01	; 1
    1ac0:	30 40       	sbci	r19, 0x00	; 0
    1ac2:	40 40       	sbci	r20, 0x00	; 0
    1ac4:	50 40       	sbci	r21, 0x00	; 0
    1ac6:	56 95       	lsr	r21
    1ac8:	47 95       	ror	r20
    1aca:	37 95       	ror	r19
    1acc:	27 95       	ror	r18
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1ace:	ec 81       	ldd	r30, Y+4	; 0x04
    1ad0:	fd 81       	ldd	r31, Y+5	; 0x05
    1ad2:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1ad4:	ee 81       	ldd	r30, Y+6	; 0x06
    1ad6:	ff 81       	ldd	r31, Y+7	; 0x07
    1ad8:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
    1ada:	ea 85       	ldd	r30, Y+10	; 0x0a
    1adc:	fb 85       	ldd	r31, Y+11	; 0x0b
    1ade:	80 81       	ld	r24, Z
    1ae0:	21 e0       	ldi	r18, 0x01	; 1
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	a9 01       	movw	r20, r18
    1ae6:	0e 84       	ldd	r0, Y+14	; 0x0e
    1ae8:	02 c0       	rjmp	.+4      	; 0x1aee <_ZN14HardwareSerial5beginEl+0x6e>
    1aea:	44 0f       	add	r20, r20
    1aec:	55 1f       	adc	r21, r21
    1aee:	0a 94       	dec	r0
    1af0:	e2 f7       	brpl	.-8      	; 0x1aea <_ZN14HardwareSerial5beginEl+0x6a>
    1af2:	84 2b       	or	r24, r20
    1af4:	80 83       	st	Z, r24
  sbi(*_ucsrb, _txen);
    1af6:	ea 85       	ldd	r30, Y+10	; 0x0a
    1af8:	fb 85       	ldd	r31, Y+11	; 0x0b
    1afa:	80 81       	ld	r24, Z
    1afc:	a9 01       	movw	r20, r18
    1afe:	0f 84       	ldd	r0, Y+15	; 0x0f
    1b00:	02 c0       	rjmp	.+4      	; 0x1b06 <_ZN14HardwareSerial5beginEl+0x86>
    1b02:	44 0f       	add	r20, r20
    1b04:	55 1f       	adc	r21, r21
    1b06:	0a 94       	dec	r0
    1b08:	e2 f7       	brpl	.-8      	; 0x1b02 <_ZN14HardwareSerial5beginEl+0x82>
    1b0a:	84 2b       	or	r24, r20
    1b0c:	80 83       	st	Z, r24
  sbi(*_ucsrb, _rxcie);
    1b0e:	ea 85       	ldd	r30, Y+10	; 0x0a
    1b10:	fb 85       	ldd	r31, Y+11	; 0x0b
    1b12:	80 81       	ld	r24, Z
    1b14:	08 88       	ldd	r0, Y+16	; 0x10
    1b16:	02 c0       	rjmp	.+4      	; 0x1b1c <_ZN14HardwareSerial5beginEl+0x9c>
    1b18:	22 0f       	add	r18, r18
    1b1a:	33 1f       	adc	r19, r19
    1b1c:	0a 94       	dec	r0
    1b1e:	e2 f7       	brpl	.-8      	; 0x1b18 <_ZN14HardwareSerial5beginEl+0x98>
    1b20:	82 2b       	or	r24, r18
    1b22:	80 83       	st	Z, r24
}
    1b24:	df 91       	pop	r29
    1b26:	cf 91       	pop	r28
    1b28:	08 95       	ret
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
  } else {
    *_ucsra = 0;
    1b2a:	10 82       	st	Z, r1
    1b2c:	20 e1       	ldi	r18, 0x10	; 16
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	ce cf       	rjmp	.-100    	; 0x1ace <_ZN14HardwareSerial5beginEl+0x4e>

00001b32 <_ZN14HardwareSerial3endEv>:
  sbi(*_ucsrb, _txen);
  sbi(*_ucsrb, _rxcie);
}

void HardwareSerial::end()
{
    1b32:	fc 01       	movw	r30, r24
  cbi(*_ucsrb, _rxen);
    1b34:	a2 85       	ldd	r26, Z+10	; 0x0a
    1b36:	b3 85       	ldd	r27, Z+11	; 0x0b
    1b38:	3c 91       	ld	r19, X
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	ac 01       	movw	r20, r24
    1b40:	06 84       	ldd	r0, Z+14	; 0x0e
    1b42:	02 c0       	rjmp	.+4      	; 0x1b48 <_ZN14HardwareSerial3endEv+0x16>
    1b44:	44 0f       	add	r20, r20
    1b46:	55 1f       	adc	r21, r21
    1b48:	0a 94       	dec	r0
    1b4a:	e2 f7       	brpl	.-8      	; 0x1b44 <_ZN14HardwareSerial3endEv+0x12>
    1b4c:	24 2f       	mov	r18, r20
    1b4e:	20 95       	com	r18
    1b50:	23 23       	and	r18, r19
    1b52:	2c 93       	st	X, r18
  cbi(*_ucsrb, _txen);
    1b54:	a2 85       	ldd	r26, Z+10	; 0x0a
    1b56:	b3 85       	ldd	r27, Z+11	; 0x0b
    1b58:	3c 91       	ld	r19, X
    1b5a:	ac 01       	movw	r20, r24
    1b5c:	07 84       	ldd	r0, Z+15	; 0x0f
    1b5e:	02 c0       	rjmp	.+4      	; 0x1b64 <_ZN14HardwareSerial3endEv+0x32>
    1b60:	44 0f       	add	r20, r20
    1b62:	55 1f       	adc	r21, r21
    1b64:	0a 94       	dec	r0
    1b66:	e2 f7       	brpl	.-8      	; 0x1b60 <_ZN14HardwareSerial3endEv+0x2e>
    1b68:	24 2f       	mov	r18, r20
    1b6a:	20 95       	com	r18
    1b6c:	23 23       	and	r18, r19
    1b6e:	2c 93       	st	X, r18
  cbi(*_ucsrb, _rxcie);  
    1b70:	a2 85       	ldd	r26, Z+10	; 0x0a
    1b72:	b3 85       	ldd	r27, Z+11	; 0x0b
    1b74:	2c 91       	ld	r18, X
    1b76:	00 88       	ldd	r0, Z+16	; 0x10
    1b78:	02 c0       	rjmp	.+4      	; 0x1b7e <_ZN14HardwareSerial3endEv+0x4c>
    1b7a:	88 0f       	add	r24, r24
    1b7c:	99 1f       	adc	r25, r25
    1b7e:	0a 94       	dec	r0
    1b80:	e2 f7       	brpl	.-8      	; 0x1b7a <_ZN14HardwareSerial3endEv+0x48>
    1b82:	80 95       	com	r24
    1b84:	82 23       	and	r24, r18
    1b86:	8c 93       	st	X, r24
}
    1b88:	08 95       	ret

00001b8a <_ZN14HardwareSerial9availableEv>:

int HardwareSerial::available(void)
{
  return (unsigned int)(RX_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % RX_BUFFER_SIZE;
    1b8a:	fc 01       	movw	r30, r24
    1b8c:	82 81       	ldd	r24, Z+2	; 0x02
    1b8e:	93 81       	ldd	r25, Z+3	; 0x03
    1b90:	fc 01       	movw	r30, r24
    1b92:	e0 58       	subi	r30, 0x80	; 128
    1b94:	ff 4f       	sbci	r31, 0xFF	; 255
    1b96:	20 81       	ld	r18, Z
    1b98:	31 81       	ldd	r19, Z+1	; 0x01
    1b9a:	8e 57       	subi	r24, 0x7E	; 126
    1b9c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b9e:	fc 01       	movw	r30, r24
    1ba0:	80 81       	ld	r24, Z
    1ba2:	91 81       	ldd	r25, Z+1	; 0x01
    1ba4:	28 1b       	sub	r18, r24
    1ba6:	39 0b       	sbc	r19, r25
    1ba8:	2f 77       	andi	r18, 0x7F	; 127
    1baa:	30 70       	andi	r19, 0x00	; 0
}
    1bac:	c9 01       	movw	r24, r18
    1bae:	08 95       	ret

00001bb0 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    1bb0:	fc 01       	movw	r30, r24
    1bb2:	82 81       	ldd	r24, Z+2	; 0x02
    1bb4:	93 81       	ldd	r25, Z+3	; 0x03
    1bb6:	fc 01       	movw	r30, r24
    1bb8:	ee 57       	subi	r30, 0x7E	; 126
    1bba:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbc:	20 81       	ld	r18, Z
    1bbe:	31 81       	ldd	r19, Z+1	; 0x01
    1bc0:	fc 01       	movw	r30, r24
    1bc2:	e0 58       	subi	r30, 0x80	; 128
    1bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc6:	40 81       	ld	r20, Z
    1bc8:	51 81       	ldd	r21, Z+1	; 0x01
    1bca:	42 17       	cp	r20, r18
    1bcc:	53 07       	cpc	r21, r19
    1bce:	19 f4       	brne	.+6      	; 0x1bd6 <_ZN14HardwareSerial4peekEv+0x26>
    1bd0:	2f ef       	ldi	r18, 0xFF	; 255
    1bd2:	3f ef       	ldi	r19, 0xFF	; 255
    1bd4:	05 c0       	rjmp	.+10     	; 0x1be0 <_ZN14HardwareSerial4peekEv+0x30>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    1bd6:	82 0f       	add	r24, r18
    1bd8:	93 1f       	adc	r25, r19
    1bda:	fc 01       	movw	r30, r24
    1bdc:	20 81       	ld	r18, Z
    1bde:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    1be0:	c9 01       	movw	r24, r18
    1be2:	08 95       	ret

00001be4 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    1be4:	dc 01       	movw	r26, r24
    1be6:	12 96       	adiw	r26, 0x02	; 2
    1be8:	2d 91       	ld	r18, X+
    1bea:	3c 91       	ld	r19, X
    1bec:	13 97       	sbiw	r26, 0x03	; 3
    1bee:	f9 01       	movw	r30, r18
    1bf0:	ee 57       	subi	r30, 0x7E	; 126
    1bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf4:	80 81       	ld	r24, Z
    1bf6:	91 81       	ldd	r25, Z+1	; 0x01
    1bf8:	d9 01       	movw	r26, r18
    1bfa:	a0 58       	subi	r26, 0x80	; 128
    1bfc:	bf 4f       	sbci	r27, 0xFF	; 255
    1bfe:	4d 91       	ld	r20, X+
    1c00:	5c 91       	ld	r21, X
    1c02:	11 97       	sbiw	r26, 0x01	; 1
    1c04:	48 17       	cp	r20, r24
    1c06:	59 07       	cpc	r21, r25
    1c08:	19 f4       	brne	.+6      	; 0x1c10 <_ZN14HardwareSerial4readEv+0x2c>
    1c0a:	2f ef       	ldi	r18, 0xFF	; 255
    1c0c:	3f ef       	ldi	r19, 0xFF	; 255
    1c0e:	0a c0       	rjmp	.+20     	; 0x1c24 <_ZN14HardwareSerial4readEv+0x40>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    1c10:	28 0f       	add	r18, r24
    1c12:	39 1f       	adc	r19, r25
    1c14:	d9 01       	movw	r26, r18
    1c16:	2c 91       	ld	r18, X
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % RX_BUFFER_SIZE;
    1c18:	01 96       	adiw	r24, 0x01	; 1
    1c1a:	8f 77       	andi	r24, 0x7F	; 127
    1c1c:	90 70       	andi	r25, 0x00	; 0
    1c1e:	91 83       	std	Z+1, r25	; 0x01
    1c20:	80 83       	st	Z, r24
    return c;
    1c22:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    1c24:	c9 01       	movw	r24, r18
    1c26:	08 95       	ret

00001c28 <_ZN14HardwareSerial5flushEv>:
  // don't reverse this or there may be problems if the RX interrupt
  // occurs after reading the value of rx_buffer_head but before writing
  // the value to rx_buffer_tail; the previous value of rx_buffer_head
  // may be written to rx_buffer_tail, making it appear as if the buffer
  // were full, not empty.
  _rx_buffer->head = _rx_buffer->tail;
    1c28:	dc 01       	movw	r26, r24
    1c2a:	12 96       	adiw	r26, 0x02	; 2
    1c2c:	8d 91       	ld	r24, X+
    1c2e:	9c 91       	ld	r25, X
    1c30:	13 97       	sbiw	r26, 0x03	; 3
    1c32:	fc 01       	movw	r30, r24
    1c34:	e0 58       	subi	r30, 0x80	; 128
    1c36:	ff 4f       	sbci	r31, 0xFF	; 255
    1c38:	8e 57       	subi	r24, 0x7E	; 126
    1c3a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c3c:	dc 01       	movw	r26, r24
    1c3e:	8d 91       	ld	r24, X+
    1c40:	9c 91       	ld	r25, X
    1c42:	11 97       	sbiw	r26, 0x01	; 1
    1c44:	91 83       	std	Z+1, r25	; 0x01
    1c46:	80 83       	st	Z, r24
}
    1c48:	08 95       	ret

00001c4a <_ZN14HardwareSerial5writeEh>:

void HardwareSerial::write(uint8_t c)
{
    1c4a:	fc 01       	movw	r30, r24
  while (!((*_ucsra) & (1 << _udre)));
    1c4c:	a0 85       	ldd	r26, Z+8	; 0x08
    1c4e:	b1 85       	ldd	r27, Z+9	; 0x09
    1c50:	21 89       	ldd	r18, Z+17	; 0x11
    1c52:	8c 91       	ld	r24, X
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	02 2e       	mov	r0, r18
    1c58:	02 c0       	rjmp	.+4      	; 0x1c5e <_ZN14HardwareSerial5writeEh+0x14>
    1c5a:	95 95       	asr	r25
    1c5c:	87 95       	ror	r24
    1c5e:	0a 94       	dec	r0
    1c60:	e2 f7       	brpl	.-8      	; 0x1c5a <_ZN14HardwareSerial5writeEh+0x10>
    1c62:	80 ff       	sbrs	r24, 0
    1c64:	f6 cf       	rjmp	.-20     	; 0x1c52 <_ZN14HardwareSerial5writeEh+0x8>
  *_udr = c;
    1c66:	04 84       	ldd	r0, Z+12	; 0x0c
    1c68:	f5 85       	ldd	r31, Z+13	; 0x0d
    1c6a:	e0 2d       	mov	r30, r0
    1c6c:	60 83       	st	Z, r22
}
    1c6e:	08 95       	ret

00001c70 <_ZN14HardwareSerial5writeEPc>:

void HardwareSerial::write(char* string)
{
    1c70:	0f 93       	push	r16
    1c72:	1f 93       	push	r17
    1c74:	cf 93       	push	r28
    1c76:	df 93       	push	r29
    1c78:	ec 01       	movw	r28, r24
    1c7a:	8b 01       	movw	r16, r22
	while (*string != NULL){
    1c7c:	09 c0       	rjmp	.+18     	; 0x1c90 <_ZN14HardwareSerial5writeEPc+0x20>
		write(*string);
    1c7e:	e8 81       	ld	r30, Y
    1c80:	f9 81       	ldd	r31, Y+1	; 0x01
    1c82:	00 84       	ldd	r0, Z+8	; 0x08
    1c84:	f1 85       	ldd	r31, Z+9	; 0x09
    1c86:	e0 2d       	mov	r30, r0
    1c88:	ce 01       	movw	r24, r28
    1c8a:	09 95       	icall
		string++;
    1c8c:	0f 5f       	subi	r16, 0xFF	; 255
    1c8e:	1f 4f       	sbci	r17, 0xFF	; 255
  *_udr = c;
}

void HardwareSerial::write(char* string)
{
	while (*string != NULL){
    1c90:	f8 01       	movw	r30, r16
    1c92:	60 81       	ld	r22, Z
    1c94:	66 23       	and	r22, r22
    1c96:	99 f7       	brne	.-26     	; 0x1c7e <_ZN14HardwareSerial5writeEPc+0xe>
		write(*string);
		string++;
	}
}
    1c98:	df 91       	pop	r29
    1c9a:	cf 91       	pop	r28
    1c9c:	1f 91       	pop	r17
    1c9e:	0f 91       	pop	r16
    1ca0:	08 95       	ret

00001ca2 <_GLOBAL__I_rx_buffer>:

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udre, uint8_t u2x)
    1ca2:	86 e1       	ldi	r24, 0x16	; 22
    1ca4:	91 e0       	ldi	r25, 0x01	; 1
    1ca6:	90 93 44 03 	sts	0x0344, r25
    1caa:	80 93 43 03 	sts	0x0343, r24
{
  _rx_buffer = rx_buffer;
    1cae:	8f eb       	ldi	r24, 0xBF	; 191
    1cb0:	92 e0       	ldi	r25, 0x02	; 2
    1cb2:	90 93 46 03 	sts	0x0346, r25
    1cb6:	80 93 45 03 	sts	0x0345, r24
  _ubrrh = ubrrh;
    1cba:	85 ec       	ldi	r24, 0xC5	; 197
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	90 93 48 03 	sts	0x0348, r25
    1cc2:	80 93 47 03 	sts	0x0347, r24
  _ubrrl = ubrrl;
    1cc6:	84 ec       	ldi	r24, 0xC4	; 196
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	90 93 4a 03 	sts	0x034A, r25
    1cce:	80 93 49 03 	sts	0x0349, r24
  _ucsra = ucsra;
    1cd2:	80 ec       	ldi	r24, 0xC0	; 192
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	90 93 4c 03 	sts	0x034C, r25
    1cda:	80 93 4b 03 	sts	0x034B, r24
  _ucsrb = ucsrb;
    1cde:	81 ec       	ldi	r24, 0xC1	; 193
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	90 93 4e 03 	sts	0x034E, r25
    1ce6:	80 93 4d 03 	sts	0x034D, r24
  _udr = udr;
    1cea:	86 ec       	ldi	r24, 0xC6	; 198
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	90 93 50 03 	sts	0x0350, r25
    1cf2:	80 93 4f 03 	sts	0x034F, r24
  _rxen = rxen;
    1cf6:	84 e0       	ldi	r24, 0x04	; 4
    1cf8:	80 93 51 03 	sts	0x0351, r24
  _txen = txen;
    1cfc:	83 e0       	ldi	r24, 0x03	; 3
    1cfe:	80 93 52 03 	sts	0x0352, r24
  _rxcie = rxcie;
    1d02:	87 e0       	ldi	r24, 0x07	; 7
    1d04:	80 93 53 03 	sts	0x0353, r24
  _udre = udre;
    1d08:	85 e0       	ldi	r24, 0x05	; 5
    1d0a:	80 93 54 03 	sts	0x0354, r24
  _u2x = u2x;
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	80 93 55 03 	sts	0x0355, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRE0, U2X0);
    1d14:	08 95       	ret

00001d16 <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
    1d16:	81 30       	cpi	r24, 0x01	; 1
    1d18:	41 f0       	breq	.+16     	; 0x1d2a <_Z12disableTimerh+0x14>
    1d1a:	81 30       	cpi	r24, 0x01	; 1
    1d1c:	18 f0       	brcs	.+6      	; 0x1d24 <_Z12disableTimerh+0xe>
    1d1e:	82 30       	cpi	r24, 0x02	; 2
    1d20:	d1 f4       	brne	.+52     	; 0x1d56 <_Z12disableTimerh+0x40>
    1d22:	09 c0       	rjmp	.+18     	; 0x1d36 <_Z12disableTimerh+0x20>
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
    1d24:	10 92 6e 00 	sts	0x006E, r1
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
    1d28:	08 95       	ret

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
    1d2a:	80 91 6f 00 	lds	r24, 0x006F
    1d2e:	8d 7f       	andi	r24, 0xFD	; 253
    1d30:	80 93 6f 00 	sts	0x006F, r24
      break;
    1d34:	08 95       	ret
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
    1d36:	80 91 70 00 	lds	r24, 0x0070
    1d3a:	8d 7f       	andi	r24, 0xFD	; 253
    1d3c:	80 93 70 00 	sts	0x0070, r24
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
    1d40:	81 e0       	ldi	r24, 0x01	; 1
    1d42:	80 93 b0 00 	sts	0x00B0, r24
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
    1d46:	80 91 b1 00 	lds	r24, 0x00B1
    1d4a:	88 7f       	andi	r24, 0xF8	; 248
    1d4c:	84 60       	ori	r24, 0x04	; 4
    1d4e:	80 93 b1 00 	sts	0x00B1, r24
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
    1d52:	10 92 b3 00 	sts	0x00B3, r1
    1d56:	08 95       	ret

00001d58 <_Z6noToneh>:
  }
}


void noTone(uint8_t _pin)
{
    1d58:	1f 93       	push	r17
    1d5a:	18 2f       	mov	r17, r24
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    1d5c:	80 91 20 01 	lds	r24, 0x0120
    1d60:	81 17       	cp	r24, r17
    1d62:	11 f0       	breq	.+4      	; 0x1d68 <_Z6noToneh+0x10>
    1d64:	8f ef       	ldi	r24, 0xFF	; 255
    1d66:	06 c0       	rjmp	.+12     	; 0x1d74 <_Z6noToneh+0x1c>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    1d68:	e8 e0       	ldi	r30, 0x08	; 8
    1d6a:	f1 e0       	ldi	r31, 0x01	; 1
    1d6c:	84 91       	lpm	r24, Z+
      tone_pins[i] = 255;
    1d6e:	9f ef       	ldi	r25, 0xFF	; 255
    1d70:	90 93 20 01 	sts	0x0120, r25
    }
  }
  
  disableTimer(_timer);
    1d74:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <_Z12disableTimerh>

  digitalWrite(_pin, 0);
    1d78:	81 2f       	mov	r24, r17
    1d7a:	60 e0       	ldi	r22, 0x00	; 0
    1d7c:	0e 94 94 06 	call	0xd28	; 0xd28 <digitalWrite>
}
    1d80:	1f 91       	pop	r17
    1d82:	08 95       	ret

00001d84 <__vector_7>:
}
#endif


ISR(TIMER2_COMPA_vect)
{
    1d84:	1f 92       	push	r1
    1d86:	0f 92       	push	r0
    1d88:	0f b6       	in	r0, 0x3f	; 63
    1d8a:	0f 92       	push	r0
    1d8c:	11 24       	eor	r1, r1
    1d8e:	2f 93       	push	r18
    1d90:	3f 93       	push	r19
    1d92:	4f 93       	push	r20
    1d94:	5f 93       	push	r21
    1d96:	6f 93       	push	r22
    1d98:	7f 93       	push	r23
    1d9a:	8f 93       	push	r24
    1d9c:	9f 93       	push	r25
    1d9e:	af 93       	push	r26
    1da0:	bf 93       	push	r27
    1da2:	ef 93       	push	r30
    1da4:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
    1da6:	80 91 64 03 	lds	r24, 0x0364
    1daa:	90 91 65 03 	lds	r25, 0x0365
    1dae:	a0 91 66 03 	lds	r26, 0x0366
    1db2:	b0 91 67 03 	lds	r27, 0x0367
    1db6:	00 97       	sbiw	r24, 0x00	; 0
    1db8:	a1 05       	cpc	r26, r1
    1dba:	b1 05       	cpc	r27, r1
    1dbc:	51 f1       	breq	.+84     	; 0x1e12 <__vector_7+0x8e>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
    1dbe:	e0 91 68 03 	lds	r30, 0x0368
    1dc2:	f0 91 69 03 	lds	r31, 0x0369
    1dc6:	80 81       	ld	r24, Z
    1dc8:	90 91 6a 03 	lds	r25, 0x036A
    1dcc:	89 27       	eor	r24, r25
    1dce:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
    1dd0:	80 91 64 03 	lds	r24, 0x0364
    1dd4:	90 91 65 03 	lds	r25, 0x0365
    1dd8:	a0 91 66 03 	lds	r26, 0x0366
    1ddc:	b0 91 67 03 	lds	r27, 0x0367
    1de0:	18 16       	cp	r1, r24
    1de2:	19 06       	cpc	r1, r25
    1de4:	1a 06       	cpc	r1, r26
    1de6:	1b 06       	cpc	r1, r27
    1de8:	c4 f4       	brge	.+48     	; 0x1e1a <__vector_7+0x96>
      timer2_toggle_count--;
    1dea:	80 91 64 03 	lds	r24, 0x0364
    1dee:	90 91 65 03 	lds	r25, 0x0365
    1df2:	a0 91 66 03 	lds	r26, 0x0366
    1df6:	b0 91 67 03 	lds	r27, 0x0367
    1dfa:	01 97       	sbiw	r24, 0x01	; 1
    1dfc:	a1 09       	sbc	r26, r1
    1dfe:	b1 09       	sbc	r27, r1
    1e00:	80 93 64 03 	sts	0x0364, r24
    1e04:	90 93 65 03 	sts	0x0365, r25
    1e08:	a0 93 66 03 	sts	0x0366, r26
    1e0c:	b0 93 67 03 	sts	0x0367, r27
    1e10:	04 c0       	rjmp	.+8      	; 0x1e1a <__vector_7+0x96>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
    1e12:	80 91 20 01 	lds	r24, 0x0120
    1e16:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
    1e1a:	ff 91       	pop	r31
    1e1c:	ef 91       	pop	r30
    1e1e:	bf 91       	pop	r27
    1e20:	af 91       	pop	r26
    1e22:	9f 91       	pop	r25
    1e24:	8f 91       	pop	r24
    1e26:	7f 91       	pop	r23
    1e28:	6f 91       	pop	r22
    1e2a:	5f 91       	pop	r21
    1e2c:	4f 91       	pop	r20
    1e2e:	3f 91       	pop	r19
    1e30:	2f 91       	pop	r18
    1e32:	0f 90       	pop	r0
    1e34:	0f be       	out	0x3f, r0	; 63
    1e36:	0f 90       	pop	r0
    1e38:	1f 90       	pop	r1
    1e3a:	18 95       	reti

00001e3c <_Z4tonehjm>:


// frequency (in hertz) and duration (in milliseconds).

void tone(uint8_t _pin, unsigned int frequency, unsigned long duration)
{
    1e3c:	2f 92       	push	r2
    1e3e:	3f 92       	push	r3
    1e40:	4f 92       	push	r4
    1e42:	5f 92       	push	r5
    1e44:	6f 92       	push	r6
    1e46:	7f 92       	push	r7
    1e48:	8f 92       	push	r8
    1e4a:	9f 92       	push	r9
    1e4c:	af 92       	push	r10
    1e4e:	bf 92       	push	r11
    1e50:	df 92       	push	r13
    1e52:	ef 92       	push	r14
    1e54:	ff 92       	push	r15
    1e56:	0f 93       	push	r16
    1e58:	1f 93       	push	r17
    1e5a:	df 93       	push	r29
    1e5c:	cf 93       	push	r28
    1e5e:	00 d0       	rcall	.+0      	; 0x1e60 <_Z4tonehjm+0x24>
    1e60:	00 d0       	rcall	.+0      	; 0x1e62 <_Z4tonehjm+0x26>
    1e62:	cd b7       	in	r28, 0x3d	; 61
    1e64:	de b7       	in	r29, 0x3e	; 62
    1e66:	1b 01       	movw	r2, r22
    1e68:	29 83       	std	Y+1, r18	; 0x01
    1e6a:	3a 83       	std	Y+2, r19	; 0x02
    1e6c:	4b 83       	std	Y+3, r20	; 0x03
    1e6e:	5c 83       	std	Y+4, r21	; 0x04
{
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
    1e70:	90 91 20 01 	lds	r25, 0x0120
    1e74:	98 17       	cp	r25, r24
    1e76:	21 f0       	breq	.+8      	; 0x1e80 <_Z4tonehjm+0x44>
    }
  }
  
  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == 255) {
    1e78:	9f 3f       	cpi	r25, 0xFF	; 255
    1e7a:	09 f0       	breq	.+2      	; 0x1e7e <_Z4tonehjm+0x42>
    1e7c:	dc c1       	rjmp	.+952    	; 0x2236 <_Z4tonehjm+0x3fa>
    1e7e:	04 c0       	rjmp	.+8      	; 0x1e88 <_Z4tonehjm+0x4c>
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
    1e80:	e8 e0       	ldi	r30, 0x08	; 8
    1e82:	f1 e0       	ldi	r31, 0x01	; 1
    1e84:	d4 90       	lpm	r13, Z+
    1e86:	7f c0       	rjmp	.+254    	; 0x1f86 <_Z4tonehjm+0x14a>
  }
  
  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == 255) {
      tone_pins[i] = _pin;
    1e88:	80 93 20 01 	sts	0x0120, r24
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
    1e8c:	e8 e0       	ldi	r30, 0x08	; 8
    1e8e:	f1 e0       	ldi	r31, 0x01	; 1
    1e90:	d4 90       	lpm	r13, Z+
      break;
    }
  }
  
  if (_timer != -1)
    1e92:	2f ef       	ldi	r18, 0xFF	; 255
    1e94:	d2 16       	cp	r13, r18
    1e96:	09 f4       	brne	.+2      	; 0x1e9a <_Z4tonehjm+0x5e>
    1e98:	ce c1       	rjmp	.+924    	; 0x2236 <_Z4tonehjm+0x3fa>
  {
    // Set timer specific stuff
    // All timers in CTC mode
    // 8 bit timers will require changing prescalar values,
    // whereas 16 bit timers are set to either ck/1 or ck/64 prescalar
    switch (_timer)
    1e9a:	91 e0       	ldi	r25, 0x01	; 1
    1e9c:	d9 16       	cp	r13, r25
    1e9e:	39 f1       	breq	.+78     	; 0x1eee <_Z4tonehjm+0xb2>
    1ea0:	a2 e0       	ldi	r26, 0x02	; 2
    1ea2:	da 16       	cp	r13, r26
    1ea4:	09 f4       	brne	.+2      	; 0x1ea8 <_Z4tonehjm+0x6c>
    1ea6:	49 c0       	rjmp	.+146    	; 0x1f3a <_Z4tonehjm+0xfe>
    1ea8:	dd 20       	and	r13, r13
    1eaa:	09 f0       	breq	.+2      	; 0x1eae <_Z4tonehjm+0x72>
    1eac:	6c c0       	rjmp	.+216    	; 0x1f86 <_Z4tonehjm+0x14a>
    {
      #if defined(TCCR0A) && defined(TCCR0B)
      case 0:
        // 8 bit timer
        TCCR0A = 0;
    1eae:	14 bc       	out	0x24, r1	; 36
        TCCR0B = 0;
    1eb0:	15 bc       	out	0x25, r1	; 37
        bitWrite(TCCR0A, WGM01, 1);
    1eb2:	94 b5       	in	r25, 0x24	; 36
    1eb4:	92 60       	ori	r25, 0x02	; 2
    1eb6:	94 bd       	out	0x24, r25	; 36
        bitWrite(TCCR0B, CS00, 1);
    1eb8:	95 b5       	in	r25, 0x25	; 37
    1eba:	91 60       	ori	r25, 0x01	; 1
    1ebc:	95 bd       	out	0x25, r25	; 37
        timer0_pin_port = portOutputRegister(digitalPinToPort(_pin));
    1ebe:	28 2f       	mov	r18, r24
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	f9 01       	movw	r30, r18
    1ec4:	e4 53       	subi	r30, 0x34	; 52
    1ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec8:	e4 91       	lpm	r30, Z+
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	ee 0f       	add	r30, r30
    1ece:	ff 1f       	adc	r31, r31
    1ed0:	e8 54       	subi	r30, 0x48	; 72
    1ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed4:	45 91       	lpm	r20, Z+
    1ed6:	54 91       	lpm	r21, Z+
    1ed8:	50 93 5b 03 	sts	0x035B, r21
    1edc:	40 93 5a 03 	sts	0x035A, r20
        timer0_pin_mask = digitalPinToBitMask(_pin);
    1ee0:	20 52       	subi	r18, 0x20	; 32
    1ee2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ee4:	f9 01       	movw	r30, r18
    1ee6:	24 91       	lpm	r18, Z+
    1ee8:	20 93 5c 03 	sts	0x035C, r18
    1eec:	4e c0       	rjmp	.+156    	; 0x1f8a <_Z4tonehjm+0x14e>
      #endif

      #if defined(TCCR1A) && defined(TCCR1B) && defined(WGM12)
      case 1:
        // 16 bit timer
        TCCR1A = 0;
    1eee:	10 92 80 00 	sts	0x0080, r1
        TCCR1B = 0;
    1ef2:	10 92 81 00 	sts	0x0081, r1
        bitWrite(TCCR1B, WGM12, 1);
    1ef6:	90 91 81 00 	lds	r25, 0x0081
    1efa:	98 60       	ori	r25, 0x08	; 8
    1efc:	90 93 81 00 	sts	0x0081, r25
        bitWrite(TCCR1B, CS10, 1);
    1f00:	90 91 81 00 	lds	r25, 0x0081
    1f04:	91 60       	ori	r25, 0x01	; 1
    1f06:	90 93 81 00 	sts	0x0081, r25
        timer1_pin_port = portOutputRegister(digitalPinToPort(_pin));
    1f0a:	28 2f       	mov	r18, r24
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	f9 01       	movw	r30, r18
    1f10:	e4 53       	subi	r30, 0x34	; 52
    1f12:	ff 4f       	sbci	r31, 0xFF	; 255
    1f14:	e4 91       	lpm	r30, Z+
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	ee 0f       	add	r30, r30
    1f1a:	ff 1f       	adc	r31, r31
    1f1c:	e8 54       	subi	r30, 0x48	; 72
    1f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f20:	45 91       	lpm	r20, Z+
    1f22:	54 91       	lpm	r21, Z+
    1f24:	50 93 62 03 	sts	0x0362, r21
    1f28:	40 93 61 03 	sts	0x0361, r20
        timer1_pin_mask = digitalPinToBitMask(_pin);
    1f2c:	20 52       	subi	r18, 0x20	; 32
    1f2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f30:	f9 01       	movw	r30, r18
    1f32:	24 91       	lpm	r18, Z+
    1f34:	20 93 63 03 	sts	0x0363, r18
    1f38:	28 c0       	rjmp	.+80     	; 0x1f8a <_Z4tonehjm+0x14e>
      #endif

      #if defined(TCCR2A) && defined(TCCR2B)
      case 2:
        // 8 bit timer
        TCCR2A = 0;
    1f3a:	10 92 b0 00 	sts	0x00B0, r1
        TCCR2B = 0;
    1f3e:	10 92 b1 00 	sts	0x00B1, r1
        bitWrite(TCCR2A, WGM21, 1);
    1f42:	90 91 b0 00 	lds	r25, 0x00B0
    1f46:	92 60       	ori	r25, 0x02	; 2
    1f48:	90 93 b0 00 	sts	0x00B0, r25
        bitWrite(TCCR2B, CS20, 1);
    1f4c:	90 91 b1 00 	lds	r25, 0x00B1
    1f50:	91 60       	ori	r25, 0x01	; 1
    1f52:	90 93 b1 00 	sts	0x00B1, r25
        timer2_pin_port = portOutputRegister(digitalPinToPort(_pin));
    1f56:	28 2f       	mov	r18, r24
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	f9 01       	movw	r30, r18
    1f5c:	e4 53       	subi	r30, 0x34	; 52
    1f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f60:	e4 91       	lpm	r30, Z+
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	ee 0f       	add	r30, r30
    1f66:	ff 1f       	adc	r31, r31
    1f68:	e8 54       	subi	r30, 0x48	; 72
    1f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6c:	45 91       	lpm	r20, Z+
    1f6e:	54 91       	lpm	r21, Z+
    1f70:	50 93 69 03 	sts	0x0369, r21
    1f74:	40 93 68 03 	sts	0x0368, r20
        timer2_pin_mask = digitalPinToBitMask(_pin);
    1f78:	20 52       	subi	r18, 0x20	; 32
    1f7a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f7c:	f9 01       	movw	r30, r18
    1f7e:	24 91       	lpm	r18, Z+
    1f80:	20 93 6a 03 	sts	0x036A, r18
    1f84:	02 c0       	rjmp	.+4      	; 0x1f8a <_Z4tonehjm+0x14e>
  uint32_t ocr = 0;
  int8_t _timer;

  _timer = toneBegin(_pin);

  if (_timer >= 0)
    1f86:	d7 fc       	sbrc	r13, 7
    1f88:	56 c1       	rjmp	.+684    	; 0x2236 <_Z4tonehjm+0x3fa>
  {
    // Set the pinMode as OUTPUT
    pinMode(_pin, OUTPUT);
    1f8a:	61 e0       	ldi	r22, 0x01	; 1
    1f8c:	0e 94 42 06 	call	0xc84	; 0xc84 <pinMode>
    
    // if we are using an 8 bit timer, scan through prescalars to find the best fit
    if (_timer == 0 || _timer == 2)
    1f90:	dd 20       	and	r13, r13
    1f92:	21 f0       	breq	.+8      	; 0x1f9c <_Z4tonehjm+0x160>
    1f94:	f2 e0       	ldi	r31, 0x02	; 2
    1f96:	df 16       	cp	r13, r31
    1f98:	09 f0       	breq	.+2      	; 0x1f9c <_Z4tonehjm+0x160>
    1f9a:	be c0       	rjmp	.+380    	; 0x2118 <_Z4tonehjm+0x2dc>
    {
      ocr = F_CPU / frequency / 2 - 1;
    1f9c:	41 01       	movw	r8, r2
    1f9e:	aa 24       	eor	r10, r10
    1fa0:	bb 24       	eor	r11, r11
    1fa2:	60 e0       	ldi	r22, 0x00	; 0
    1fa4:	72 e1       	ldi	r23, 0x12	; 18
    1fa6:	8a e7       	ldi	r24, 0x7A	; 122
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	a5 01       	movw	r20, r10
    1fac:	94 01       	movw	r18, r8
    1fae:	0e 94 3d 21 	call	0x427a	; 0x427a <__udivmodsi4>
    1fb2:	29 01       	movw	r4, r18
    1fb4:	3a 01       	movw	r6, r20
    1fb6:	83 01       	movw	r16, r6
    1fb8:	72 01       	movw	r14, r4
    1fba:	08 94       	sec
    1fbc:	e1 08       	sbc	r14, r1
    1fbe:	f1 08       	sbc	r15, r1
    1fc0:	01 09       	sbc	r16, r1
    1fc2:	11 09       	sbc	r17, r1
      prescalarbits = 0b001;  // ck/1: same for both timers
      if (ocr > 255)
    1fc4:	2f ef       	ldi	r18, 0xFF	; 255
    1fc6:	e2 16       	cp	r14, r18
    1fc8:	f1 04       	cpc	r15, r1
    1fca:	01 05       	cpc	r16, r1
    1fcc:	11 05       	cpc	r17, r1
    1fce:	09 f0       	breq	.+2      	; 0x1fd2 <_Z4tonehjm+0x196>
    1fd0:	08 f4       	brcc	.+2      	; 0x1fd4 <_Z4tonehjm+0x198>
    1fd2:	99 c0       	rjmp	.+306    	; 0x2106 <_Z4tonehjm+0x2ca>
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
    1fd4:	60 e4       	ldi	r22, 0x40	; 64
    1fd6:	72 e4       	ldi	r23, 0x42	; 66
    1fd8:	8f e0       	ldi	r24, 0x0F	; 15
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	a5 01       	movw	r20, r10
    1fde:	94 01       	movw	r18, r8
    1fe0:	0e 94 3d 21 	call	0x427a	; 0x427a <__udivmodsi4>
    1fe4:	79 01       	movw	r14, r18
    1fe6:	8a 01       	movw	r16, r20
    1fe8:	08 94       	sec
    1fea:	e1 08       	sbc	r14, r1
    1fec:	f1 08       	sbc	r15, r1
    1fee:	01 09       	sbc	r16, r1
    1ff0:	11 09       	sbc	r17, r1
        prescalarbits = 0b010;  // ck/8: same for both timers

        if (_timer == 2 && ocr > 255)
    1ff2:	82 e0       	ldi	r24, 0x02	; 2
    1ff4:	d8 16       	cp	r13, r24
    1ff6:	c1 f4       	brne	.+48     	; 0x2028 <_Z4tonehjm+0x1ec>
    1ff8:	9f ef       	ldi	r25, 0xFF	; 255
    1ffa:	e9 16       	cp	r14, r25
    1ffc:	f1 04       	cpc	r15, r1
    1ffe:	01 05       	cpc	r16, r1
    2000:	11 05       	cpc	r17, r1
    2002:	09 f0       	breq	.+2      	; 0x2006 <_Z4tonehjm+0x1ca>
    2004:	08 f4       	brcc	.+2      	; 0x2008 <_Z4tonehjm+0x1cc>
    2006:	84 c0       	rjmp	.+264    	; 0x2110 <_Z4tonehjm+0x2d4>
        {
          ocr = F_CPU / frequency / 2 / 32 - 1;
    2008:	60 e9       	ldi	r22, 0x90	; 144
    200a:	70 ed       	ldi	r23, 0xD0	; 208
    200c:	83 e0       	ldi	r24, 0x03	; 3
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	a5 01       	movw	r20, r10
    2012:	94 01       	movw	r18, r8
    2014:	0e 94 3d 21 	call	0x427a	; 0x427a <__udivmodsi4>
    2018:	79 01       	movw	r14, r18
    201a:	8a 01       	movw	r16, r20
    201c:	08 94       	sec
    201e:	e1 08       	sbc	r14, r1
    2020:	f1 08       	sbc	r15, r1
    2022:	01 09       	sbc	r16, r1
    2024:	11 09       	sbc	r17, r1
    2026:	83 e0       	ldi	r24, 0x03	; 3
          prescalarbits = 0b011;
        }

        if (ocr > 255)
    2028:	af ef       	ldi	r26, 0xFF	; 255
    202a:	ea 16       	cp	r14, r26
    202c:	f1 04       	cpc	r15, r1
    202e:	01 05       	cpc	r16, r1
    2030:	11 05       	cpc	r17, r1
    2032:	09 f0       	breq	.+2      	; 0x2036 <_Z4tonehjm+0x1fa>
    2034:	08 f4       	brcc	.+2      	; 0x2038 <_Z4tonehjm+0x1fc>
    2036:	68 c0       	rjmp	.+208    	; 0x2108 <_Z4tonehjm+0x2cc>
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
    2038:	68 e4       	ldi	r22, 0x48	; 72
    203a:	78 ee       	ldi	r23, 0xE8	; 232
    203c:	81 e0       	ldi	r24, 0x01	; 1
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	a5 01       	movw	r20, r10
    2042:	94 01       	movw	r18, r8
    2044:	0e 94 3d 21 	call	0x427a	; 0x427a <__udivmodsi4>
    2048:	79 01       	movw	r14, r18
    204a:	8a 01       	movw	r16, r20
    204c:	08 94       	sec
    204e:	e1 08       	sbc	r14, r1
    2050:	f1 08       	sbc	r15, r1
    2052:	01 09       	sbc	r16, r1
    2054:	11 09       	sbc	r17, r1
          prescalarbits = _timer == 0 ? 0b011 : 0b100;
    2056:	dd 20       	and	r13, r13
    2058:	11 f4       	brne	.+4      	; 0x205e <_Z4tonehjm+0x222>
    205a:	83 e0       	ldi	r24, 0x03	; 3
    205c:	1e c0       	rjmp	.+60     	; 0x209a <_Z4tonehjm+0x25e>

          if (_timer == 2 && ocr > 255)
    205e:	b2 e0       	ldi	r27, 0x02	; 2
    2060:	db 16       	cp	r13, r27
    2062:	11 f0       	breq	.+4      	; 0x2068 <_Z4tonehjm+0x22c>
    2064:	84 e0       	ldi	r24, 0x04	; 4
    2066:	19 c0       	rjmp	.+50     	; 0x209a <_Z4tonehjm+0x25e>
    2068:	ef ef       	ldi	r30, 0xFF	; 255
    206a:	ee 16       	cp	r14, r30
    206c:	f1 04       	cpc	r15, r1
    206e:	01 05       	cpc	r16, r1
    2070:	11 05       	cpc	r17, r1
    2072:	09 f0       	breq	.+2      	; 0x2076 <_Z4tonehjm+0x23a>
    2074:	10 f4       	brcc	.+4      	; 0x207a <_Z4tonehjm+0x23e>
    2076:	84 e0       	ldi	r24, 0x04	; 4
    2078:	4c c0       	rjmp	.+152    	; 0x2112 <_Z4tonehjm+0x2d6>
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
    207a:	64 e2       	ldi	r22, 0x24	; 36
    207c:	74 ef       	ldi	r23, 0xF4	; 244
    207e:	80 e0       	ldi	r24, 0x00	; 0
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	a5 01       	movw	r20, r10
    2084:	94 01       	movw	r18, r8
    2086:	0e 94 3d 21 	call	0x427a	; 0x427a <__udivmodsi4>
    208a:	79 01       	movw	r14, r18
    208c:	8a 01       	movw	r16, r20
    208e:	08 94       	sec
    2090:	e1 08       	sbc	r14, r1
    2092:	f1 08       	sbc	r15, r1
    2094:	01 09       	sbc	r16, r1
    2096:	11 09       	sbc	r17, r1
    2098:	85 e0       	ldi	r24, 0x05	; 5
            prescalarbits = 0b101;
          }

          if (ocr > 255)
    209a:	ff ef       	ldi	r31, 0xFF	; 255
    209c:	ef 16       	cp	r14, r31
    209e:	f1 04       	cpc	r15, r1
    20a0:	01 05       	cpc	r16, r1
    20a2:	11 05       	cpc	r17, r1
    20a4:	89 f1       	breq	.+98     	; 0x2108 <_Z4tonehjm+0x2cc>
    20a6:	80 f1       	brcs	.+96     	; 0x2108 <_Z4tonehjm+0x2cc>
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
    20a8:	62 e1       	ldi	r22, 0x12	; 18
    20aa:	7a e7       	ldi	r23, 0x7A	; 122
    20ac:	80 e0       	ldi	r24, 0x00	; 0
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	a5 01       	movw	r20, r10
    20b2:	94 01       	movw	r18, r8
    20b4:	0e 94 3d 21 	call	0x427a	; 0x427a <__udivmodsi4>
    20b8:	79 01       	movw	r14, r18
    20ba:	8a 01       	movw	r16, r20
    20bc:	08 94       	sec
    20be:	e1 08       	sbc	r14, r1
    20c0:	f1 08       	sbc	r15, r1
    20c2:	01 09       	sbc	r16, r1
    20c4:	11 09       	sbc	r17, r1
            prescalarbits = _timer == 0 ? 0b100 : 0b110;
    20c6:	dd 20       	and	r13, r13
    20c8:	11 f0       	breq	.+4      	; 0x20ce <_Z4tonehjm+0x292>
    20ca:	86 e0       	ldi	r24, 0x06	; 6
    20cc:	01 c0       	rjmp	.+2      	; 0x20d0 <_Z4tonehjm+0x294>
    20ce:	84 e0       	ldi	r24, 0x04	; 4
            if (ocr > 255)
    20d0:	2f ef       	ldi	r18, 0xFF	; 255
    20d2:	e2 16       	cp	r14, r18
    20d4:	f1 04       	cpc	r15, r1
    20d6:	01 05       	cpc	r16, r1
    20d8:	11 05       	cpc	r17, r1
    20da:	b1 f0       	breq	.+44     	; 0x2108 <_Z4tonehjm+0x2cc>
    20dc:	a8 f0       	brcs	.+42     	; 0x2108 <_Z4tonehjm+0x2cc>
            {
              // can't do any better than /1024
              ocr = F_CPU / frequency / 2 / 1024 - 1;
    20de:	83 01       	movw	r16, r6
    20e0:	72 01       	movw	r14, r4
    20e2:	9a e0       	ldi	r25, 0x0A	; 10
    20e4:	16 95       	lsr	r17
    20e6:	07 95       	ror	r16
    20e8:	f7 94       	ror	r15
    20ea:	e7 94       	ror	r14
    20ec:	9a 95       	dec	r25
    20ee:	d1 f7       	brne	.-12     	; 0x20e4 <_Z4tonehjm+0x2a8>
    20f0:	08 94       	sec
    20f2:	e1 08       	sbc	r14, r1
    20f4:	f1 08       	sbc	r15, r1
    20f6:	01 09       	sbc	r16, r1
    20f8:	11 09       	sbc	r17, r1
              prescalarbits = _timer == 0 ? 0b101 : 0b111;
    20fa:	dd 20       	and	r13, r13
    20fc:	11 f0       	breq	.+4      	; 0x2102 <_Z4tonehjm+0x2c6>
    20fe:	87 e0       	ldi	r24, 0x07	; 7
    2100:	08 c0       	rjmp	.+16     	; 0x2112 <_Z4tonehjm+0x2d6>
    2102:	85 e0       	ldi	r24, 0x05	; 5
    2104:	03 c0       	rjmp	.+6      	; 0x210c <_Z4tonehjm+0x2d0>
    2106:	81 e0       	ldi	r24, 0x01	; 1
          }
        }
      }

#if defined(TCCR0B)
      if (_timer == 0)
    2108:	dd 20       	and	r13, r13
    210a:	19 f4       	brne	.+6      	; 0x2112 <_Z4tonehjm+0x2d6>
      {
        TCCR0B = prescalarbits;
    210c:	85 bd       	out	0x25, r24	; 37
    210e:	3a c0       	rjmp	.+116    	; 0x2184 <_Z4tonehjm+0x348>
    2110:	82 e0       	ldi	r24, 0x02	; 2
      }
      else
#endif
#if defined(TCCR2B)
      {
        TCCR2B = prescalarbits;
    2112:	80 93 b1 00 	sts	0x00B1, r24
    2116:	36 c0       	rjmp	.+108    	; 0x2184 <_Z4tonehjm+0x348>
#endif
    }
    else
    {
      // two choices for the 16 bit timers: ck/1 or ck/64
      ocr = F_CPU / frequency / 2 - 1;
    2118:	41 01       	movw	r8, r2
    211a:	aa 24       	eor	r10, r10
    211c:	bb 24       	eor	r11, r11
    211e:	60 e0       	ldi	r22, 0x00	; 0
    2120:	72 e1       	ldi	r23, 0x12	; 18
    2122:	8a e7       	ldi	r24, 0x7A	; 122
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	a5 01       	movw	r20, r10
    2128:	94 01       	movw	r18, r8
    212a:	0e 94 3d 21 	call	0x427a	; 0x427a <__udivmodsi4>
    212e:	79 01       	movw	r14, r18
    2130:	8a 01       	movw	r16, r20
    2132:	08 94       	sec
    2134:	e1 08       	sbc	r14, r1
    2136:	f1 08       	sbc	r15, r1
    2138:	01 09       	sbc	r16, r1
    213a:	11 09       	sbc	r17, r1

      prescalarbits = 0b001;
      if (ocr > 0xffff)
    213c:	80 e0       	ldi	r24, 0x00	; 0
    213e:	e8 16       	cp	r14, r24
    2140:	80 e0       	ldi	r24, 0x00	; 0
    2142:	f8 06       	cpc	r15, r24
    2144:	81 e0       	ldi	r24, 0x01	; 1
    2146:	08 07       	cpc	r16, r24
    2148:	80 e0       	ldi	r24, 0x00	; 0
    214a:	18 07       	cpc	r17, r24
    214c:	10 f4       	brcc	.+4      	; 0x2152 <_Z4tonehjm+0x316>
    214e:	91 e0       	ldi	r25, 0x01	; 1
    2150:	10 c0       	rjmp	.+32     	; 0x2172 <_Z4tonehjm+0x336>
      {
        ocr = F_CPU / frequency / 2 / 64 - 1;
    2152:	68 e4       	ldi	r22, 0x48	; 72
    2154:	78 ee       	ldi	r23, 0xE8	; 232
    2156:	81 e0       	ldi	r24, 0x01	; 1
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	a5 01       	movw	r20, r10
    215c:	94 01       	movw	r18, r8
    215e:	0e 94 3d 21 	call	0x427a	; 0x427a <__udivmodsi4>
    2162:	79 01       	movw	r14, r18
    2164:	8a 01       	movw	r16, r20
    2166:	08 94       	sec
    2168:	e1 08       	sbc	r14, r1
    216a:	f1 08       	sbc	r15, r1
    216c:	01 09       	sbc	r16, r1
    216e:	11 09       	sbc	r17, r1
    2170:	93 e0       	ldi	r25, 0x03	; 3
        prescalarbits = 0b011;
      }

      if (_timer == 1)
    2172:	a1 e0       	ldi	r26, 0x01	; 1
    2174:	da 16       	cp	r13, r26
    2176:	31 f4       	brne	.+12     	; 0x2184 <_Z4tonehjm+0x348>
      {
#if defined(TCCR1B)
        TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;
    2178:	80 91 81 00 	lds	r24, 0x0081
    217c:	88 7f       	andi	r24, 0xF8	; 248
    217e:	89 2b       	or	r24, r25
    2180:	80 93 81 00 	sts	0x0081, r24

    }
    

    // Calculate the toggle count
    if (duration > 0)
    2184:	89 81       	ldd	r24, Y+1	; 0x01
    2186:	9a 81       	ldd	r25, Y+2	; 0x02
    2188:	ab 81       	ldd	r26, Y+3	; 0x03
    218a:	bc 81       	ldd	r27, Y+4	; 0x04
    218c:	00 97       	sbiw	r24, 0x00	; 0
    218e:	a1 05       	cpc	r26, r1
    2190:	b1 05       	cpc	r27, r1
    2192:	21 f4       	brne	.+8      	; 0x219c <_Z4tonehjm+0x360>
    2194:	8f ef       	ldi	r24, 0xFF	; 255
    2196:	9f ef       	ldi	r25, 0xFF	; 255
    2198:	dc 01       	movw	r26, r24
    219a:	15 c0       	rjmp	.+42     	; 0x21c6 <_Z4tonehjm+0x38a>
    {
      toggle_count = 2 * frequency * duration / 1000;
    219c:	b1 01       	movw	r22, r2
    219e:	66 0f       	add	r22, r22
    21a0:	77 1f       	adc	r23, r23
    21a2:	80 e0       	ldi	r24, 0x00	; 0
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	29 81       	ldd	r18, Y+1	; 0x01
    21a8:	3a 81       	ldd	r19, Y+2	; 0x02
    21aa:	4b 81       	ldd	r20, Y+3	; 0x03
    21ac:	5c 81       	ldd	r21, Y+4	; 0x04
    21ae:	0e 94 f7 20 	call	0x41ee	; 0x41ee <__mulsi3>
    21b2:	28 ee       	ldi	r18, 0xE8	; 232
    21b4:	33 e0       	ldi	r19, 0x03	; 3
    21b6:	40 e0       	ldi	r20, 0x00	; 0
    21b8:	50 e0       	ldi	r21, 0x00	; 0
    21ba:	0e 94 3d 21 	call	0x427a	; 0x427a <__udivmodsi4>
    21be:	82 2f       	mov	r24, r18
    21c0:	93 2f       	mov	r25, r19
    21c2:	a4 2f       	mov	r26, r20
    21c4:	b5 2f       	mov	r27, r21
    }

    // Set the OCR for the given timer,
    // set the toggle count,
    // then turn on the interrupts
    switch (_timer)
    21c6:	e1 e0       	ldi	r30, 0x01	; 1
    21c8:	de 16       	cp	r13, r30
    21ca:	a1 f0       	breq	.+40     	; 0x21f4 <_Z4tonehjm+0x3b8>
    21cc:	f2 e0       	ldi	r31, 0x02	; 2
    21ce:	df 16       	cp	r13, r31
    21d0:	19 f1       	breq	.+70     	; 0x2218 <_Z4tonehjm+0x3dc>
    21d2:	dd 20       	and	r13, r13
    21d4:	81 f5       	brne	.+96     	; 0x2236 <_Z4tonehjm+0x3fa>
    {

#if defined(OCR0A) && defined(TIMSK0) && defined(OCIE0A)
      case 0:
        OCR0A = ocr;
    21d6:	e7 bc       	out	0x27, r14	; 39
        timer0_toggle_count = toggle_count;
    21d8:	80 93 56 03 	sts	0x0356, r24
    21dc:	90 93 57 03 	sts	0x0357, r25
    21e0:	a0 93 58 03 	sts	0x0358, r26
    21e4:	b0 93 59 03 	sts	0x0359, r27
        bitWrite(TIMSK0, OCIE0A, 1);
    21e8:	80 91 6e 00 	lds	r24, 0x006E
    21ec:	82 60       	ori	r24, 0x02	; 2
    21ee:	80 93 6e 00 	sts	0x006E, r24
        break;
    21f2:	21 c0       	rjmp	.+66     	; 0x2236 <_Z4tonehjm+0x3fa>
#endif

      case 1:
#if defined(OCR1A) && defined(TIMSK1) && defined(OCIE1A)
        OCR1A = ocr;
    21f4:	f0 92 89 00 	sts	0x0089, r15
    21f8:	e0 92 88 00 	sts	0x0088, r14
        timer1_toggle_count = toggle_count;
    21fc:	80 93 5d 03 	sts	0x035D, r24
    2200:	90 93 5e 03 	sts	0x035E, r25
    2204:	a0 93 5f 03 	sts	0x035F, r26
    2208:	b0 93 60 03 	sts	0x0360, r27
        bitWrite(TIMSK1, OCIE1A, 1);
    220c:	80 91 6f 00 	lds	r24, 0x006F
    2210:	82 60       	ori	r24, 0x02	; 2
    2212:	80 93 6f 00 	sts	0x006F, r24
        // this combination is for at least the ATmega32
        OCR1A = ocr;
        timer1_toggle_count = toggle_count;
        bitWrite(TIMSK, OCIE1A, 1);
#endif
        break;
    2216:	0f c0       	rjmp	.+30     	; 0x2236 <_Z4tonehjm+0x3fa>

#if defined(OCR2A) && defined(TIMSK2) && defined(OCIE2A)
      case 2:
        OCR2A = ocr;
    2218:	e0 92 b3 00 	sts	0x00B3, r14
        timer2_toggle_count = toggle_count;
    221c:	80 93 64 03 	sts	0x0364, r24
    2220:	90 93 65 03 	sts	0x0365, r25
    2224:	a0 93 66 03 	sts	0x0366, r26
    2228:	b0 93 67 03 	sts	0x0367, r27
        bitWrite(TIMSK2, OCIE2A, 1);
    222c:	80 91 70 00 	lds	r24, 0x0070
    2230:	82 60       	ori	r24, 0x02	; 2
    2232:	80 93 70 00 	sts	0x0070, r24
        break;
#endif

    }
  }
}
    2236:	0f 90       	pop	r0
    2238:	0f 90       	pop	r0
    223a:	0f 90       	pop	r0
    223c:	0f 90       	pop	r0
    223e:	cf 91       	pop	r28
    2240:	df 91       	pop	r29
    2242:	1f 91       	pop	r17
    2244:	0f 91       	pop	r16
    2246:	ff 90       	pop	r15
    2248:	ef 90       	pop	r14
    224a:	df 90       	pop	r13
    224c:	bf 90       	pop	r11
    224e:	af 90       	pop	r10
    2250:	9f 90       	pop	r9
    2252:	8f 90       	pop	r8
    2254:	7f 90       	pop	r7
    2256:	6f 90       	pop	r6
    2258:	5f 90       	pop	r5
    225a:	4f 90       	pop	r4
    225c:	3f 90       	pop	r3
    225e:	2f 90       	pop	r2
    2260:	08 95       	ret

00002262 <_ZN7TwoWireC2Ev>:

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
{
}
    2262:	08 95       	ret

00002264 <_ZN7TwoWireC1Ev>:
    2264:	08 95       	ret

00002266 <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    2266:	81 e0       	ldi	r24, 0x01	; 1
    2268:	80 93 b0 03 	sts	0x03B0, r24
  // set address of targeted slave
  txAddress = address;
    226c:	60 93 8d 03 	sts	0x038D, r22
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    2270:	10 92 ae 03 	sts	0x03AE, r1
  txBufferLength = 0;
    2274:	10 92 af 03 	sts	0x03AF, r1
}
    2278:	08 95       	ret

0000227a <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    227a:	81 e0       	ldi	r24, 0x01	; 1
    227c:	80 93 b0 03 	sts	0x03B0, r24
  // set address of targeted slave
  txAddress = address;
    2280:	60 93 8d 03 	sts	0x038D, r22
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    2284:	10 92 ae 03 	sts	0x03AE, r1
  txBufferLength = 0;
    2288:	10 92 af 03 	sts	0x03AF, r1
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
}
    228c:	08 95       	ret

0000228e <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
uint8_t TwoWire::available(void)
{
    228e:	80 91 8c 03 	lds	r24, 0x038C
    2292:	90 91 8b 03 	lds	r25, 0x038B
  return rxBufferLength - rxBufferIndex;
}
    2296:	89 1b       	sub	r24, r25
    2298:	08 95       	ret

0000229a <_ZN7TwoWire7receiveEv>:
  // default to returning null char
  // for people using with char strings
  uint8_t value = '\0';
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    229a:	90 91 8b 03 	lds	r25, 0x038B
    229e:	80 91 8c 03 	lds	r24, 0x038C
    22a2:	98 17       	cp	r25, r24
    22a4:	10 f0       	brcs	.+4      	; 0x22aa <_ZN7TwoWire7receiveEv+0x10>
    22a6:	80 e0       	ldi	r24, 0x00	; 0
    22a8:	08 95       	ret
    value = rxBuffer[rxBufferIndex];
    22aa:	e9 2f       	mov	r30, r25
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	e5 59       	subi	r30, 0x95	; 149
    22b0:	fc 4f       	sbci	r31, 0xFC	; 252
    22b2:	80 81       	ld	r24, Z
    ++rxBufferIndex;
    22b4:	9f 5f       	subi	r25, 0xFF	; 255
    22b6:	90 93 8b 03 	sts	0x038B, r25
  }

  return value;
}
    22ba:	08 95       	ret

000022bc <_ZN7TwoWire16onReceiveServiceEPhi>:

// behind the scenes function that is called when data is received
void TwoWire::onReceiveService(uint8_t* inBytes, int numBytes)
{
    22bc:	cf 93       	push	r28
    22be:	df 93       	push	r29
    22c0:	9c 01       	movw	r18, r24
    22c2:	cb 01       	movw	r24, r22
  // don't bother if user hasn't registered a callback
  if(!user_onReceive){
    22c4:	e0 91 b3 03 	lds	r30, 0x03B3
    22c8:	f0 91 b4 03 	lds	r31, 0x03B4
    22cc:	30 97       	sbiw	r30, 0x00	; 0
    22ce:	d9 f0       	breq	.+54     	; 0x2306 <_ZN7TwoWire16onReceiveServiceEPhi+0x4a>
    return;
  }
  // don't bother if rx buffer is in use by a master requestFrom() op
  // i know this drops data, but it allows for slight stupidity
  // meaning, they may not have read all the master requestFrom() data yet
  if(rxBufferIndex < rxBufferLength){
    22d0:	50 91 8b 03 	lds	r21, 0x038B
    22d4:	40 91 8c 03 	lds	r20, 0x038C
    22d8:	54 17       	cp	r21, r20
    22da:	a8 f0       	brcs	.+42     	; 0x2306 <_ZN7TwoWire16onReceiveServiceEPhi+0x4a>
    22dc:	40 e0       	ldi	r20, 0x00	; 0
    22de:	09 c0       	rjmp	.+18     	; 0x22f2 <_ZN7TwoWire16onReceiveServiceEPhi+0x36>
    return;
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
    rxBuffer[i] = inBytes[i];    
    22e0:	db 01       	movw	r26, r22
    22e2:	a5 59       	subi	r26, 0x95	; 149
    22e4:	bc 4f       	sbci	r27, 0xFC	; 252
    22e6:	62 0f       	add	r22, r18
    22e8:	73 1f       	adc	r23, r19
    22ea:	eb 01       	movw	r28, r22
    22ec:	58 81       	ld	r21, Y
    22ee:	5c 93       	st	X, r21
  if(rxBufferIndex < rxBufferLength){
    return;
  }
  // copy twi rx buffer into local read buffer
  // this enables new reads to happen in parallel
  for(uint8_t i = 0; i < numBytes; ++i){
    22f0:	4f 5f       	subi	r20, 0xFF	; 255
    22f2:	64 2f       	mov	r22, r20
    22f4:	70 e0       	ldi	r23, 0x00	; 0
    22f6:	68 17       	cp	r22, r24
    22f8:	79 07       	cpc	r23, r25
    22fa:	94 f3       	brlt	.-28     	; 0x22e0 <_ZN7TwoWire16onReceiveServiceEPhi+0x24>
    rxBuffer[i] = inBytes[i];    
  }
  // set rx iterator vars
  rxBufferIndex = 0;
    22fc:	10 92 8b 03 	sts	0x038B, r1
  rxBufferLength = numBytes;
    2300:	80 93 8c 03 	sts	0x038C, r24
  // alert user program
  user_onReceive(numBytes);
    2304:	09 95       	icall
}
    2306:	df 91       	pop	r29
    2308:	cf 91       	pop	r28
    230a:	08 95       	ret

0000230c <_ZN7TwoWire16onRequestServiceEv>:

// behind the scenes function that is called when data is requested
void TwoWire::onRequestService(void)
{
  // don't bother if user hasn't registered a callback
  if(!user_onRequest){
    230c:	e0 91 b1 03 	lds	r30, 0x03B1
    2310:	f0 91 b2 03 	lds	r31, 0x03B2
    2314:	30 97       	sbiw	r30, 0x00	; 0
    2316:	29 f0       	breq	.+10     	; 0x2322 <_ZN7TwoWire16onRequestServiceEv+0x16>
    return;
  }
  // reset tx buffer iterator vars
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
    2318:	10 92 ae 03 	sts	0x03AE, r1
  txBufferLength = 0;
    231c:	10 92 af 03 	sts	0x03AF, r1
  // alert user program
  user_onRequest();
    2320:	09 95       	icall
    2322:	08 95       	ret

00002324 <_ZN7TwoWire9onReceiveEPFviE>:
}

// sets function called on slave write
void TwoWire::onReceive( void (*function)(int) )
{
  user_onReceive = function;
    2324:	70 93 b4 03 	sts	0x03B4, r23
    2328:	60 93 b3 03 	sts	0x03B3, r22
}
    232c:	08 95       	ret

0000232e <_ZN7TwoWire9onRequestEPFvvE>:

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    232e:	70 93 b2 03 	sts	0x03B2, r23
    2332:	60 93 b1 03 	sts	0x03B1, r22
}
    2336:	08 95       	ret

00002338 <_ZN7TwoWire4sendEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
void TwoWire::send(uint8_t data)
{
    2338:	df 93       	push	r29
    233a:	cf 93       	push	r28
    233c:	0f 92       	push	r0
    233e:	cd b7       	in	r28, 0x3d	; 61
    2340:	de b7       	in	r29, 0x3e	; 62
    2342:	69 83       	std	Y+1, r22	; 0x01
  if(transmitting){
    2344:	80 91 b0 03 	lds	r24, 0x03B0
    2348:	88 23       	and	r24, r24
    234a:	89 f0       	breq	.+34     	; 0x236e <_ZN7TwoWire4sendEh+0x36>
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
    234c:	80 91 af 03 	lds	r24, 0x03AF
    2350:	80 32       	cpi	r24, 0x20	; 32
    2352:	90 f4       	brcc	.+36     	; 0x2378 <_ZN7TwoWire4sendEh+0x40>
      return;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    2354:	80 91 ae 03 	lds	r24, 0x03AE
    2358:	e8 2f       	mov	r30, r24
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	e2 57       	subi	r30, 0x72	; 114
    235e:	fc 4f       	sbci	r31, 0xFC	; 252
    2360:	60 83       	st	Z, r22
    ++txBufferIndex;
    2362:	8f 5f       	subi	r24, 0xFF	; 255
    2364:	80 93 ae 03 	sts	0x03AE, r24
    // update amount in buffer   
    txBufferLength = txBufferIndex;
    2368:	80 93 af 03 	sts	0x03AF, r24
    236c:	05 c0       	rjmp	.+10     	; 0x2378 <_ZN7TwoWire4sendEh+0x40>
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    236e:	ce 01       	movw	r24, r28
    2370:	01 96       	adiw	r24, 0x01	; 1
    2372:	61 e0       	ldi	r22, 0x01	; 1
    2374:	0e 94 92 02 	call	0x524	; 0x524 <twi_transmit>
  }
}
    2378:	0f 90       	pop	r0
    237a:	cf 91       	pop	r28
    237c:	df 91       	pop	r29
    237e:	08 95       	ret

00002380 <_ZN7TwoWire4sendEi>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
void TwoWire::send(int data)
{
  send((uint8_t)data);
    2380:	0e 94 9c 11 	call	0x2338	; 0x2338 <_ZN7TwoWire4sendEh>
}
    2384:	08 95       	ret

00002386 <_ZN7TwoWire4sendEPhh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
void TwoWire::send(uint8_t* data, uint8_t quantity)
{
    2386:	cf 92       	push	r12
    2388:	df 92       	push	r13
    238a:	ef 92       	push	r14
    238c:	ff 92       	push	r15
    238e:	1f 93       	push	r17
    2390:	df 93       	push	r29
    2392:	cf 93       	push	r28
    2394:	0f 92       	push	r0
    2396:	cd b7       	in	r28, 0x3d	; 61
    2398:	de b7       	in	r29, 0x3e	; 62
    239a:	6c 01       	movw	r12, r24
    239c:	16 2f       	mov	r17, r22
    239e:	97 2f       	mov	r25, r23
  if(transmitting){
    23a0:	80 91 b0 03 	lds	r24, 0x03B0
    23a4:	88 23       	and	r24, r24
    23a6:	81 f0       	breq	.+32     	; 0x23c8 <_ZN7TwoWire4sendEPhh+0x42>
    23a8:	e6 2e       	mov	r14, r22
    23aa:	f7 2e       	mov	r15, r23
    23ac:	08 c0       	rjmp	.+16     	; 0x23be <_ZN7TwoWire4sendEPhh+0x38>
  // in master transmitter mode
    for(uint8_t i = 0; i < quantity; ++i){
      send(data[i]);
    23ae:	c6 01       	movw	r24, r12
    23b0:	f7 01       	movw	r30, r14
    23b2:	61 91       	ld	r22, Z+
    23b4:	7f 01       	movw	r14, r30
    23b6:	49 83       	std	Y+1, r20	; 0x01
    23b8:	0e 94 9c 11 	call	0x2338	; 0x2338 <_ZN7TwoWire4sendEh>
    23bc:	49 81       	ldd	r20, Y+1	; 0x01
// or after beginTransmission(address)
void TwoWire::send(uint8_t* data, uint8_t quantity)
{
  if(transmitting){
  // in master transmitter mode
    for(uint8_t i = 0; i < quantity; ++i){
    23be:	8e 2d       	mov	r24, r14
    23c0:	81 1b       	sub	r24, r17
    23c2:	84 17       	cp	r24, r20
    23c4:	a0 f3       	brcs	.-24     	; 0x23ae <_ZN7TwoWire4sendEPhh+0x28>
    23c6:	04 c0       	rjmp	.+8      	; 0x23d0 <_ZN7TwoWire4sendEPhh+0x4a>
      send(data[i]);
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
    23c8:	86 2f       	mov	r24, r22
    23ca:	64 2f       	mov	r22, r20
    23cc:	0e 94 92 02 	call	0x524	; 0x524 <twi_transmit>
  }
}
    23d0:	0f 90       	pop	r0
    23d2:	cf 91       	pop	r28
    23d4:	df 91       	pop	r29
    23d6:	1f 91       	pop	r17
    23d8:	ff 90       	pop	r15
    23da:	ef 90       	pop	r14
    23dc:	df 90       	pop	r13
    23de:	cf 90       	pop	r12
    23e0:	08 95       	ret

000023e2 <_ZN7TwoWire4sendEPc>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
void TwoWire::send(char* data)
{
  send((uint8_t*)data, strlen(data));
    23e2:	db 01       	movw	r26, r22
    23e4:	0d 90       	ld	r0, X+
    23e6:	00 20       	and	r0, r0
    23e8:	e9 f7       	brne	.-6      	; 0x23e4 <_ZN7TwoWire4sendEPc+0x2>
    23ea:	ad 01       	movw	r20, r26
    23ec:	41 50       	subi	r20, 0x01	; 1
    23ee:	50 40       	sbci	r21, 0x00	; 0
    23f0:	46 1b       	sub	r20, r22
    23f2:	57 0b       	sbc	r21, r23
    23f4:	0e 94 c3 11 	call	0x2386	; 0x2386 <_ZN7TwoWire4sendEPhh>
}
    23f8:	08 95       	ret

000023fa <_ZN7TwoWire15endTransmissionEv>:
}

uint8_t TwoWire::endTransmission(void)
{
  // transmit buffer (blocking)
  int8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1);
    23fa:	80 91 8d 03 	lds	r24, 0x038D
    23fe:	6e e8       	ldi	r22, 0x8E	; 142
    2400:	73 e0       	ldi	r23, 0x03	; 3
    2402:	40 91 af 03 	lds	r20, 0x03AF
    2406:	21 e0       	ldi	r18, 0x01	; 1
    2408:	0e 94 51 02 	call	0x4a2	; 0x4a2 <twi_writeTo>
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    240c:	10 92 ae 03 	sts	0x03AE, r1
  txBufferLength = 0;
    2410:	10 92 af 03 	sts	0x03AF, r1
  // indicate that we are done transmitting
  transmitting = 0;
    2414:	10 92 b0 03 	sts	0x03B0, r1
  return ret;
}
    2418:	08 95       	ret

0000241a <_ZN7TwoWire11requestFromEhh>:
{
  begin((uint8_t)address);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
    241a:	86 2f       	mov	r24, r22
  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
    quantity = BUFFER_LENGTH;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity);
    241c:	41 32       	cpi	r20, 0x21	; 33
    241e:	08 f0       	brcs	.+2      	; 0x2422 <_ZN7TwoWire11requestFromEhh+0x8>
    2420:	40 e2       	ldi	r20, 0x20	; 32
    2422:	6b e6       	ldi	r22, 0x6B	; 107
    2424:	73 e0       	ldi	r23, 0x03	; 3
    2426:	0e 94 1c 02 	call	0x438	; 0x438 <twi_readFrom>
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    242a:	10 92 8b 03 	sts	0x038B, r1
  rxBufferLength = read;
    242e:	80 93 8c 03 	sts	0x038C, r24

  return read;
}
    2432:	08 95       	ret

00002434 <_ZN7TwoWire11requestFromEii>:

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity);
    2434:	0e 94 0d 12 	call	0x241a	; 0x241a <_ZN7TwoWire11requestFromEhh>
}
    2438:	08 95       	ret

0000243a <_ZN7TwoWire5beginEv>:

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
    243a:	10 92 8b 03 	sts	0x038B, r1
  rxBufferLength = 0;
    243e:	10 92 8c 03 	sts	0x038C, r1

  txBufferIndex = 0;
    2442:	10 92 ae 03 	sts	0x03AE, r1
  txBufferLength = 0;
    2446:	10 92 af 03 	sts	0x03AF, r1

  twi_init();
    244a:	0e 94 05 02 	call	0x40a	; 0x40a <twi_init>
}
    244e:	08 95       	ret

00002450 <_ZN7TwoWire5beginEh>:

void TwoWire::begin(uint8_t address)
{
    2450:	cf 93       	push	r28
    2452:	df 93       	push	r29
    2454:	ec 01       	movw	r28, r24
    2456:	86 2f       	mov	r24, r22
  twi_setAddress(address);
    2458:	0e 94 18 02 	call	0x430	; 0x430 <twi_setAddress>
  twi_attachSlaveTxEvent(onRequestService);
    245c:	86 e8       	ldi	r24, 0x86	; 134
    245e:	91 e1       	ldi	r25, 0x11	; 17
    2460:	0e 94 b1 02 	call	0x562	; 0x562 <twi_attachSlaveTxEvent>
  twi_attachSlaveRxEvent(onReceiveService);
    2464:	8e e5       	ldi	r24, 0x5E	; 94
    2466:	91 e1       	ldi	r25, 0x11	; 17
    2468:	0e 94 ac 02 	call	0x558	; 0x558 <twi_attachSlaveRxEvent>
  begin();
    246c:	ce 01       	movw	r24, r28
    246e:	0e 94 1d 12 	call	0x243a	; 0x243a <_ZN7TwoWire5beginEv>
}
    2472:	df 91       	pop	r29
    2474:	cf 91       	pop	r28
    2476:	08 95       	ret

00002478 <_ZN7TwoWire5beginEi>:

void TwoWire::begin(int address)
{
  begin((uint8_t)address);
    2478:	0e 94 28 12 	call	0x2450	; 0x2450 <_ZN7TwoWire5beginEh>
}
    247c:	08 95       	ret

0000247e <_GLOBAL__I_compass>:

#include "missiontasks.h"

// objects that are used throught the program
// compass for heading
HMC6352compass compass;
    247e:	85 eb       	ldi	r24, 0xB5	; 181
    2480:	93 e0       	ldi	r25, 0x03	; 3
    2482:	0e 94 96 18 	call	0x312c	; 0x312c <_ZN14HMC6352compassC1Ev>
// motor control
AF_DCMotor motor_l(3, MOTOR12_64KHZ);
    2486:	89 eb       	ldi	r24, 0xB9	; 185
    2488:	93 e0       	ldi	r25, 0x03	; 3
    248a:	63 e0       	ldi	r22, 0x03	; 3
    248c:	41 e0       	ldi	r20, 0x01	; 1
    248e:	0e 94 12 0b 	call	0x1624	; 0x1624 <_ZN10AF_DCMotorC1Ehh>
AF_DCMotor motor_r(4, MOTOR12_64KHZ);
    2492:	8b eb       	ldi	r24, 0xBB	; 187
    2494:	93 e0       	ldi	r25, 0x03	; 3
    2496:	64 e0       	ldi	r22, 0x04	; 4
    2498:	41 e0       	ldi	r20, 0x01	; 1
    249a:	0e 94 12 0b 	call	0x1624	; 0x1624 <_ZN10AF_DCMotorC1Ehh>
AF_Stepper motor_s(200, 1);
    249e:	8d eb       	ldi	r24, 0xBD	; 189
    24a0:	93 e0       	ldi	r25, 0x03	; 3
    24a2:	68 ec       	ldi	r22, 0xC8	; 200
    24a4:	70 e0       	ldi	r23, 0x00	; 0
    24a6:	41 e0       	ldi	r20, 0x01	; 1
    24a8:	0e 94 ba 0b 	call	0x1774	; 0x1774 <_ZN10AF_StepperC1Ejh>
		goStraight(heading);
		delay(2000);
		goStraight(heading, 1);
		delay(2000);
	}
}
    24ac:	08 95       	ret

000024ae <loop>:
uint16_t angle_map[5];
uint8_t new_dist = 0;
uint16_t new_angle = 0;

void loop (void)
{
    24ae:	0f 93       	push	r16
    24b0:	1f 93       	push	r17
	// make the no object map
	scanEnvironment(room_map1, 200);
    24b2:	80 ed       	ldi	r24, 0xD0	; 208
    24b4:	93 e0       	ldi	r25, 0x03	; 3
    24b6:	68 ec       	ldi	r22, 0xC8	; 200
    24b8:	0e 94 bb 14 	call	0x2976	; 0x2976 <_Z15scanEnvironmentPhh>
	// put up the obsticles
	delay(5000);
    24bc:	68 e8       	ldi	r22, 0x88	; 136
    24be:	73 e1       	ldi	r23, 0x13	; 19
    24c0:	80 e0       	ldi	r24, 0x00	; 0
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	0e 94 52 05 	call	0xaa4	; 0xaa4 <delay>
	// make the object map
	scanEnvironment(room_map2, 200);
    24c8:	88 e9       	ldi	r24, 0x98	; 152
    24ca:	94 e0       	ldi	r25, 0x04	; 4
    24cc:	68 ec       	ldi	r22, 0xC8	; 200
    24ce:	0e 94 bb 14 	call	0x2976	; 0x2976 <_Z15scanEnvironmentPhh>
	// create a game plan
	analyzeRoom(room_map1, room_map2, dist_map, angle_map);
    24d2:	80 ed       	ldi	r24, 0xD0	; 208
    24d4:	93 e0       	ldi	r25, 0x03	; 3
    24d6:	68 e9       	ldi	r22, 0x98	; 152
    24d8:	74 e0       	ldi	r23, 0x04	; 4
    24da:	40 e6       	ldi	r20, 0x60	; 96
    24dc:	55 e0       	ldi	r21, 0x05	; 5
    24de:	25 e6       	ldi	r18, 0x65	; 101
    24e0:	35 e0       	ldi	r19, 0x05	; 5
    24e2:	0e 94 a8 13 	call	0x2750	; 0x2750 <_Z11analyzeRoomPhS_S_Pj>
	// get the current heading
	heading = compass.getHeading();
    24e6:	85 eb       	ldi	r24, 0xB5	; 181
    24e8:	93 e0       	ldi	r25, 0x03	; 3
    24ea:	0e 94 53 18 	call	0x30a6	; 0x30a6 <_ZN14HMC6352compass10getHeadingEv>
    24ee:	90 93 ca 03 	sts	0x03CA, r25
    24f2:	80 93 c9 03 	sts	0x03C9, r24
	// turn to the first object
/* OBJECT #1 */
	fineTuneMJ(dist_map[0], (heading+angle_map[0]));
    24f6:	60 91 65 05 	lds	r22, 0x0565
    24fa:	70 91 66 05 	lds	r23, 0x0566
    24fe:	68 0f       	add	r22, r24
    2500:	79 1f       	adc	r23, r25
    2502:	80 91 60 05 	lds	r24, 0x0560
    2506:	0e 94 5f 15 	call	0x2abe	; 0x2abe <_Z10fineTuneMJhj>
	// get our current heading
	heading = compass.getHeading();
    250a:	85 eb       	ldi	r24, 0xB5	; 181
    250c:	93 e0       	ldi	r25, 0x03	; 3
    250e:	0e 94 53 18 	call	0x30a6	; 0x30a6 <_ZN14HMC6352compass10getHeadingEv>
    2512:	90 93 ca 03 	sts	0x03CA, r25
    2516:	80 93 c9 03 	sts	0x03C9, r24
	// go to it
	while (irDistance_new(MEDIUM_RANGE_IR_PIN) > 23){
    251a:	07 c0       	rjmp	.+14     	; 0x252a <loop+0x7c>
		goStraight(heading);
    251c:	80 91 c9 03 	lds	r24, 0x03C9
    2520:	90 91 ca 03 	lds	r25, 0x03CA
    2524:	60 e0       	ldi	r22, 0x00	; 0
    2526:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <_Z10goStraightjb>
/* OBJECT #1 */
	fineTuneMJ(dist_map[0], (heading+angle_map[0]));
	// get our current heading
	heading = compass.getHeading();
	// go to it
	while (irDistance_new(MEDIUM_RANGE_IR_PIN) > 23){
    252a:	83 e0       	ldi	r24, 0x03	; 3
    252c:	0e 94 a1 14 	call	0x2942	; 0x2942 <_Z14irDistance_newh>
    2530:	88 31       	cpi	r24, 0x18	; 24
    2532:	91 05       	cpc	r25, r1
    2534:	98 f7       	brcc	.-26     	; 0x251c <loop+0x6e>
		goStraight(heading);
	}
	stopRobot();
    2536:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <_Z9stopRobotv>
	// calculate the second angle and distance
	findPlaqueDistanceAngle(dist_map, angle_map, 2, new_dist, new_angle);
    253a:	80 e6       	ldi	r24, 0x60	; 96
    253c:	95 e0       	ldi	r25, 0x05	; 5
    253e:	65 e6       	ldi	r22, 0x65	; 101
    2540:	75 e0       	ldi	r23, 0x05	; 5
    2542:	42 e0       	ldi	r20, 0x02	; 2
    2544:	2f e6       	ldi	r18, 0x6F	; 111
    2546:	35 e0       	ldi	r19, 0x05	; 5
    2548:	00 e7       	ldi	r16, 0x70	; 112
    254a:	15 e0       	ldi	r17, 0x05	; 5
    254c:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <_Z23findPlaqueDistanceAnglePhPjhRhRj>
	// get our current heading
	heading = compass.getHeading();
    2550:	85 eb       	ldi	r24, 0xB5	; 181
    2552:	93 e0       	ldi	r25, 0x03	; 3
    2554:	0e 94 53 18 	call	0x30a6	; 0x30a6 <_ZN14HMC6352compass10getHeadingEv>
    2558:	9c 01       	movw	r18, r24
    255a:	90 93 ca 03 	sts	0x03CA, r25
    255e:	80 93 c9 03 	sts	0x03C9, r24
	// turn to the second plaque
/* OBJECT #2 */
	fineTuneMJ(constrain(new_dist, 60, 100), (new_angle+heading));
    2562:	80 91 6f 05 	lds	r24, 0x056F
    2566:	8c 33       	cpi	r24, 0x3C	; 60
    2568:	10 f4       	brcc	.+4      	; 0x256e <loop+0xc0>
    256a:	8c e3       	ldi	r24, 0x3C	; 60
    256c:	03 c0       	rjmp	.+6      	; 0x2574 <loop+0xc6>
    256e:	85 36       	cpi	r24, 0x65	; 101
    2570:	08 f0       	brcs	.+2      	; 0x2574 <loop+0xc6>
    2572:	84 e6       	ldi	r24, 0x64	; 100
    2574:	60 91 70 05 	lds	r22, 0x0570
    2578:	70 91 71 05 	lds	r23, 0x0571
    257c:	62 0f       	add	r22, r18
    257e:	73 1f       	adc	r23, r19
    2580:	0e 94 5f 15 	call	0x2abe	; 0x2abe <_Z10fineTuneMJhj>
	// get the heading to the next object
	heading = compass.getHeading();
    2584:	85 eb       	ldi	r24, 0xB5	; 181
    2586:	93 e0       	ldi	r25, 0x03	; 3
    2588:	0e 94 53 18 	call	0x30a6	; 0x30a6 <_ZN14HMC6352compass10getHeadingEv>
    258c:	90 93 ca 03 	sts	0x03CA, r25
    2590:	80 93 c9 03 	sts	0x03C9, r24
	// go to the next object
	while(irDistance_new(MEDIUM_RANGE_IR_PIN) > 23){
    2594:	07 c0       	rjmp	.+14     	; 0x25a4 <loop+0xf6>
		goStraight(heading);
    2596:	80 91 c9 03 	lds	r24, 0x03C9
    259a:	90 91 ca 03 	lds	r25, 0x03CA
    259e:	60 e0       	ldi	r22, 0x00	; 0
    25a0:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <_Z10goStraightjb>
/* OBJECT #2 */
	fineTuneMJ(constrain(new_dist, 60, 100), (new_angle+heading));
	// get the heading to the next object
	heading = compass.getHeading();
	// go to the next object
	while(irDistance_new(MEDIUM_RANGE_IR_PIN) > 23){
    25a4:	83 e0       	ldi	r24, 0x03	; 3
    25a6:	0e 94 a1 14 	call	0x2942	; 0x2942 <_Z14irDistance_newh>
    25aa:	88 31       	cpi	r24, 0x18	; 24
    25ac:	91 05       	cpc	r25, r1
    25ae:	98 f7       	brcc	.-26     	; 0x2596 <loop+0xe8>
		goStraight(heading);
	}
	// wait there
	stopRobot();
    25b0:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <_Z9stopRobotv>
	// find the third plaque angle and distance
	findPlaqueDistanceAngle(dist_map, angle_map, 3, new_dist, new_angle);
    25b4:	80 e6       	ldi	r24, 0x60	; 96
    25b6:	95 e0       	ldi	r25, 0x05	; 5
    25b8:	65 e6       	ldi	r22, 0x65	; 101
    25ba:	75 e0       	ldi	r23, 0x05	; 5
    25bc:	43 e0       	ldi	r20, 0x03	; 3
    25be:	2f e6       	ldi	r18, 0x6F	; 111
    25c0:	35 e0       	ldi	r19, 0x05	; 5
    25c2:	00 e7       	ldi	r16, 0x70	; 112
    25c4:	15 e0       	ldi	r17, 0x05	; 5
    25c6:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <_Z23findPlaqueDistanceAnglePhPjhRhRj>
	// get the current heading
	heading = compass.getHeading();
    25ca:	85 eb       	ldi	r24, 0xB5	; 181
    25cc:	93 e0       	ldi	r25, 0x03	; 3
    25ce:	0e 94 53 18 	call	0x30a6	; 0x30a6 <_ZN14HMC6352compass10getHeadingEv>
    25d2:	9c 01       	movw	r18, r24
    25d4:	90 93 ca 03 	sts	0x03CA, r25
    25d8:	80 93 c9 03 	sts	0x03C9, r24
	// turn to the plaque
/* OBJECT #3 */
	fineTuneMJ(constrain(new_dist, 60, 100), (new_angle+heading));
    25dc:	80 91 6f 05 	lds	r24, 0x056F
    25e0:	8c 33       	cpi	r24, 0x3C	; 60
    25e2:	10 f4       	brcc	.+4      	; 0x25e8 <loop+0x13a>
    25e4:	8c e3       	ldi	r24, 0x3C	; 60
    25e6:	03 c0       	rjmp	.+6      	; 0x25ee <loop+0x140>
    25e8:	85 36       	cpi	r24, 0x65	; 101
    25ea:	08 f0       	brcs	.+2      	; 0x25ee <loop+0x140>
    25ec:	84 e6       	ldi	r24, 0x64	; 100
    25ee:	60 91 70 05 	lds	r22, 0x0570
    25f2:	70 91 71 05 	lds	r23, 0x0571
    25f6:	62 0f       	add	r22, r18
    25f8:	73 1f       	adc	r23, r19
    25fa:	0e 94 5f 15 	call	0x2abe	; 0x2abe <_Z10fineTuneMJhj>
	// get the current heading
	heading = compass.getHeading();
    25fe:	85 eb       	ldi	r24, 0xB5	; 181
    2600:	93 e0       	ldi	r25, 0x03	; 3
    2602:	0e 94 53 18 	call	0x30a6	; 0x30a6 <_ZN14HMC6352compass10getHeadingEv>
    2606:	90 93 ca 03 	sts	0x03CA, r25
    260a:	80 93 c9 03 	sts	0x03C9, r24
	while(irDistance_new(MEDIUM_RANGE_IR_PIN) > 30){
    260e:	07 c0       	rjmp	.+14     	; 0x261e <loop+0x170>
		goStraight(heading);
    2610:	80 91 c9 03 	lds	r24, 0x03C9
    2614:	90 91 ca 03 	lds	r25, 0x03CA
    2618:	60 e0       	ldi	r22, 0x00	; 0
    261a:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <_Z10goStraightjb>
	// turn to the plaque
/* OBJECT #3 */
	fineTuneMJ(constrain(new_dist, 60, 100), (new_angle+heading));
	// get the current heading
	heading = compass.getHeading();
	while(irDistance_new(MEDIUM_RANGE_IR_PIN) > 30){
    261e:	83 e0       	ldi	r24, 0x03	; 3
    2620:	0e 94 a1 14 	call	0x2942	; 0x2942 <_Z14irDistance_newh>
    2624:	8f 31       	cpi	r24, 0x1F	; 31
    2626:	91 05       	cpc	r25, r1
    2628:	98 f7       	brcc	.-26     	; 0x2610 <loop+0x162>
		goStraight(heading);
	}
	// wait here
	stopRobot();
    262a:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <_Z9stopRobotv>
	// find the fourth plaque angle and distance
	findPlaqueDistanceAngle(dist_map, angle_map, 4, new_dist, new_angle);
    262e:	80 e6       	ldi	r24, 0x60	; 96
    2630:	95 e0       	ldi	r25, 0x05	; 5
    2632:	65 e6       	ldi	r22, 0x65	; 101
    2634:	75 e0       	ldi	r23, 0x05	; 5
    2636:	44 e0       	ldi	r20, 0x04	; 4
    2638:	2f e6       	ldi	r18, 0x6F	; 111
    263a:	35 e0       	ldi	r19, 0x05	; 5
    263c:	00 e7       	ldi	r16, 0x70	; 112
    263e:	15 e0       	ldi	r17, 0x05	; 5
    2640:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <_Z23findPlaqueDistanceAnglePhPjhRhRj>
	// get the current heading
	heading = compass.getHeading();
    2644:	85 eb       	ldi	r24, 0xB5	; 181
    2646:	93 e0       	ldi	r25, 0x03	; 3
    2648:	0e 94 53 18 	call	0x30a6	; 0x30a6 <_ZN14HMC6352compass10getHeadingEv>
    264c:	9c 01       	movw	r18, r24
    264e:	90 93 ca 03 	sts	0x03CA, r25
    2652:	80 93 c9 03 	sts	0x03C9, r24
	// turn to the plaque
/* OBJECT #4 */	
	fineTuneMJ(constrain(new_dist, 60, 100), (new_angle+heading));
    2656:	80 91 6f 05 	lds	r24, 0x056F
    265a:	8c 33       	cpi	r24, 0x3C	; 60
    265c:	10 f4       	brcc	.+4      	; 0x2662 <loop+0x1b4>
    265e:	8c e3       	ldi	r24, 0x3C	; 60
    2660:	03 c0       	rjmp	.+6      	; 0x2668 <loop+0x1ba>
    2662:	85 36       	cpi	r24, 0x65	; 101
    2664:	08 f0       	brcs	.+2      	; 0x2668 <loop+0x1ba>
    2666:	84 e6       	ldi	r24, 0x64	; 100
    2668:	60 91 70 05 	lds	r22, 0x0570
    266c:	70 91 71 05 	lds	r23, 0x0571
    2670:	62 0f       	add	r22, r18
    2672:	73 1f       	adc	r23, r19
    2674:	0e 94 5f 15 	call	0x2abe	; 0x2abe <_Z10fineTuneMJhj>
	// get the current heading
	heading = compass.getHeading();
    2678:	85 eb       	ldi	r24, 0xB5	; 181
    267a:	93 e0       	ldi	r25, 0x03	; 3
    267c:	0e 94 53 18 	call	0x30a6	; 0x30a6 <_ZN14HMC6352compass10getHeadingEv>
    2680:	90 93 ca 03 	sts	0x03CA, r25
    2684:	80 93 c9 03 	sts	0x03C9, r24
	while(irDistance_new(MEDIUM_RANGE_IR_PIN) > 30){
    2688:	07 c0       	rjmp	.+14     	; 0x2698 <loop+0x1ea>
		goStraight(heading);
    268a:	80 91 c9 03 	lds	r24, 0x03C9
    268e:	90 91 ca 03 	lds	r25, 0x03CA
    2692:	60 e0       	ldi	r22, 0x00	; 0
    2694:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <_Z10goStraightjb>
	// turn to the plaque
/* OBJECT #4 */	
	fineTuneMJ(constrain(new_dist, 60, 100), (new_angle+heading));
	// get the current heading
	heading = compass.getHeading();
	while(irDistance_new(MEDIUM_RANGE_IR_PIN) > 30){
    2698:	83 e0       	ldi	r24, 0x03	; 3
    269a:	0e 94 a1 14 	call	0x2942	; 0x2942 <_Z14irDistance_newh>
    269e:	8f 31       	cpi	r24, 0x1F	; 31
    26a0:	91 05       	cpc	r25, r1
    26a2:	98 f7       	brcc	.-26     	; 0x268a <loop+0x1dc>
		goStraight(heading);
	}
	stopRobot();
    26a4:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <_Z9stopRobotv>
	heading = compass.getHeading();
    26a8:	85 eb       	ldi	r24, 0xB5	; 181
    26aa:	93 e0       	ldi	r25, 0x03	; 3
    26ac:	0e 94 53 18 	call	0x30a6	; 0x30a6 <_ZN14HMC6352compass10getHeadingEv>
    26b0:	90 93 ca 03 	sts	0x03CA, r25
    26b4:	80 93 c9 03 	sts	0x03C9, r24
	// victory dance
	while(1){
		goStraight(heading);
    26b8:	80 91 c9 03 	lds	r24, 0x03C9
    26bc:	90 91 ca 03 	lds	r25, 0x03CA
    26c0:	60 e0       	ldi	r22, 0x00	; 0
    26c2:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <_Z10goStraightjb>
		delay(2000);
    26c6:	60 ed       	ldi	r22, 0xD0	; 208
    26c8:	77 e0       	ldi	r23, 0x07	; 7
    26ca:	80 e0       	ldi	r24, 0x00	; 0
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	0e 94 52 05 	call	0xaa4	; 0xaa4 <delay>
		goStraight(heading, 1);
    26d2:	80 91 c9 03 	lds	r24, 0x03C9
    26d6:	90 91 ca 03 	lds	r25, 0x03CA
    26da:	61 e0       	ldi	r22, 0x01	; 1
    26dc:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <_Z10goStraightjb>
		delay(2000);
    26e0:	60 ed       	ldi	r22, 0xD0	; 208
    26e2:	77 e0       	ldi	r23, 0x07	; 7
    26e4:	80 e0       	ldi	r24, 0x00	; 0
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	0e 94 52 05 	call	0xaa4	; 0xaa4 <delay>
    26ec:	e5 cf       	rjmp	.-54     	; 0x26b8 <loop+0x20a>

000026ee <setup>:
bool dir = 0;
char* print;
void setup (void)
{
	//! sets the led pin as a digital output
	pinMode(ONBOARD_LED_PIN, OUTPUT);
    26ee:	8d e0       	ldi	r24, 0x0D	; 13
    26f0:	61 e0       	ldi	r22, 0x01	; 1
    26f2:	0e 94 42 06 	call	0xc84	; 0xc84 <pinMode>
	//! make sure the analog pins are inputs and select the A_REF for reference
	pinMode(LONG_RANGE_IR_PIN, INPUT);
    26f6:	82 e0       	ldi	r24, 0x02	; 2
    26f8:	60 e0       	ldi	r22, 0x00	; 0
    26fa:	0e 94 42 06 	call	0xc84	; 0xc84 <pinMode>
	pinMode(MEDIUM_RANGE_IR_PIN, INPUT);
    26fe:	83 e0       	ldi	r24, 0x03	; 3
    2700:	60 e0       	ldi	r22, 0x00	; 0
    2702:	0e 94 42 06 	call	0xc84	; 0xc84 <pinMode>
	analogReference(EXTERNAL);
    2706:	80 e0       	ldi	r24, 0x00	; 0
    2708:	0e 94 be 05 	call	0xb7c	; 0xb7c <analogReference>
	// activate the stepper motors to lock the position of the scan platform
	adjustScanPlatform(1,1);
    270c:	81 e0       	ldi	r24, 0x01	; 1
    270e:	61 e0       	ldi	r22, 0x01	; 1
    2710:	0e 94 1e 14 	call	0x283c	; 0x283c <_Z18adjustScanPlatformhh>
	adjustScanPlatform(0,1);
    2714:	80 e0       	ldi	r24, 0x00	; 0
    2716:	61 e0       	ldi	r22, 0x01	; 1
    2718:	0e 94 1e 14 	call	0x283c	; 0x283c <_Z18adjustScanPlatformhh>
	// get the powered up heading
	print = (char*)calloc(64, 0);
    271c:	80 e4       	ldi	r24, 0x40	; 64
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	60 e0       	ldi	r22, 0x00	; 0
    2722:	70 e0       	ldi	r23, 0x00	; 0
    2724:	0e 94 a0 23 	call	0x4740	; 0x4740 <calloc>
    2728:	80 93 ce 03 	sts	0x03CE, r24
    272c:	90 93 cf 03 	sts	0x03CF, r25
	Serial.begin(57600);
    2730:	83 e4       	ldi	r24, 0x43	; 67
    2732:	93 e0       	ldi	r25, 0x03	; 3
    2734:	40 e0       	ldi	r20, 0x00	; 0
    2736:	51 ee       	ldi	r21, 0xE1	; 225
    2738:	60 e0       	ldi	r22, 0x00	; 0
    273a:	70 e0       	ldi	r23, 0x00	; 0
    273c:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <_ZN14HardwareSerial5beginEl>
}
    2740:	08 95       	ret

00002742 <main>:

int main (void)
{
	//! This must be called first to configure
	//! routines that the core code relies on
	init();
    2742:	0e 94 83 05 	call	0xb06	; 0xb06 <init>

	//! This is can be any standard setup function
	//! from a previous Arduino.cc project
	setup();
    2746:	0e 94 77 13 	call	0x26ee	; 0x26ee <setup>

	while(1){
	
		//! This is the same loop from a previous 
		//! Arduino.cc project
		loop();
    274a:	0e 94 57 12 	call	0x24ae	; 0x24ae <loop>
    274e:	fd cf       	rjmp	.-6      	; 0x274a <main+0x8>

00002750 <_Z11analyzeRoomPhS_S_Pj>:

uint8_t ROOM_CONSECUTIVE_CNT = 4;
uint8_t ROOM_DIFFERENCE_AMOUNT = 15;

void analyzeRoom(uint8_t* map1, uint8_t* map2, uint8_t* dist_map, uint16_t* heading_map)
{
    2750:	af 92       	push	r10
    2752:	bf 92       	push	r11
    2754:	cf 92       	push	r12
    2756:	df 92       	push	r13
    2758:	ef 92       	push	r14
    275a:	ff 92       	push	r15
    275c:	0f 93       	push	r16
    275e:	1f 93       	push	r17
    2760:	cf 93       	push	r28
    2762:	df 93       	push	r29
    2764:	e9 01       	movw	r28, r18
    2766:	f2 2e       	mov	r15, r18
    2768:	e3 2e       	mov	r14, r19
    276a:	f9 01       	movw	r30, r18
    276c:	20 e0       	ldi	r18, 0x00	; 0
    276e:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t result = 0;
	uint8_t consecutive_cnt = 0;
	uint16_t result_cnt = 0;
	// clear the result map
	for (uint8_t index = 0; index < MAX_PLAQUE_CNT; index++){
		heading_map[index] = 0;
    2770:	11 92       	st	Z+, r1
    2772:	11 92       	st	Z+, r1
		dist_map[index] = 0;
    2774:	da 01       	movw	r26, r20
    2776:	a2 0f       	add	r26, r18
    2778:	b3 1f       	adc	r27, r19
    277a:	1c 92       	st	X, r1
    277c:	2f 5f       	subi	r18, 0xFF	; 255
    277e:	3f 4f       	sbci	r19, 0xFF	; 255
{
	uint16_t result = 0;
	uint8_t consecutive_cnt = 0;
	uint16_t result_cnt = 0;
	// clear the result map
	for (uint8_t index = 0; index < MAX_PLAQUE_CNT; index++){
    2780:	24 30       	cpi	r18, 0x04	; 4
    2782:	31 05       	cpc	r19, r1
    2784:	a9 f7       	brne	.-22     	; 0x2770 <_Z11analyzeRoomPhS_S_Pj+0x20>
    2786:	a0 e0       	ldi	r26, 0x00	; 0
    2788:	b0 e0       	ldi	r27, 0x00	; 0
    278a:	bb 24       	eor	r11, r11
    278c:	47 c0       	rjmp	.+142    	; 0x281c <_Z11analyzeRoomPhS_S_Pj+0xcc>
    278e:	30 e0       	ldi	r19, 0x00	; 0
		dist_map[index] = 0;
	}
	while (dist_map[(MAX_PLAQUE_CNT-1)] == 0){
		// look for the difference in the room
		for (uint8_t index = 0; index < 200; index++){
			result = map1[index] - map2[index];
    2790:	03 2f       	mov	r16, r19
    2792:	10 e0       	ldi	r17, 0x00	; 0
    2794:	6b 01       	movw	r12, r22
    2796:	c0 0e       	add	r12, r16
    2798:	d1 1e       	adc	r13, r17
    279a:	f6 01       	movw	r30, r12
    279c:	20 81       	ld	r18, Z
    279e:	08 0f       	add	r16, r24
    27a0:	19 1f       	adc	r17, r25
    27a2:	f8 01       	movw	r30, r16
    27a4:	00 81       	ld	r16, Z
    27a6:	10 e0       	ldi	r17, 0x00	; 0
    27a8:	02 1b       	sub	r16, r18
    27aa:	11 09       	sbc	r17, r1
    27ac:	c0 90 35 01 	lds	r12, 0x0135
    27b0:	dd 24       	eor	r13, r13
    27b2:	c0 16       	cp	r12, r16
    27b4:	d1 06       	cpc	r13, r17
    27b6:	c8 f4       	brcc	.+50     	; 0x27ea <_Z11analyzeRoomPhS_S_Pj+0x9a>
			result = abs(result);
			// look for large differences
			if (result > ROOM_DIFFERENCE_AMOUNT){
				// the amount of consecutive large differences indicated a plaque
				consecutive_cnt++;
    27b8:	b3 94       	inc	r11
				if ((consecutive_cnt == ROOM_CONSECUTIVE_CNT) && (result_cnt < MAX_PLAQUE_CNT)){
    27ba:	f0 91 34 01 	lds	r31, 0x0134
    27be:	bf 16       	cp	r11, r31
    27c0:	a9 f4       	brne	.+42     	; 0x27ec <_Z11analyzeRoomPhS_S_Pj+0x9c>
    27c2:	a4 30       	cpi	r26, 0x04	; 4
    27c4:	b1 05       	cpc	r27, r1
    27c6:	90 f4       	brcc	.+36     	; 0x27ec <_Z11analyzeRoomPhS_S_Pj+0x9c>
					// store the heading to this plaque (degrees * 10)
					dist_map[result_cnt] = map2[index];
    27c8:	fa 01       	movw	r30, r20
    27ca:	ea 0f       	add	r30, r26
    27cc:	fb 1f       	adc	r31, r27
    27ce:	20 83       	st	Z, r18
					heading_map[result_cnt] = index*18;
    27d0:	fd 01       	movw	r30, r26
    27d2:	ee 0f       	add	r30, r30
    27d4:	ff 1f       	adc	r31, r31
    27d6:	ec 0f       	add	r30, r28
    27d8:	fd 1f       	adc	r31, r29
    27da:	22 e1       	ldi	r18, 0x12	; 18
    27dc:	32 9f       	mul	r19, r18
    27de:	80 01       	movw	r16, r0
    27e0:	11 24       	eor	r1, r1
    27e2:	11 83       	std	Z+1, r17	; 0x01
    27e4:	00 83       	st	Z, r16
					// look for the max amount of plaques
					result_cnt++;
    27e6:	11 96       	adiw	r26, 0x01	; 1
					// dont get the same object twice
					index += 15;
    27e8:	31 5f       	subi	r19, 0xF1	; 241
    27ea:	bb 24       	eor	r11, r11
		heading_map[index] = 0;
		dist_map[index] = 0;
	}
	while (dist_map[(MAX_PLAQUE_CNT-1)] == 0){
		// look for the difference in the room
		for (uint8_t index = 0; index < 200; index++){
    27ec:	3f 5f       	subi	r19, 0xFF	; 255
    27ee:	38 3c       	cpi	r19, 0xC8	; 200
    27f0:	78 f2       	brcs	.-98     	; 0x2790 <_Z11analyzeRoomPhS_S_Pj+0x40>
    27f2:	2f 2d       	mov	r18, r15
    27f4:	3e 2d       	mov	r19, r14
    27f6:	e4 e0       	ldi	r30, 0x04	; 4
    27f8:	ae 2e       	mov	r10, r30
			}
		}
		// convert angles referenced from 0 to angles referenced to angle[n-1]
		for (uint8_t loop = 4; loop != 0; loop--){
			// convert to absolute angle from home to the angle between the last plaque can current
			if (heading_map[loop] != 0){
    27fa:	f9 01       	movw	r30, r18
    27fc:	00 85       	ldd	r16, Z+8	; 0x08
    27fe:	11 85       	ldd	r17, Z+9	; 0x09
    2800:	01 15       	cp	r16, r1
    2802:	11 05       	cpc	r17, r1
    2804:	31 f0       	breq	.+12     	; 0x2812 <_Z11analyzeRoomPhS_S_Pj+0xc2>
				heading_map[loop] = heading_map[loop] - heading_map[(loop-1)];
    2806:	c6 80       	ldd	r12, Z+6	; 0x06
    2808:	d7 80       	ldd	r13, Z+7	; 0x07
    280a:	0c 19       	sub	r16, r12
    280c:	1d 09       	sbc	r17, r13
    280e:	11 87       	std	Z+9, r17	; 0x09
    2810:	00 87       	std	Z+8, r16	; 0x08
			else{
				consecutive_cnt = 0;
			}
		}
		// convert angles referenced from 0 to angles referenced to angle[n-1]
		for (uint8_t loop = 4; loop != 0; loop--){
    2812:	aa 94       	dec	r10
    2814:	22 50       	subi	r18, 0x02	; 2
    2816:	30 40       	sbci	r19, 0x00	; 0
    2818:	aa 20       	and	r10, r10
    281a:	79 f7       	brne	.-34     	; 0x27fa <_Z11analyzeRoomPhS_S_Pj+0xaa>
	// clear the result map
	for (uint8_t index = 0; index < MAX_PLAQUE_CNT; index++){
		heading_map[index] = 0;
		dist_map[index] = 0;
	}
	while (dist_map[(MAX_PLAQUE_CNT-1)] == 0){
    281c:	fa 01       	movw	r30, r20
    281e:	23 81       	ldd	r18, Z+3	; 0x03
    2820:	22 23       	and	r18, r18
    2822:	09 f4       	brne	.+2      	; 0x2826 <_Z11analyzeRoomPhS_S_Pj+0xd6>
    2824:	b4 cf       	rjmp	.-152    	; 0x278e <_Z11analyzeRoomPhS_S_Pj+0x3e>
		//		while(1);
		//	}
		//	
		//}
	}					
}
    2826:	df 91       	pop	r29
    2828:	cf 91       	pop	r28
    282a:	1f 91       	pop	r17
    282c:	0f 91       	pop	r16
    282e:	ff 90       	pop	r15
    2830:	ef 90       	pop	r14
    2832:	df 90       	pop	r13
    2834:	cf 90       	pop	r12
    2836:	bf 90       	pop	r11
    2838:	af 90       	pop	r10
    283a:	08 95       	ret

0000283c <_Z18adjustScanPlatformhh>:
	
	return 0;
}

uint8_t adjustScanPlatform(uint8_t steps, uint8_t update)
{
    283c:	cf 93       	push	r28
    283e:	df 93       	push	r29
	//debug.enable();
	static uint16_t current_step_cnt = 0;
	// Only accepts steps from 0 -> 200
	if ( (steps >= 200) && (update == 1) ){
    2840:	88 3c       	cpi	r24, 0xC8	; 200
    2842:	18 f0       	brcs	.+6      	; 0x284a <_Z18adjustScanPlatformhh+0xe>
    2844:	61 30       	cpi	r22, 0x01	; 1
    2846:	09 f4       	brne	.+2      	; 0x284a <_Z18adjustScanPlatformhh+0xe>
    2848:	4a c0       	rjmp	.+148    	; 0x28de <_Z18adjustScanPlatformhh+0xa2>
		return current_step_cnt;
	}
	
	// update = 1 means adjust the position
	if (update > 0){
    284a:	66 23       	and	r22, r22
    284c:	09 f4       	brne	.+2      	; 0x2850 <_Z18adjustScanPlatformhh+0x14>
    284e:	47 c0       	rjmp	.+142    	; 0x28de <_Z18adjustScanPlatformhh+0xa2>
		// move the stepper to the angle requested
		if (current_step_cnt < steps){
    2850:	20 91 72 05 	lds	r18, 0x0572
    2854:	30 91 73 05 	lds	r19, 0x0573
    2858:	c8 2f       	mov	r28, r24
    285a:	d0 e0       	ldi	r29, 0x00	; 0
    285c:	2c 17       	cp	r18, r28
    285e:	3d 07       	cpc	r19, r29
    2860:	b0 f0       	brcs	.+44     	; 0x288e <_Z18adjustScanPlatformhh+0x52>
    2862:	1d c0       	rjmp	.+58     	; 0x289e <_Z18adjustScanPlatformhh+0x62>
			while(current_step_cnt != steps){
				motor_s.onestep(FORWARD, SINGLE);
    2864:	8d eb       	ldi	r24, 0xBD	; 189
    2866:	93 e0       	ldi	r25, 0x03	; 3
    2868:	61 e0       	ldi	r22, 0x01	; 1
    286a:	41 e0       	ldi	r20, 0x01	; 1
    286c:	0e 94 ae 08 	call	0x115c	; 0x115c <_ZN10AF_Stepper7onestepEhh>
				current_step_cnt++;
    2870:	80 91 72 05 	lds	r24, 0x0572
    2874:	90 91 73 05 	lds	r25, 0x0573
    2878:	01 96       	adiw	r24, 0x01	; 1
    287a:	90 93 73 05 	sts	0x0573, r25
    287e:	80 93 72 05 	sts	0x0572, r24
				//debug.mediumRangeIR(current_step_cnt);
				delay(10);
    2882:	6a e0       	ldi	r22, 0x0A	; 10
    2884:	70 e0       	ldi	r23, 0x00	; 0
    2886:	80 e0       	ldi	r24, 0x00	; 0
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	0e 94 52 05 	call	0xaa4	; 0xaa4 <delay>
	
	// update = 1 means adjust the position
	if (update > 0){
		// move the stepper to the angle requested
		if (current_step_cnt < steps){
			while(current_step_cnt != steps){
    288e:	80 91 72 05 	lds	r24, 0x0572
    2892:	90 91 73 05 	lds	r25, 0x0573
    2896:	8c 17       	cp	r24, r28
    2898:	9d 07       	cpc	r25, r29
    289a:	21 f7       	brne	.-56     	; 0x2864 <_Z18adjustScanPlatformhh+0x28>
    289c:	20 c0       	rjmp	.+64     	; 0x28de <_Z18adjustScanPlatformhh+0xa2>
				current_step_cnt++;
				//debug.mediumRangeIR(current_step_cnt);
				delay(10);
			}
		}
		else if (current_step_cnt > steps){
    289e:	c2 17       	cp	r28, r18
    28a0:	d3 07       	cpc	r29, r19
    28a2:	b0 f0       	brcs	.+44     	; 0x28d0 <_Z18adjustScanPlatformhh+0x94>
    28a4:	1c c0       	rjmp	.+56     	; 0x28de <_Z18adjustScanPlatformhh+0xa2>
			while(current_step_cnt != steps){
				motor_s.onestep(BACKWARD, SINGLE);
    28a6:	8d eb       	ldi	r24, 0xBD	; 189
    28a8:	93 e0       	ldi	r25, 0x03	; 3
    28aa:	62 e0       	ldi	r22, 0x02	; 2
    28ac:	41 e0       	ldi	r20, 0x01	; 1
    28ae:	0e 94 ae 08 	call	0x115c	; 0x115c <_ZN10AF_Stepper7onestepEhh>
				current_step_cnt--;
    28b2:	80 91 72 05 	lds	r24, 0x0572
    28b6:	90 91 73 05 	lds	r25, 0x0573
    28ba:	01 97       	sbiw	r24, 0x01	; 1
    28bc:	90 93 73 05 	sts	0x0573, r25
    28c0:	80 93 72 05 	sts	0x0572, r24
				delay(10);
    28c4:	6a e0       	ldi	r22, 0x0A	; 10
    28c6:	70 e0       	ldi	r23, 0x00	; 0
    28c8:	80 e0       	ldi	r24, 0x00	; 0
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	0e 94 52 05 	call	0xaa4	; 0xaa4 <delay>
				//debug.mediumRangeIR(current_step_cnt);
				delay(10);
			}
		}
		else if (current_step_cnt > steps){
			while(current_step_cnt != steps){
    28d0:	80 91 72 05 	lds	r24, 0x0572
    28d4:	90 91 73 05 	lds	r25, 0x0573
    28d8:	8c 17       	cp	r24, r28
    28da:	9d 07       	cpc	r25, r29
    28dc:	21 f7       	brne	.-56     	; 0x28a6 <_Z18adjustScanPlatformhh+0x6a>
				//debug.mediumRangeIR(current_step_cnt);
			}
		}
	}
	// just return the angle
	return current_step_cnt;
    28de:	80 91 72 05 	lds	r24, 0x0572
}
    28e2:	df 91       	pop	r29
    28e4:	cf 91       	pop	r28
    28e6:	08 95       	ret

000028e8 <_Z7readADCj>:
  	motor_r.run(RELEASE);
}

// ISSUES WITH SOME OF THE CODE HERE - commented out
int16_t readADC(uint16_t pin)
{
    28e8:	ef 92       	push	r14
    28ea:	ff 92       	push	r15
    28ec:	0f 93       	push	r16
    28ee:	1f 93       	push	r17
    28f0:	cf 93       	push	r28
    28f2:	df 93       	push	r29
    28f4:	f8 2e       	mov	r15, r24
    28f6:	00 e0       	ldi	r16, 0x00	; 0
    28f8:	10 e0       	ldi	r17, 0x00	; 0
    28fa:	c0 e0       	ldi	r28, 0x00	; 0
    28fc:	d0 e0       	ldi	r29, 0x00	; 0
	int16_t A_0 = 0;       					// previous i-1 running average
	
	// deciminate the IR sensor to get a better idea of the distance
	for (uint8_t i=1; i<=sample_amout; i++){
    	// read from the ADC
		x_i = analogRead(pin);
    28fe:	8f 2d       	mov	r24, r15
    2900:	0e 94 c1 05 	call	0xb82	; 0xb82 <analogRead>
  	motor_l.run(RELEASE);
  	motor_r.run(RELEASE);
}

// ISSUES WITH SOME OF THE CODE HERE - commented out
int16_t readADC(uint16_t pin)
    2904:	0f 5f       	subi	r16, 0xFF	; 255
    2906:	1f 4f       	sbci	r17, 0xFF	; 255
	for (uint8_t i=1; i<=sample_amout; i++){
    	// read from the ADC
		x_i = analogRead(pin);
		// rapid calculation method - http://en.wikipedia.org/wiki/Standard_deviation
		// accumulate the result
		A_1 = A_0 + (( x_i - A_0 ) / i);
    2908:	8c 1b       	sub	r24, r28
    290a:	9d 0b       	sbc	r25, r29
    290c:	b8 01       	movw	r22, r16
    290e:	0e 94 2a 21 	call	0x4254	; 0x4254 <__divmodhi4>
    2912:	c6 0f       	add	r28, r22
    2914:	d7 1f       	adc	r29, r23
	int16_t x_i = 0;      					// ADC input for sample i
	int16_t A_1 = 0;   						// current  i   running average
	int16_t A_0 = 0;       					// previous i-1 running average
	
	// deciminate the IR sensor to get a better idea of the distance
	for (uint8_t i=1; i<=sample_amout; i++){
    2916:	04 36       	cpi	r16, 0x64	; 100
    2918:	11 05       	cpc	r17, r1
    291a:	89 f7       	brne	.-30     	; 0x28fe <_Z7readADCj+0x16>
		// stored for the next use
		A_0 = A_1;
	}
	// cast and return the result
	return A_1;
}
    291c:	ce 01       	movw	r24, r28
    291e:	df 91       	pop	r29
    2920:	cf 91       	pop	r28
    2922:	1f 91       	pop	r17
    2924:	0f 91       	pop	r16
    2926:	ff 90       	pop	r15
    2928:	ef 90       	pop	r14
    292a:	08 95       	ret

0000292c <_Z10irDistanceh>:
}

uint16_t irDistance(uint8_t pin)
{
	// store the value from the ADC converter
	uint16_t tmp_adc_result1 = readADC(LONG_RANGE_IR_PIN);
    292c:	82 e0       	ldi	r24, 0x02	; 2
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	0e 94 74 14 	call	0x28e8	; 0x28e8 <_Z7readADCj>
	uint16_t tmp_adc_result2 = readADC(MEDIUM_RANGE_IR_PIN);
    2934:	83 e0       	ldi	r24, 0x03	; 3
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	0e 94 74 14 	call	0x28e8	; 0x28e8 <_Z7readADCj>
	//	}
	//	return dist_from_flash2;
	//}
	
	return 0;
}
    293c:	80 e0       	ldi	r24, 0x00	; 0
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	08 95       	ret

00002942 <_Z14irDistance_newh>:
	return A_1;
}

uint16_t irDistance_new(uint8_t pin)
{
	uint16_t dist = readADC(pin);
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	0e 94 74 14 	call	0x28e8	; 0x28e8 <_Z7readADCj>
    2948:	9c 01       	movw	r18, r24
	//dist = pgm_read_word(&medium_range_data[dist]);
	//return dist;
	// Get the medium range result
	if (dist > (MEDIUM_RANGE_OFFSET+MEDIUM_RANGE_TABLE_SIZE)){
    294a:	83 e0       	ldi	r24, 0x03	; 3
    294c:	25 33       	cpi	r18, 0x35	; 53
    294e:	38 07       	cpc	r19, r24
    2950:	18 f0       	brcs	.+6      	; 0x2958 <_Z14irDistance_newh+0x16>
    2952:	24 e1       	ldi	r18, 0x14	; 20
    2954:	30 e0       	ldi	r19, 0x00	; 0
    2956:	0d c0       	rjmp	.+26     	; 0x2972 <_Z14irDistance_newh+0x30>
		return MIN_MEDIUM_RANGE_IR_DISTANCE;
	}
	else if (dist < MEDIUM_RANGE_OFFSET){
    2958:	20 39       	cpi	r18, 0x90	; 144
    295a:	31 05       	cpc	r19, r1
    295c:	18 f4       	brcc	.+6      	; 0x2964 <_Z14irDistance_newh+0x22>
    295e:	26 e9       	ldi	r18, 0x96	; 150
    2960:	30 e0       	ldi	r19, 0x00	; 0
    2962:	07 c0       	rjmp	.+14     	; 0x2972 <_Z14irDistance_newh+0x30>
		return MAX_MEDIUM_RANGE_IR_DISTANCE;
	}
	else{
		// get the value from flash (offset from all the same values)
		dist = pgm_read_byte(&medium_range_data[(dist-MEDIUM_RANGE_OFFSET)]);
    2964:	27 58       	subi	r18, 0x87	; 135
    2966:	3f 4f       	sbci	r19, 0xFF	; 255
    2968:	f9 01       	movw	r30, r18
    296a:	24 91       	lpm	r18, Z+
    296c:	30 e0       	ldi	r19, 0x00	; 0
		dist *= 2;
    296e:	22 0f       	add	r18, r18
    2970:	33 1f       	adc	r19, r19
		return dist;
	}
}
    2972:	c9 01       	movw	r24, r18
    2974:	08 95       	ret

00002976 <_Z15scanEnvironmentPhh>:
	motor_l.run(RELEASE);
	motor_r.run(RELEASE);
}

void scanEnvironment(uint8_t* map, uint8_t map_size)
{	
    2976:	ef 92       	push	r14
    2978:	ff 92       	push	r15
    297a:	0f 93       	push	r16
    297c:	1f 93       	push	r17
    297e:	cf 93       	push	r28
    2980:	df 93       	push	r29
    2982:	18 2f       	mov	r17, r24
    2984:	06 2f       	mov	r16, r22
    2986:	e1 2e       	mov	r14, r17
    2988:	e7 01       	movw	r28, r14
    298a:	7e 01       	movw	r14, r28
    298c:	f9 2e       	mov	r15, r25
    298e:	e7 01       	movw	r28, r14
	// now we can move back and start storing sensor data
	for(uint8_t cnt=0; cnt<map_size; cnt++){
    2990:	12 c0       	rjmp	.+36     	; 0x29b6 <_Z15scanEnvironmentPhh+0x40>
		// create the map element
		map[cnt] = irDistance_new(MEDIUM_RANGE_IR_PIN);
    2992:	83 e0       	ldi	r24, 0x03	; 3
    2994:	0e 94 a1 14 	call	0x2942	; 0x2942 <_Z14irDistance_newh>
    2998:	89 93       	st	Y+, r24
		// move the motor and do it again
		adjustScanPlatform((adjustScanPlatform(0)+1), 1);
    299a:	80 e0       	ldi	r24, 0x00	; 0
    299c:	60 e0       	ldi	r22, 0x00	; 0
    299e:	0e 94 1e 14 	call	0x283c	; 0x283c <_Z18adjustScanPlatformhh>
    29a2:	8f 5f       	subi	r24, 0xFF	; 255
    29a4:	61 e0       	ldi	r22, 0x01	; 1
    29a6:	0e 94 1e 14 	call	0x283c	; 0x283c <_Z18adjustScanPlatformhh>
		// allow the platform movement to settle
		delay(100);
    29aa:	64 e6       	ldi	r22, 0x64	; 100
    29ac:	70 e0       	ldi	r23, 0x00	; 0
    29ae:	80 e0       	ldi	r24, 0x00	; 0
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	0e 94 52 05 	call	0xaa4	; 0xaa4 <delay>
}

void scanEnvironment(uint8_t* map, uint8_t map_size)
{	
	// now we can move back and start storing sensor data
	for(uint8_t cnt=0; cnt<map_size; cnt++){
    29b6:	ae 01       	movw	r20, r28
    29b8:	41 1b       	sub	r20, r17
    29ba:	40 17       	cp	r20, r16
    29bc:	50 f3       	brcs	.-44     	; 0x2992 <_Z15scanEnvironmentPhh+0x1c>
		// allow the platform movement to settle
		delay(100);
	}
	
	// Return the scan platform to the home position
	adjustScanPlatform(0, 1);
    29be:	80 e0       	ldi	r24, 0x00	; 0
    29c0:	61 e0       	ldi	r22, 0x01	; 1
    29c2:	0e 94 1e 14 	call	0x283c	; 0x283c <_Z18adjustScanPlatformhh>
}
    29c6:	df 91       	pop	r29
    29c8:	cf 91       	pop	r28
    29ca:	1f 91       	pop	r17
    29cc:	0f 91       	pop	r16
    29ce:	ff 90       	pop	r15
    29d0:	ef 90       	pop	r14
    29d2:	08 95       	ret

000029d4 <_Z13adjustHeadingj>:
	tmp_plaque_angle *= 180.00000 / PI; 
	plaque_angle = static_cast<uint16_t>(tmp_plaque_angle*10);
}
extern char* print;
void adjustHeading(uint16_t angle)
{
    29d4:	cf 93       	push	r28
    29d6:	df 93       	push	r29
    29d8:	ec 01       	movw	r28, r24
 	// make sure the heading is valid
	while (angle > 3599){
    29da:	02 c0       	rjmp	.+4      	; 0x29e0 <_Z13adjustHeadingj+0xc>
		angle -= 3600;
    29dc:	c0 51       	subi	r28, 0x10	; 16
    29de:	de 40       	sbci	r29, 0x0E	; 14
}
extern char* print;
void adjustHeading(uint16_t angle)
{
 	// make sure the heading is valid
	while (angle > 3599){
    29e0:	8e e0       	ldi	r24, 0x0E	; 14
    29e2:	c0 31       	cpi	r28, 0x10	; 16
    29e4:	d8 07       	cpc	r29, r24
    29e6:	d0 f7       	brcc	.-12     	; 0x29dc <_Z13adjustHeadingj+0x8>
		angle -= 3600;
	}
	sprintf(print, "looking for - %d \n", (angle/10));
    29e8:	00 d0       	rcall	.+0      	; 0x29ea <_Z13adjustHeadingj+0x16>
    29ea:	00 d0       	rcall	.+0      	; 0x29ec <_Z13adjustHeadingj+0x18>
    29ec:	00 d0       	rcall	.+0      	; 0x29ee <_Z13adjustHeadingj+0x1a>
    29ee:	ed b7       	in	r30, 0x3d	; 61
    29f0:	fe b7       	in	r31, 0x3e	; 62
    29f2:	31 96       	adiw	r30, 0x01	; 1
    29f4:	80 91 ce 03 	lds	r24, 0x03CE
    29f8:	90 91 cf 03 	lds	r25, 0x03CF
    29fc:	ad b7       	in	r26, 0x3d	; 61
    29fe:	be b7       	in	r27, 0x3e	; 62
    2a00:	12 96       	adiw	r26, 0x02	; 2
    2a02:	9c 93       	st	X, r25
    2a04:	8e 93       	st	-X, r24
    2a06:	11 97       	sbiw	r26, 0x01	; 1
    2a08:	81 e2       	ldi	r24, 0x21	; 33
    2a0a:	91 e0       	ldi	r25, 0x01	; 1
    2a0c:	93 83       	std	Z+3, r25	; 0x03
    2a0e:	82 83       	std	Z+2, r24	; 0x02
    2a10:	ce 01       	movw	r24, r28
    2a12:	6a e0       	ldi	r22, 0x0A	; 10
    2a14:	70 e0       	ldi	r23, 0x00	; 0
    2a16:	0e 94 16 21 	call	0x422c	; 0x422c <__udivmodhi4>
    2a1a:	75 83       	std	Z+5, r23	; 0x05
    2a1c:	64 83       	std	Z+4, r22	; 0x04
    2a1e:	0e 94 05 25 	call	0x4a0a	; 0x4a0a <sprintf>
	Serial.write(print);
    2a22:	8d b7       	in	r24, 0x3d	; 61
    2a24:	9e b7       	in	r25, 0x3e	; 62
    2a26:	06 96       	adiw	r24, 0x06	; 6
    2a28:	0f b6       	in	r0, 0x3f	; 63
    2a2a:	f8 94       	cli
    2a2c:	9e bf       	out	0x3e, r25	; 62
    2a2e:	0f be       	out	0x3f, r0	; 63
    2a30:	8d bf       	out	0x3d, r24	; 61
    2a32:	60 91 ce 03 	lds	r22, 0x03CE
    2a36:	70 91 cf 03 	lds	r23, 0x03CF
    2a3a:	83 e4       	ldi	r24, 0x43	; 67
    2a3c:	93 e0       	ldi	r25, 0x03	; 3
    2a3e:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <_ZN14HardwareSerial5writeEPc>
	memset(print, 0, 64);
    2a42:	e0 91 ce 03 	lds	r30, 0x03CE
    2a46:	f0 91 cf 03 	lds	r31, 0x03CF
    2a4a:	80 e4       	ldi	r24, 0x40	; 64
    2a4c:	df 01       	movw	r26, r30
    2a4e:	1d 92       	st	X+, r1
    2a50:	8a 95       	dec	r24
    2a52:	e9 f7       	brne	.-6      	; 0x2a4e <_Z13adjustHeadingj+0x7a>
	// set the motors to the same speed
	motor_r.setSpeed(150);
    2a54:	8b eb       	ldi	r24, 0xBB	; 187
    2a56:	93 e0       	ldi	r25, 0x03	; 3
    2a58:	66 e9       	ldi	r22, 0x96	; 150
    2a5a:	0e 94 14 08 	call	0x1028	; 0x1028 <_ZN10AF_DCMotor8setSpeedEh>
  	motor_l.setSpeed(150);
    2a5e:	89 eb       	ldi	r24, 0xB9	; 185
    2a60:	93 e0       	ldi	r25, 0x03	; 3
    2a62:	66 e9       	ldi	r22, 0x96	; 150
    2a64:	0e 94 14 08 	call	0x1028	; 0x1028 <_ZN10AF_DCMotor8setSpeedEh>
  	// one should go forward and another backwards
  	motor_r.run(FORWARD);
    2a68:	8b eb       	ldi	r24, 0xBB	; 187
    2a6a:	93 e0       	ldi	r25, 0x03	; 3
    2a6c:	61 e0       	ldi	r22, 0x01	; 1
    2a6e:	0e 94 85 0a 	call	0x150a	; 0x150a <_ZN10AF_DCMotor3runEh>
  	motor_l.run(BACKWARD);
    2a72:	89 eb       	ldi	r24, 0xB9	; 185
    2a74:	93 e0       	ldi	r25, 0x03	; 3
    2a76:	62 e0       	ldi	r22, 0x02	; 2
    2a78:	0e 94 85 0a 	call	0x150a	; 0x150a <_ZN10AF_DCMotor3runEh>
  	int targetOffset = compass.getHeading();
  
  	// keep looping until we are less than 5 degrees off
	// from desired setting 
	while(abs(angle - targetOffset) > 50){
    	targetOffset = compass.getHeading();
    2a7c:	85 eb       	ldi	r24, 0xB5	; 181
    2a7e:	93 e0       	ldi	r25, 0x03	; 3
    2a80:	0e 94 53 18 	call	0x30a6	; 0x30a6 <_ZN14HMC6352compass10getHeadingEv>
 	//exits only once the offset angle is reached
  	int targetOffset = compass.getHeading();
  
  	// keep looping until we are less than 5 degrees off
	// from desired setting 
	while(abs(angle - targetOffset) > 50){
    2a84:	9c 01       	movw	r18, r24
    2a86:	c8 17       	cp	r28, r24
    2a88:	d9 07       	cpc	r29, r25
    2a8a:	31 f0       	breq	.+12     	; 0x2a98 <_Z13adjustHeadingj+0xc4>
    2a8c:	ce 01       	movw	r24, r28
    2a8e:	82 1b       	sub	r24, r18
    2a90:	93 0b       	sbc	r25, r19
    2a92:	83 33       	cpi	r24, 0x33	; 51
    2a94:	91 05       	cpc	r25, r1
    2a96:	90 f7       	brcc	.-28     	; 0x2a7c <_Z13adjustHeadingj+0xa8>
    	targetOffset = compass.getHeading();
  	}
  	delay(50);
    2a98:	62 e3       	ldi	r22, 0x32	; 50
    2a9a:	70 e0       	ldi	r23, 0x00	; 0
    2a9c:	80 e0       	ldi	r24, 0x00	; 0
    2a9e:	90 e0       	ldi	r25, 0x00	; 0
    2aa0:	0e 94 52 05 	call	0xaa4	; 0xaa4 <delay>
  	//once desired heading is found turn motors off
  	motor_l.run(RELEASE);
    2aa4:	89 eb       	ldi	r24, 0xB9	; 185
    2aa6:	93 e0       	ldi	r25, 0x03	; 3
    2aa8:	64 e0       	ldi	r22, 0x04	; 4
    2aaa:	0e 94 85 0a 	call	0x150a	; 0x150a <_ZN10AF_DCMotor3runEh>
  	motor_r.run(RELEASE);
    2aae:	8b eb       	ldi	r24, 0xBB	; 187
    2ab0:	93 e0       	ldi	r25, 0x03	; 3
    2ab2:	64 e0       	ldi	r22, 0x04	; 4
    2ab4:	0e 94 85 0a 	call	0x150a	; 0x150a <_ZN10AF_DCMotor3runEh>
}
    2ab8:	df 91       	pop	r29
    2aba:	cf 91       	pop	r28
    2abc:	08 95       	ret

00002abe <_Z10fineTuneMJhj>:
	// just return the angle
	return current_step_cnt;
}

void fineTuneMJ(uint8_t dist, uint16_t angle)
{
    2abe:	cf 92       	push	r12
    2ac0:	df 92       	push	r13
    2ac2:	ef 92       	push	r14
    2ac4:	ff 92       	push	r15
    2ac6:	0f 93       	push	r16
    2ac8:	1f 93       	push	r17
    2aca:	cf 93       	push	r28
    2acc:	df 93       	push	r29
    2ace:	e8 2e       	mov	r14, r24
	uint16_t offset_angle = 0;
	int16_t err = 0;
	uint16_t next_step = 0;
	uint16_t ang = angle/2;
	// shimmy shake
	adjustHeading(ang);
    2ad0:	cb 01       	movw	r24, r22
    2ad2:	96 95       	lsr	r25
    2ad4:	87 95       	ror	r24
    2ad6:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <_Z13adjustHeadingj>
	offset_angle = compass.getHeading();
    2ada:	85 eb       	ldi	r24, 0xB5	; 181
    2adc:	93 e0       	ldi	r25, 0x03	; 3
    2ade:	0e 94 53 18 	call	0x30a6	; 0x30a6 <_ZN14HMC6352compass10getHeadingEv>
    2ae2:	8c 01       	movw	r16, r24
	// look for the appropriate distance
	delay(100);
    2ae4:	64 e6       	ldi	r22, 0x64	; 100
    2ae6:	70 e0       	ldi	r23, 0x00	; 0
    2ae8:	80 e0       	ldi	r24, 0x00	; 0
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	0e 94 52 05 	call	0xaa4	; 0xaa4 <delay>
	err = irDistance_new(MEDIUM_RANGE_IR_PIN);
    2af0:	83 e0       	ldi	r24, 0x03	; 3
    2af2:	0e 94 a1 14 	call	0x2942	; 0x2942 <_Z14irDistance_newh>
    2af6:	c8 2e       	mov	r12, r24
    2af8:	e6 01       	movw	r28, r12
    2afa:	6e 01       	movw	r12, r28
    2afc:	d9 2e       	mov	r13, r25
    2afe:	e6 01       	movw	r28, r12
	err -= dist;
    2b00:	ff 24       	eor	r15, r15
    2b02:	49 c0       	rjmp	.+146    	; 0x2b96 <_Z10fineTuneMJhj+0xd8>
	err = abs(err);
	// find the plaque
	while(err > ROOM_DIFFERENCE_AMOUNT){
		while(err > ROOM_DIFFERENCE_AMOUNT){
			// lock onto the target
			next_step = adjustScanPlatform(0) + 1;
    2b04:	80 e0       	ldi	r24, 0x00	; 0
    2b06:	60 e0       	ldi	r22, 0x00	; 0
    2b08:	0e 94 1e 14 	call	0x283c	; 0x283c <_Z18adjustScanPlatformhh>
			adjustScanPlatform(next_step, 1);
    2b0c:	8f 5f       	subi	r24, 0xFF	; 255
    2b0e:	61 e0       	ldi	r22, 0x01	; 1
    2b10:	0e 94 1e 14 	call	0x283c	; 0x283c <_Z18adjustScanPlatformhh>
			// find the new error
			err = irDistance_new(MEDIUM_RANGE_IR_PIN);
    2b14:	83 e0       	ldi	r24, 0x03	; 3
    2b16:	0e 94 a1 14 	call	0x2942	; 0x2942 <_Z14irDistance_newh>
    2b1a:	c8 2e       	mov	r12, r24
    2b1c:	e6 01       	movw	r28, r12
    2b1e:	6e 01       	movw	r12, r28
    2b20:	d9 2e       	mov	r13, r25
    2b22:	e6 01       	movw	r28, r12
			err -= dist;
    2b24:	ce 19       	sub	r28, r14
    2b26:	df 09       	sbc	r29, r15
			err = abs(err);
    2b28:	d7 ff       	sbrs	r29, 7
    2b2a:	03 c0       	rjmp	.+6      	; 0x2b32 <_Z10fineTuneMJhj+0x74>
    2b2c:	d0 95       	com	r29
    2b2e:	c1 95       	neg	r28
    2b30:	df 4f       	sbci	r29, 0xFF	; 255
			delay(100);
    2b32:	64 e6       	ldi	r22, 0x64	; 100
    2b34:	70 e0       	ldi	r23, 0x00	; 0
    2b36:	80 e0       	ldi	r24, 0x00	; 0
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	0e 94 52 05 	call	0xaa4	; 0xaa4 <delay>
	err = irDistance_new(MEDIUM_RANGE_IR_PIN);
	err -= dist;
	err = abs(err);
	// find the plaque
	while(err > ROOM_DIFFERENCE_AMOUNT){
		while(err > ROOM_DIFFERENCE_AMOUNT){
    2b3e:	80 91 35 01 	lds	r24, 0x0135
    2b42:	90 e0       	ldi	r25, 0x00	; 0
    2b44:	8c 17       	cp	r24, r28
    2b46:	9d 07       	cpc	r25, r29
    2b48:	ec f2       	brlt	.-70     	; 0x2b04 <_Z10fineTuneMJhj+0x46>
			err -= dist;
			err = abs(err);
			delay(100);
		}
		// prepare for the next shimmy shake
		ang = adjustScanPlatform(0)*18;
    2b4a:	80 e0       	ldi	r24, 0x00	; 0
    2b4c:	60 e0       	ldi	r22, 0x00	; 0
    2b4e:	0e 94 1e 14 	call	0x283c	; 0x283c <_Z18adjustScanPlatformhh>
    2b52:	32 e1       	ldi	r19, 0x12	; 18
    2b54:	83 9f       	mul	r24, r19
    2b56:	e0 01       	movw	r28, r0
    2b58:	11 24       	eor	r1, r1
		adjustScanPlatform(0,1);
    2b5a:	80 e0       	ldi	r24, 0x00	; 0
    2b5c:	61 e0       	ldi	r22, 0x01	; 1
    2b5e:	0e 94 1e 14 	call	0x283c	; 0x283c <_Z18adjustScanPlatformhh>
		ang = ang/2;
    2b62:	ce 01       	movw	r24, r28
    2b64:	96 95       	lsr	r25
    2b66:	87 95       	ror	r24
		ang = ang+offset_angle;
		// shimmy shake
		adjustHeading(ang);
    2b68:	80 0f       	add	r24, r16
    2b6a:	91 1f       	adc	r25, r17
    2b6c:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <_Z13adjustHeadingj>
		offset_angle = compass.getHeading();
    2b70:	85 eb       	ldi	r24, 0xB5	; 181
    2b72:	93 e0       	ldi	r25, 0x03	; 3
    2b74:	0e 94 53 18 	call	0x30a6	; 0x30a6 <_ZN14HMC6352compass10getHeadingEv>
    2b78:	8c 01       	movw	r16, r24
		delay(100);
    2b7a:	64 e6       	ldi	r22, 0x64	; 100
    2b7c:	70 e0       	ldi	r23, 0x00	; 0
    2b7e:	80 e0       	ldi	r24, 0x00	; 0
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	0e 94 52 05 	call	0xaa4	; 0xaa4 <delay>
		err = irDistance_new(MEDIUM_RANGE_IR_PIN);
    2b86:	83 e0       	ldi	r24, 0x03	; 3
    2b88:	0e 94 a1 14 	call	0x2942	; 0x2942 <_Z14irDistance_newh>
    2b8c:	c8 2e       	mov	r12, r24
    2b8e:	e6 01       	movw	r28, r12
    2b90:	6e 01       	movw	r12, r28
    2b92:	d9 2e       	mov	r13, r25
    2b94:	e6 01       	movw	r28, r12
		err -= dist;
    2b96:	ce 19       	sub	r28, r14
    2b98:	df 09       	sbc	r29, r15
		err = abs(err);
    2b9a:	d7 ff       	sbrs	r29, 7
    2b9c:	03 c0       	rjmp	.+6      	; 0x2ba4 <_Z10fineTuneMJhj+0xe6>
    2b9e:	d0 95       	com	r29
    2ba0:	c1 95       	neg	r28
    2ba2:	df 4f       	sbci	r29, 0xFF	; 255
	delay(100);
	err = irDistance_new(MEDIUM_RANGE_IR_PIN);
	err -= dist;
	err = abs(err);
	// find the plaque
	while(err > ROOM_DIFFERENCE_AMOUNT){
    2ba4:	80 91 35 01 	lds	r24, 0x0135
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	8c 17       	cp	r24, r28
    2bac:	9d 07       	cpc	r25, r29
    2bae:	3c f2       	brlt	.-114    	; 0x2b3e <_Z10fineTuneMJhj+0x80>
		err = irDistance_new(MEDIUM_RANGE_IR_PIN);
		err -= dist;
		err = abs(err);
	}
	// miss the target to the right
	adjustHeading((offset_angle+100));
    2bb0:	c8 01       	movw	r24, r16
    2bb2:	8c 59       	subi	r24, 0x9C	; 156
    2bb4:	9f 4f       	sbci	r25, 0xFF	; 255
    2bb6:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <_Z13adjustHeadingj>
}
    2bba:	df 91       	pop	r29
    2bbc:	cf 91       	pop	r28
    2bbe:	1f 91       	pop	r17
    2bc0:	0f 91       	pop	r16
    2bc2:	ff 90       	pop	r15
    2bc4:	ef 90       	pop	r14
    2bc6:	df 90       	pop	r13
    2bc8:	cf 90       	pop	r12
    2bca:	08 95       	ret

00002bcc <_Z9stopRobotv>:
	}
}

void stopRobot()
{
	motor_l.run(RELEASE);
    2bcc:	89 eb       	ldi	r24, 0xB9	; 185
    2bce:	93 e0       	ldi	r25, 0x03	; 3
    2bd0:	64 e0       	ldi	r22, 0x04	; 4
    2bd2:	0e 94 85 0a 	call	0x150a	; 0x150a <_ZN10AF_DCMotor3runEh>
	motor_r.run(RELEASE);
    2bd6:	8b eb       	ldi	r24, 0xBB	; 187
    2bd8:	93 e0       	ldi	r25, 0x03	; 3
    2bda:	64 e0       	ldi	r22, 0x04	; 4
    2bdc:	0e 94 85 0a 	call	0x150a	; 0x150a <_ZN10AF_DCMotor3runEh>
}
    2be0:	08 95       	ret

00002be2 <_Z23findPlaqueDistanceAnglePhPjhRhRj>:
		//}
	}					
}

void findPlaqueDistanceAngle(uint8_t* dist, uint16_t* angle, uint8_t plaque_num, uint8_t& plaque_dist, uint16_t& plaque_angle)
{
    2be2:	2f 92       	push	r2
    2be4:	3f 92       	push	r3
    2be6:	4f 92       	push	r4
    2be8:	5f 92       	push	r5
    2bea:	6f 92       	push	r6
    2bec:	7f 92       	push	r7
    2bee:	8f 92       	push	r8
    2bf0:	9f 92       	push	r9
    2bf2:	af 92       	push	r10
    2bf4:	bf 92       	push	r11
    2bf6:	cf 92       	push	r12
    2bf8:	df 92       	push	r13
    2bfa:	ef 92       	push	r14
    2bfc:	ff 92       	push	r15
    2bfe:	0f 93       	push	r16
    2c00:	1f 93       	push	r17
    2c02:	df 93       	push	r29
    2c04:	cf 93       	push	r28
    2c06:	cd b7       	in	r28, 0x3d	; 61
    2c08:	de b7       	in	r29, 0x3e	; 62
    2c0a:	2c 97       	sbiw	r28, 0x0c	; 12
    2c0c:	0f b6       	in	r0, 0x3f	; 63
    2c0e:	f8 94       	cli
    2c10:	de bf       	out	0x3e, r29	; 62
    2c12:	0f be       	out	0x3f, r0	; 63
    2c14:	cd bf       	out	0x3d, r28	; 61
    2c16:	5c 01       	movw	r10, r24
    2c18:	7a 83       	std	Y+2, r23	; 0x02
    2c1a:	69 83       	std	Y+1, r22	; 0x01
    2c1c:	3e 83       	std	Y+6, r19	; 0x06
    2c1e:	2d 83       	std	Y+5, r18	; 0x05
    2c20:	18 87       	std	Y+8, r17	; 0x08
    2c22:	0f 83       	std	Y+7, r16	; 0x07
	if (plaque_num < 2){
    2c24:	42 30       	cpi	r20, 0x02	; 2
    2c26:	08 f4       	brcc	.+2      	; 0x2c2a <_Z23findPlaqueDistanceAnglePhPjhRhRj+0x48>
    2c28:	42 e0       	ldi	r20, 0x02	; 2
		plaque_num = 2;
	}

	double dist1 = static_cast<double>(dist[(plaque_num-1)]);
    2c2a:	04 2f       	mov	r16, r20
    2c2c:	10 e0       	ldi	r17, 0x00	; 0
    2c2e:	c8 01       	movw	r24, r16
    2c30:	01 97       	sbiw	r24, 0x01	; 1
    2c32:	9a 87       	std	Y+10, r25	; 0x0a
    2c34:	89 87       	std	Y+9, r24	; 0x09
    2c36:	fc 01       	movw	r30, r24
    2c38:	ea 0d       	add	r30, r10
    2c3a:	fb 1d       	adc	r31, r11
    2c3c:	60 81       	ld	r22, Z
    2c3e:	70 e0       	ldi	r23, 0x00	; 0
    2c40:	80 e0       	ldi	r24, 0x00	; 0
    2c42:	90 e0       	ldi	r25, 0x00	; 0
    2c44:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <__floatunsisf>
    2c48:	6b 01       	movw	r12, r22
    2c4a:	7c 01       	movw	r14, r24
	double dist2 = static_cast<double>(dist[(plaque_num-2)]);
    2c4c:	f5 01       	movw	r30, r10
    2c4e:	e0 0f       	add	r30, r16
    2c50:	f1 1f       	adc	r31, r17
    2c52:	32 97       	sbiw	r30, 0x02	; 2
    2c54:	60 81       	ld	r22, Z
    2c56:	70 e0       	ldi	r23, 0x00	; 0
    2c58:	80 e0       	ldi	r24, 0x00	; 0
    2c5a:	90 e0       	ldi	r25, 0x00	; 0
    2c5c:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <__floatunsisf>
    2c60:	8b 01       	movw	r16, r22
    2c62:	b8 2e       	mov	r11, r24
    2c64:	a9 2e       	mov	r10, r25
	double angle1 = static_cast<double>(angle[(plaque_num-1)]);
	// find the distance to the next plaque 
	double tmp_plaque_dist = sqrt( ( pow(dist1,2) + 
						  			pow(dist2,2)) - (2 * dist2 * dist1 * (cos((angle1*PI)/180.0)) )
					  			 );
    2c66:	6c 2d       	mov	r22, r12
    2c68:	7d 2d       	mov	r23, r13
    2c6a:	8e 2d       	mov	r24, r14
    2c6c:	9f 2d       	mov	r25, r15
    2c6e:	2c 2d       	mov	r18, r12
    2c70:	3d 2d       	mov	r19, r13
    2c72:	4e 2d       	mov	r20, r14
    2c74:	5f 2d       	mov	r21, r15
    2c76:	0e 94 a4 1b 	call	0x3748	; 0x3748 <__mulsf3>
    2c7a:	96 2e       	mov	r9, r22
    2c7c:	47 2e       	mov	r4, r23
    2c7e:	38 2e       	mov	r3, r24
    2c80:	29 2e       	mov	r2, r25
    2c82:	95 01       	movw	r18, r10
    2c84:	60 2f       	mov	r22, r16
    2c86:	71 2f       	mov	r23, r17
    2c88:	83 2f       	mov	r24, r19
    2c8a:	92 2f       	mov	r25, r18
    2c8c:	f5 01       	movw	r30, r10
    2c8e:	20 2f       	mov	r18, r16
    2c90:	31 2f       	mov	r19, r17
    2c92:	4f 2f       	mov	r20, r31
    2c94:	5e 2f       	mov	r21, r30
    2c96:	0e 94 a4 1b 	call	0x3748	; 0x3748 <__mulsf3>
    2c9a:	86 2e       	mov	r8, r22
    2c9c:	77 2e       	mov	r7, r23
    2c9e:	68 2e       	mov	r6, r24
    2ca0:	59 2e       	mov	r5, r25
    2ca2:	a9 85       	ldd	r26, Y+9	; 0x09
    2ca4:	ba 85       	ldd	r27, Y+10	; 0x0a
    2ca6:	aa 0f       	add	r26, r26
    2ca8:	bb 1f       	adc	r27, r27
    2caa:	e9 81       	ldd	r30, Y+1	; 0x01
    2cac:	fa 81       	ldd	r31, Y+2	; 0x02
    2cae:	ae 0f       	add	r26, r30
    2cb0:	bf 1f       	adc	r27, r31
    2cb2:	6d 91       	ld	r22, X+
    2cb4:	7c 91       	ld	r23, X
    2cb6:	80 e0       	ldi	r24, 0x00	; 0
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <__floatunsisf>
    2cbe:	2b ed       	ldi	r18, 0xDB	; 219
    2cc0:	3f e0       	ldi	r19, 0x0F	; 15
    2cc2:	49 e4       	ldi	r20, 0x49	; 73
    2cc4:	50 e4       	ldi	r21, 0x40	; 64
    2cc6:	0e 94 a4 1b 	call	0x3748	; 0x3748 <__mulsf3>
    2cca:	20 e0       	ldi	r18, 0x00	; 0
    2ccc:	30 e0       	ldi	r19, 0x00	; 0
    2cce:	44 e3       	ldi	r20, 0x34	; 52
    2cd0:	53 e4       	ldi	r21, 0x43	; 67
    2cd2:	0e 94 9c 1c 	call	0x3938	; 0x3938 <__divsf3>
    2cd6:	0e 94 0a 22 	call	0x4414	; 0x4414 <cos>
    2cda:	69 83       	std	Y+1, r22	; 0x01
    2cdc:	7a 83       	std	Y+2, r23	; 0x02
    2cde:	8b 83       	std	Y+3, r24	; 0x03
    2ce0:	9c 83       	std	Y+4, r25	; 0x04
    2ce2:	c1 01       	movw	r24, r2
    2ce4:	49 2d       	mov	r20, r9
    2ce6:	54 2d       	mov	r21, r4
    2ce8:	69 2f       	mov	r22, r25
    2cea:	78 2f       	mov	r23, r24
    2cec:	cb 01       	movw	r24, r22
    2cee:	ba 01       	movw	r22, r20
    2cf0:	28 2d       	mov	r18, r8
    2cf2:	37 2d       	mov	r19, r7
    2cf4:	46 2d       	mov	r20, r6
    2cf6:	55 2d       	mov	r21, r5
    2cf8:	0e 94 77 1b 	call	0x36ee	; 0x36ee <__addsf3>
    2cfc:	69 87       	std	Y+9, r22	; 0x09
    2cfe:	7a 87       	std	Y+10, r23	; 0x0a
    2d00:	8b 87       	std	Y+11, r24	; 0x0b
    2d02:	9c 87       	std	Y+12, r25	; 0x0c
    2d04:	95 01       	movw	r18, r10
    2d06:	60 2f       	mov	r22, r16
    2d08:	71 2f       	mov	r23, r17
    2d0a:	83 2f       	mov	r24, r19
    2d0c:	92 2f       	mov	r25, r18
    2d0e:	20 e0       	ldi	r18, 0x00	; 0
    2d10:	30 e0       	ldi	r19, 0x00	; 0
    2d12:	40 e0       	ldi	r20, 0x00	; 0
    2d14:	50 ec       	ldi	r21, 0xC0	; 192
    2d16:	0e 94 a4 1b 	call	0x3748	; 0x3748 <__mulsf3>
    2d1a:	2c 2d       	mov	r18, r12
    2d1c:	3d 2d       	mov	r19, r13
    2d1e:	4e 2d       	mov	r20, r14
    2d20:	5f 2d       	mov	r21, r15
    2d22:	0e 94 a4 1b 	call	0x3748	; 0x3748 <__mulsf3>
    2d26:	29 81       	ldd	r18, Y+1	; 0x01
    2d28:	3a 81       	ldd	r19, Y+2	; 0x02
    2d2a:	4b 81       	ldd	r20, Y+3	; 0x03
    2d2c:	5c 81       	ldd	r21, Y+4	; 0x04
    2d2e:	0e 94 a4 1b 	call	0x3748	; 0x3748 <__mulsf3>
    2d32:	9b 01       	movw	r18, r22
    2d34:	ac 01       	movw	r20, r24
    2d36:	69 85       	ldd	r22, Y+9	; 0x09
    2d38:	7a 85       	ldd	r23, Y+10	; 0x0a
    2d3a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d3c:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d3e:	0e 94 77 1b 	call	0x36ee	; 0x36ee <__addsf3>
    2d42:	0e 94 3c 23 	call	0x4678	; 0x4678 <sqrt>
	plaque_dist = static_cast<uint8_t>(tmp_plaque_dist);
    2d46:	0e 94 ca 19 	call	0x3394	; 0x3394 <__fixunssfsi>
    2d4a:	96 2e       	mov	r9, r22
    2d4c:	ed 81       	ldd	r30, Y+5	; 0x05
    2d4e:	fe 81       	ldd	r31, Y+6	; 0x06
    2d50:	60 83       	st	Z, r22
	// find the angle to the next plaque
	double tmp_plaque_angle = acos( ( pow(dist2,2) + pow(plaque_dist,2) - (dist1 * dist1) ) / 
						   			(2 * dist2 * plaque_dist)
					   			  );
    2d52:	70 e0       	ldi	r23, 0x00	; 0
    2d54:	80 e0       	ldi	r24, 0x00	; 0
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <__floatunsisf>
    2d5c:	9b 01       	movw	r18, r22
    2d5e:	ac 01       	movw	r20, r24
    2d60:	0e 94 a4 1b 	call	0x3748	; 0x3748 <__mulsf3>
    2d64:	a6 2f       	mov	r26, r22
    2d66:	f7 2f       	mov	r31, r23
    2d68:	e8 2f       	mov	r30, r24
    2d6a:	29 2f       	mov	r18, r25
    2d6c:	a3 01       	movw	r20, r6
    2d6e:	68 2d       	mov	r22, r8
    2d70:	75 2f       	mov	r23, r21
    2d72:	84 2f       	mov	r24, r20
    2d74:	95 2d       	mov	r25, r5
    2d76:	af 01       	movw	r20, r30
    2d78:	4a 2e       	mov	r4, r26
    2d7a:	55 2e       	mov	r5, r21
    2d7c:	64 2e       	mov	r6, r20
    2d7e:	72 2e       	mov	r7, r18
    2d80:	a3 01       	movw	r20, r6
    2d82:	92 01       	movw	r18, r4
    2d84:	0e 94 77 1b 	call	0x36ee	; 0x36ee <__addsf3>
    2d88:	2b 01       	movw	r4, r22
    2d8a:	3c 01       	movw	r6, r24
    2d8c:	6c 2d       	mov	r22, r12
    2d8e:	7d 2d       	mov	r23, r13
    2d90:	8e 2d       	mov	r24, r14
    2d92:	9f 2d       	mov	r25, r15
    2d94:	a7 01       	movw	r20, r14
    2d96:	96 01       	movw	r18, r12
    2d98:	0e 94 a4 1b 	call	0x3748	; 0x3748 <__mulsf3>
    2d9c:	9b 01       	movw	r18, r22
    2d9e:	ac 01       	movw	r20, r24
    2da0:	c3 01       	movw	r24, r6
    2da2:	b2 01       	movw	r22, r4
    2da4:	0e 94 46 1b 	call	0x368c	; 0x368c <__subsf3>
    2da8:	6b 01       	movw	r12, r22
    2daa:	7c 01       	movw	r14, r24
    2dac:	95 01       	movw	r18, r10
    2dae:	60 2f       	mov	r22, r16
    2db0:	71 2f       	mov	r23, r17
    2db2:	83 2f       	mov	r24, r19
    2db4:	92 2f       	mov	r25, r18
    2db6:	f5 01       	movw	r30, r10
    2db8:	20 2f       	mov	r18, r16
    2dba:	31 2f       	mov	r19, r17
    2dbc:	4f 2f       	mov	r20, r31
    2dbe:	5e 2f       	mov	r21, r30
    2dc0:	0e 94 77 1b 	call	0x36ee	; 0x36ee <__addsf3>
    2dc4:	2b 01       	movw	r4, r22
    2dc6:	3c 01       	movw	r6, r24
    2dc8:	29 2d       	mov	r18, r9
    2dca:	30 e0       	ldi	r19, 0x00	; 0
    2dcc:	b9 01       	movw	r22, r18
    2dce:	88 27       	eor	r24, r24
    2dd0:	77 fd       	sbrc	r23, 7
    2dd2:	80 95       	com	r24
    2dd4:	98 2f       	mov	r25, r24
    2dd6:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <__floatsisf>
    2dda:	9b 01       	movw	r18, r22
    2ddc:	ac 01       	movw	r20, r24
    2dde:	c3 01       	movw	r24, r6
    2de0:	b2 01       	movw	r22, r4
    2de2:	0e 94 a4 1b 	call	0x3748	; 0x3748 <__mulsf3>
    2de6:	9b 01       	movw	r18, r22
    2de8:	ac 01       	movw	r20, r24
    2dea:	c7 01       	movw	r24, r14
    2dec:	b6 01       	movw	r22, r12
    2dee:	0e 94 9c 1c 	call	0x3938	; 0x3938 <__divsf3>
    2df2:	0e 94 9c 21 	call	0x4338	; 0x4338 <acos>
	// convert back to degrees
	tmp_plaque_angle *= 180.00000 / PI; 
	plaque_angle = static_cast<uint16_t>(tmp_plaque_angle*10);
    2df6:	20 ee       	ldi	r18, 0xE0	; 224
    2df8:	3e e2       	ldi	r19, 0x2E	; 46
    2dfa:	45 e6       	ldi	r20, 0x65	; 101
    2dfc:	52 e4       	ldi	r21, 0x42	; 66
    2dfe:	0e 94 a4 1b 	call	0x3748	; 0x3748 <__mulsf3>
    2e02:	20 e0       	ldi	r18, 0x00	; 0
    2e04:	30 e0       	ldi	r19, 0x00	; 0
    2e06:	40 e2       	ldi	r20, 0x20	; 32
    2e08:	51 e4       	ldi	r21, 0x41	; 65
    2e0a:	0e 94 a4 1b 	call	0x3748	; 0x3748 <__mulsf3>
    2e0e:	0e 94 ca 19 	call	0x3394	; 0x3394 <__fixunssfsi>
    2e12:	ef 81       	ldd	r30, Y+7	; 0x07
    2e14:	f8 85       	ldd	r31, Y+8	; 0x08
    2e16:	71 83       	std	Z+1, r23	; 0x01
    2e18:	60 83       	st	Z, r22
}
    2e1a:	2c 96       	adiw	r28, 0x0c	; 12
    2e1c:	0f b6       	in	r0, 0x3f	; 63
    2e1e:	f8 94       	cli
    2e20:	de bf       	out	0x3e, r29	; 62
    2e22:	0f be       	out	0x3f, r0	; 63
    2e24:	cd bf       	out	0x3d, r28	; 61
    2e26:	cf 91       	pop	r28
    2e28:	df 91       	pop	r29
    2e2a:	1f 91       	pop	r17
    2e2c:	0f 91       	pop	r16
    2e2e:	ff 90       	pop	r15
    2e30:	ef 90       	pop	r14
    2e32:	df 90       	pop	r13
    2e34:	cf 90       	pop	r12
    2e36:	bf 90       	pop	r11
    2e38:	af 90       	pop	r10
    2e3a:	9f 90       	pop	r9
    2e3c:	8f 90       	pop	r8
    2e3e:	7f 90       	pop	r7
    2e40:	6f 90       	pop	r6
    2e42:	5f 90       	pop	r5
    2e44:	4f 90       	pop	r4
    2e46:	3f 90       	pop	r3
    2e48:	2f 90       	pop	r2
    2e4a:	08 95       	ret

00002e4c <_Z10goStraightjb>:
const uint8_t STRAIGHT_DUTY_CYCLE = 125;
const uint8_t MIN_DUTY_CYCLE = 50;
const uint8_t MAX_DUTY_CYCLE = 200;

void goStraight(uint16_t heading, bool reverse)
{
    2e4c:	9f 92       	push	r9
    2e4e:	af 92       	push	r10
    2e50:	bf 92       	push	r11
    2e52:	cf 92       	push	r12
    2e54:	df 92       	push	r13
    2e56:	ef 92       	push	r14
    2e58:	ff 92       	push	r15
    2e5a:	0f 93       	push	r16
    2e5c:	1f 93       	push	r17
    2e5e:	cf 93       	push	r28
    2e60:	df 93       	push	r29
    2e62:	8c 01       	movw	r16, r24
    2e64:	96 2e       	mov	r9, r22
	float targetHeading;  //setpoint
	float motorPower; 	//0 - 255 PWM on
	int lm, rm;

	// update PID here//checks for rollover with millis()
	if(millis() < lastPIDTime){
    2e66:	0e 94 1e 05 	call	0xa3c	; 0xa3c <millis>
    2e6a:	9b 01       	movw	r18, r22
    2e6c:	ac 01       	movw	r20, r24
    2e6e:	80 91 74 05 	lds	r24, 0x0574
    2e72:	90 91 75 05 	lds	r25, 0x0575
    2e76:	a0 91 76 05 	lds	r26, 0x0576
    2e7a:	b0 91 77 05 	lds	r27, 0x0577
    2e7e:	28 17       	cp	r18, r24
    2e80:	39 07       	cpc	r19, r25
    2e82:	4a 07       	cpc	r20, r26
    2e84:	5b 07       	cpc	r21, r27
    2e86:	40 f4       	brcc	.+16     	; 0x2e98 <_Z10goStraightjb+0x4c>
		lastPIDTime = 0;
    2e88:	10 92 74 05 	sts	0x0574, r1
    2e8c:	10 92 75 05 	sts	0x0575, r1
    2e90:	10 92 76 05 	sts	0x0576, r1
    2e94:	10 92 77 05 	sts	0x0577, r1
	}
	// can we make an adjustment??
	if((millis() - lastPIDTime) > 10){
    2e98:	0e 94 1e 05 	call	0xa3c	; 0xa3c <millis>
    2e9c:	20 91 74 05 	lds	r18, 0x0574
    2ea0:	30 91 75 05 	lds	r19, 0x0575
    2ea4:	40 91 76 05 	lds	r20, 0x0576
    2ea8:	50 91 77 05 	lds	r21, 0x0577
    2eac:	62 1b       	sub	r22, r18
    2eae:	73 0b       	sbc	r23, r19
    2eb0:	84 0b       	sbc	r24, r20
    2eb2:	95 0b       	sbc	r25, r21
    2eb4:	6b 30       	cpi	r22, 0x0B	; 11
    2eb6:	71 05       	cpc	r23, r1
    2eb8:	81 05       	cpc	r24, r1
    2eba:	91 05       	cpc	r25, r1
    2ebc:	08 f4       	brcc	.+2      	; 0x2ec0 <_Z10goStraightjb+0x74>
    2ebe:	a6 c0       	rjmp	.+332    	; 0x300c <_Z10goStraightjb+0x1c0>
		lastPIDTime += 10;
    2ec0:	26 5f       	subi	r18, 0xF6	; 246
    2ec2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ec4:	4f 4f       	sbci	r20, 0xFF	; 255
    2ec6:	5f 4f       	sbci	r21, 0xFF	; 255
    2ec8:	20 93 74 05 	sts	0x0574, r18
    2ecc:	30 93 75 05 	sts	0x0575, r19
    2ed0:	40 93 76 05 	sts	0x0576, r20
    2ed4:	50 93 77 05 	sts	0x0577, r21
		motorPower = updatePID(heading, compass.getHeading());  //takes setpoint and process variable
    2ed8:	85 eb       	ldi	r24, 0xB5	; 181
    2eda:	93 e0       	ldi	r25, 0x03	; 3
    2edc:	0e 94 53 18 	call	0x30a6	; 0x30a6 <_ZN14HMC6352compass10getHeadingEv>
    2ee0:	5c 01       	movw	r10, r24
    2ee2:	b8 01       	movw	r22, r16
    2ee4:	80 e0       	ldi	r24, 0x00	; 0
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <__floatunsisf>
    2eec:	7b 01       	movw	r14, r22
    2eee:	8c 01       	movw	r16, r24
    2ef0:	b5 01       	movw	r22, r10
    2ef2:	80 e0       	ldi	r24, 0x00	; 0
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <__floatunsisf>
    2efa:	9b 01       	movw	r18, r22
    2efc:	ac 01       	movw	r20, r24
    2efe:	c8 01       	movw	r24, r16
    2f00:	b7 01       	movw	r22, r14
    2f02:	0e 94 bc 18 	call	0x3178	; 0x3178 <_Z9updatePIDff>
    2f06:	5b 01       	movw	r10, r22
    2f08:	6c 01       	movw	r12, r24
		rm = constrain((STRAIGHT_DUTY_CYCLE) + motorPower, MIN_DUTY_CYCLE, MAX_DUTY_CYCLE);
    2f0a:	20 e0       	ldi	r18, 0x00	; 0
    2f0c:	30 e0       	ldi	r19, 0x00	; 0
    2f0e:	4a ef       	ldi	r20, 0xFA	; 250
    2f10:	52 e4       	ldi	r21, 0x42	; 66
    2f12:	0e 94 77 1b 	call	0x36ee	; 0x36ee <__addsf3>
    2f16:	7b 01       	movw	r14, r22
    2f18:	8c 01       	movw	r16, r24
    2f1a:	7f 2d       	mov	r23, r15
    2f1c:	91 2f       	mov	r25, r17
    2f1e:	20 e0       	ldi	r18, 0x00	; 0
    2f20:	30 e0       	ldi	r19, 0x00	; 0
    2f22:	48 e4       	ldi	r20, 0x48	; 72
    2f24:	52 e4       	ldi	r21, 0x42	; 66
    2f26:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <__ltsf2>
    2f2a:	88 23       	and	r24, r24
    2f2c:	1c f4       	brge	.+6      	; 0x2f34 <_Z10goStraightjb+0xe8>
    2f2e:	02 e3       	ldi	r16, 0x32	; 50
    2f30:	10 e0       	ldi	r17, 0x00	; 0
    2f32:	16 c0       	rjmp	.+44     	; 0x2f60 <_Z10goStraightjb+0x114>
    2f34:	6e 2d       	mov	r22, r14
    2f36:	7f 2d       	mov	r23, r15
    2f38:	80 2f       	mov	r24, r16
    2f3a:	91 2f       	mov	r25, r17
    2f3c:	20 e0       	ldi	r18, 0x00	; 0
    2f3e:	30 e0       	ldi	r19, 0x00	; 0
    2f40:	48 e4       	ldi	r20, 0x48	; 72
    2f42:	53 e4       	ldi	r21, 0x43	; 67
    2f44:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <__gtsf2>
    2f48:	18 16       	cp	r1, r24
    2f4a:	1c f4       	brge	.+6      	; 0x2f52 <_Z10goStraightjb+0x106>
    2f4c:	08 ec       	ldi	r16, 0xC8	; 200
    2f4e:	10 e0       	ldi	r17, 0x00	; 0
    2f50:	07 c0       	rjmp	.+14     	; 0x2f60 <_Z10goStraightjb+0x114>
    2f52:	6e 2d       	mov	r22, r14
    2f54:	7f 2d       	mov	r23, r15
    2f56:	80 2f       	mov	r24, r16
    2f58:	91 2f       	mov	r25, r17
    2f5a:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__fixsfsi>
    2f5e:	8b 01       	movw	r16, r22
		lm = constrain((STRAIGHT_DUTY_CYCLE) - motorPower, MIN_DUTY_CYCLE, MAX_DUTY_CYCLE);
    2f60:	60 e0       	ldi	r22, 0x00	; 0
    2f62:	70 e0       	ldi	r23, 0x00	; 0
    2f64:	8a ef       	ldi	r24, 0xFA	; 250
    2f66:	92 e4       	ldi	r25, 0x42	; 66
    2f68:	a6 01       	movw	r20, r12
    2f6a:	95 01       	movw	r18, r10
    2f6c:	0e 94 46 1b 	call	0x368c	; 0x368c <__subsf3>
    2f70:	d6 2e       	mov	r13, r22
    2f72:	a7 2e       	mov	r10, r23
    2f74:	7c 01       	movw	r14, r24
    2f76:	9f 2d       	mov	r25, r15
    2f78:	20 e0       	ldi	r18, 0x00	; 0
    2f7a:	30 e0       	ldi	r19, 0x00	; 0
    2f7c:	48 e4       	ldi	r20, 0x48	; 72
    2f7e:	52 e4       	ldi	r21, 0x42	; 66
    2f80:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <__ltsf2>
    2f84:	88 23       	and	r24, r24
    2f86:	1c f4       	brge	.+6      	; 0x2f8e <_Z10goStraightjb+0x142>
    2f88:	c2 e3       	ldi	r28, 0x32	; 50
    2f8a:	d0 e0       	ldi	r29, 0x00	; 0
    2f8c:	16 c0       	rjmp	.+44     	; 0x2fba <_Z10goStraightjb+0x16e>
    2f8e:	6d 2d       	mov	r22, r13
    2f90:	7a 2d       	mov	r23, r10
    2f92:	8e 2d       	mov	r24, r14
    2f94:	9f 2d       	mov	r25, r15
    2f96:	20 e0       	ldi	r18, 0x00	; 0
    2f98:	30 e0       	ldi	r19, 0x00	; 0
    2f9a:	48 e4       	ldi	r20, 0x48	; 72
    2f9c:	53 e4       	ldi	r21, 0x43	; 67
    2f9e:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <__gtsf2>
    2fa2:	18 16       	cp	r1, r24
    2fa4:	1c f4       	brge	.+6      	; 0x2fac <_Z10goStraightjb+0x160>
    2fa6:	c8 ec       	ldi	r28, 0xC8	; 200
    2fa8:	d0 e0       	ldi	r29, 0x00	; 0
    2faa:	07 c0       	rjmp	.+14     	; 0x2fba <_Z10goStraightjb+0x16e>
    2fac:	6d 2d       	mov	r22, r13
    2fae:	7a 2d       	mov	r23, r10
    2fb0:	8e 2d       	mov	r24, r14
    2fb2:	9f 2d       	mov	r25, r15
    2fb4:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__fixsfsi>
    2fb8:	eb 01       	movw	r28, r22
		// update the motors
		// determine the direction of travel
		if (reverse == true){
    2fba:	99 20       	and	r9, r9
    2fbc:	99 f0       	breq	.+38     	; 0x2fe4 <_Z10goStraightjb+0x198>
			motor_l.setSpeed(rm);
    2fbe:	89 eb       	ldi	r24, 0xB9	; 185
    2fc0:	93 e0       	ldi	r25, 0x03	; 3
    2fc2:	60 2f       	mov	r22, r16
    2fc4:	0e 94 14 08 	call	0x1028	; 0x1028 <_ZN10AF_DCMotor8setSpeedEh>
			motor_r.setSpeed(lm);
    2fc8:	8b eb       	ldi	r24, 0xBB	; 187
    2fca:	93 e0       	ldi	r25, 0x03	; 3
    2fcc:	6c 2f       	mov	r22, r28
    2fce:	0e 94 14 08 	call	0x1028	; 0x1028 <_ZN10AF_DCMotor8setSpeedEh>
			motor_l.run(BACKWARD);
    2fd2:	89 eb       	ldi	r24, 0xB9	; 185
    2fd4:	93 e0       	ldi	r25, 0x03	; 3
    2fd6:	62 e0       	ldi	r22, 0x02	; 2
    2fd8:	0e 94 85 0a 	call	0x150a	; 0x150a <_ZN10AF_DCMotor3runEh>
 			motor_r.run(BACKWARD);
    2fdc:	8b eb       	ldi	r24, 0xBB	; 187
    2fde:	93 e0       	ldi	r25, 0x03	; 3
    2fe0:	62 e0       	ldi	r22, 0x02	; 2
    2fe2:	12 c0       	rjmp	.+36     	; 0x3008 <_Z10goStraightjb+0x1bc>
		}
		else{
			motor_l.setSpeed(lm);
    2fe4:	89 eb       	ldi	r24, 0xB9	; 185
    2fe6:	93 e0       	ldi	r25, 0x03	; 3
    2fe8:	6c 2f       	mov	r22, r28
    2fea:	0e 94 14 08 	call	0x1028	; 0x1028 <_ZN10AF_DCMotor8setSpeedEh>
			motor_r.setSpeed(rm);
    2fee:	8b eb       	ldi	r24, 0xBB	; 187
    2ff0:	93 e0       	ldi	r25, 0x03	; 3
    2ff2:	60 2f       	mov	r22, r16
    2ff4:	0e 94 14 08 	call	0x1028	; 0x1028 <_ZN10AF_DCMotor8setSpeedEh>
			motor_l.run(FORWARD);
    2ff8:	89 eb       	ldi	r24, 0xB9	; 185
    2ffa:	93 e0       	ldi	r25, 0x03	; 3
    2ffc:	61 e0       	ldi	r22, 0x01	; 1
    2ffe:	0e 94 85 0a 	call	0x150a	; 0x150a <_ZN10AF_DCMotor3runEh>
 			motor_r.run(FORWARD);
    3002:	8b eb       	ldi	r24, 0xBB	; 187
    3004:	93 e0       	ldi	r25, 0x03	; 3
    3006:	61 e0       	ldi	r22, 0x01	; 1
    3008:	0e 94 85 0a 	call	0x150a	; 0x150a <_ZN10AF_DCMotor3runEh>
		}
	}
}
    300c:	df 91       	pop	r29
    300e:	cf 91       	pop	r28
    3010:	1f 91       	pop	r17
    3012:	0f 91       	pop	r16
    3014:	ff 90       	pop	r15
    3016:	ef 90       	pop	r14
    3018:	df 90       	pop	r13
    301a:	cf 90       	pop	r12
    301c:	bf 90       	pop	r11
    301e:	af 90       	pop	r10
    3020:	9f 90       	pop	r9
    3022:	08 95       	ret

00003024 <_ZN14HMC6352compass14getLastHeadingEv>:
	// return the heading
	return return_value;
}

uint16_t HMC6352compass::getLastHeading()
{
    3024:	fc 01       	movw	r30, r24
	return _last_heading;
}
    3026:	82 81       	ldd	r24, Z+2	; 0x02
    3028:	93 81       	ldd	r25, Z+3	; 0x03
    302a:	08 95       	ret

0000302c <_ZN14HMC6352compass16enterCalibrationEv>:

void HMC6352compass::enterCalibration()
{
    302c:	ef 92       	push	r14
    302e:	ff 92       	push	r15
    3030:	0f 93       	push	r16
    3032:	1f 93       	push	r17
    3034:	cf 93       	push	r28
    3036:	df 93       	push	r29
    3038:	ec 01       	movw	r28, r24
	// send the calibration command (write)
	_wire.beginTransmission(_address & 0xfe);
    303a:	8c 01       	movw	r16, r24
    303c:	69 81       	ldd	r22, Y+1	; 0x01
    303e:	70 e0       	ldi	r23, 0x00	; 0
    3040:	6e 7f       	andi	r22, 0xFE	; 254
    3042:	70 70       	andi	r23, 0x00	; 0
    3044:	7e 01       	movw	r14, r28
    3046:	9f 2d       	mov	r25, r15
    3048:	0e 94 3d 11 	call	0x227a	; 0x227a <_ZN7TwoWire17beginTransmissionEi>
	// The "Calibrate" command
	_wire.send('C');
    304c:	ce 01       	movw	r24, r28
    304e:	63 e4       	ldi	r22, 0x43	; 67
    3050:	70 e0       	ldi	r23, 0x00	; 0
    3052:	0e 94 c0 11 	call	0x2380	; 0x2380 <_ZN7TwoWire4sendEi>
	// A bus stop state
  	_wire.endTransmission();
    3056:	ce 01       	movw	r24, r28
    3058:	0e 94 fd 11 	call	0x23fa	; 0x23fa <_ZN7TwoWire15endTransmissionEv>
    305c:	ee 24       	eor	r14, r14
    305e:	ff 24       	eor	r15, r15

	// start the calibrate loop - toggle the status LED
	for (int i=0; i<20; i++){
		delay(1000);
    3060:	68 ee       	ldi	r22, 0xE8	; 232
    3062:	73 e0       	ldi	r23, 0x03	; 3
    3064:	80 e0       	ldi	r24, 0x00	; 0
    3066:	90 e0       	ldi	r25, 0x00	; 0
    3068:	0e 94 52 05 	call	0xaa4	; 0xaa4 <delay>
	_wire.send('C');
	// A bus stop state
  	_wire.endTransmission();

	// start the calibrate loop - toggle the status LED
	for (int i=0; i<20; i++){
    306c:	08 94       	sec
    306e:	e1 1c       	adc	r14, r1
    3070:	f1 1c       	adc	r15, r1
    3072:	24 e1       	ldi	r18, 0x14	; 20
    3074:	e2 16       	cp	r14, r18
    3076:	f1 04       	cpc	r15, r1
    3078:	99 f7       	brne	.-26     	; 0x3060 <_ZN14HMC6352compass16enterCalibrationEv+0x34>
		delay(1000);
	}

	// send the calibration command (write)
	_wire.beginTransmission(_address & 0xfe);
    307a:	69 81       	ldd	r22, Y+1	; 0x01
    307c:	70 e0       	ldi	r23, 0x00	; 0
    307e:	6e 7f       	andi	r22, 0xFE	; 254
    3080:	70 70       	andi	r23, 0x00	; 0
    3082:	c8 01       	movw	r24, r16
    3084:	0e 94 3d 11 	call	0x227a	; 0x227a <_ZN7TwoWire17beginTransmissionEi>
	// The "Exit" command
	_wire.send('E');
    3088:	c8 01       	movw	r24, r16
    308a:	65 e4       	ldi	r22, 0x45	; 69
    308c:	70 e0       	ldi	r23, 0x00	; 0
    308e:	0e 94 c0 11 	call	0x2380	; 0x2380 <_ZN7TwoWire4sendEi>
	// A bus stop state
  	_wire.endTransmission();
    3092:	c8 01       	movw	r24, r16
    3094:	0e 94 fd 11 	call	0x23fa	; 0x23fa <_ZN7TwoWire15endTransmissionEv>
}
    3098:	df 91       	pop	r29
    309a:	cf 91       	pop	r28
    309c:	1f 91       	pop	r17
    309e:	0f 91       	pop	r16
    30a0:	ff 90       	pop	r15
    30a2:	ef 90       	pop	r14
    30a4:	08 95       	ret

000030a6 <_ZN14HMC6352compass10getHeadingEv>:
	// start the I2C peripheral as a master
	_wire.begin();
}

uint16_t HMC6352compass::getHeading()
{
    30a6:	ef 92       	push	r14
    30a8:	ff 92       	push	r15
    30aa:	0f 93       	push	r16
    30ac:	1f 93       	push	r17
    30ae:	cf 93       	push	r28
    30b0:	df 93       	push	r29
    30b2:	ec 01       	movw	r28, r24
	uint16_t return_value;
	// Start the read process
	_wire.beginTransmission(_address);
    30b4:	8c 01       	movw	r16, r24
    30b6:	7e 01       	movw	r14, r28
    30b8:	9f 2d       	mov	r25, r15
    30ba:	69 81       	ldd	r22, Y+1	; 0x01
    30bc:	0e 94 33 11 	call	0x2266	; 0x2266 <_ZN7TwoWire17beginTransmissionEh>
	// The "Get Data" command
	_wire.send('A');
    30c0:	ce 01       	movw	r24, r28
    30c2:	61 e4       	ldi	r22, 0x41	; 65
    30c4:	70 e0       	ldi	r23, 0x00	; 0
    30c6:	0e 94 c0 11 	call	0x2380	; 0x2380 <_ZN7TwoWire4sendEi>
	// A bus stop state
  	_wire.endTransmission();
    30ca:	ce 01       	movw	r24, r28
    30cc:	0e 94 fd 11 	call	0x23fa	; 0x23fa <_ZN7TwoWire15endTransmissionEv>
	// wait for the device to calculate (should be at least 6000uS)
	delay(6);
    30d0:	66 e0       	ldi	r22, 0x06	; 6
    30d2:	70 e0       	ldi	r23, 0x00	; 0
    30d4:	80 e0       	ldi	r24, 0x00	; 0
    30d6:	90 e0       	ldi	r25, 0x00	; 0
    30d8:	0e 94 52 05 	call	0xaa4	; 0xaa4 <delay>
	// get the data from the compass
	_wire.requestFrom(_address, 2);
    30dc:	69 81       	ldd	r22, Y+1	; 0x01
    30de:	ce 01       	movw	r24, r28
    30e0:	70 e0       	ldi	r23, 0x00	; 0
    30e2:	42 e0       	ldi	r20, 0x02	; 2
    30e4:	50 e0       	ldi	r21, 0x00	; 0
    30e6:	0e 94 1a 12 	call	0x2434	; 0x2434 <_ZN7TwoWire11requestFromEii>
	// wait until something is available
	while(!_wire.available());
    30ea:	c8 01       	movw	r24, r16
    30ec:	0e 94 47 11 	call	0x228e	; 0x228e <_ZN7TwoWire9availableEv>
    30f0:	88 23       	and	r24, r24
    30f2:	d9 f3       	breq	.-10     	; 0x30ea <_ZN14HMC6352compass10getHeadingEv+0x44>
	// justify the result
	return_value = (_wire.receive() << 8);
    30f4:	c8 01       	movw	r24, r16
    30f6:	0e 94 4d 11 	call	0x229a	; 0x229a <_ZN7TwoWire7receiveEv>
    30fa:	f8 2e       	mov	r15, r24
	// wait for the next byte
	while(!_wire.available());
    30fc:	c8 01       	movw	r24, r16
    30fe:	0e 94 47 11 	call	0x228e	; 0x228e <_ZN7TwoWire9availableEv>
    3102:	88 23       	and	r24, r24
    3104:	d9 f3       	breq	.-10     	; 0x30fc <_ZN14HMC6352compass10getHeadingEv+0x56>
	// mask the new read with the last read
	return_value |= _wire.receive();
    3106:	c8 01       	movw	r24, r16
    3108:	0e 94 4d 11 	call	0x229a	; 0x229a <_ZN7TwoWire7receiveEv>
	// get the data from the compass
	_wire.requestFrom(_address, 2);
	// wait until something is available
	while(!_wire.available());
	// justify the result
	return_value = (_wire.receive() << 8);
    310c:	5f 2d       	mov	r21, r15
    310e:	40 e0       	ldi	r20, 0x00	; 0
	// wait for the next byte
	while(!_wire.available());
	// mask the new read with the last read
	return_value |= _wire.receive();
    3110:	28 2f       	mov	r18, r24
    3112:	30 e0       	ldi	r19, 0x00	; 0
    3114:	24 2b       	or	r18, r20
    3116:	35 2b       	or	r19, r21
	// store the last heading
	_last_heading = return_value;
    3118:	3b 83       	std	Y+3, r19	; 0x03
    311a:	2a 83       	std	Y+2, r18	; 0x02
	// return the heading
	return return_value;
}
    311c:	c9 01       	movw	r24, r18
    311e:	df 91       	pop	r29
    3120:	cf 91       	pop	r28
    3122:	1f 91       	pop	r17
    3124:	0f 91       	pop	r16
    3126:	ff 90       	pop	r15
    3128:	ef 90       	pop	r14
    312a:	08 95       	ret

0000312c <_ZN14HMC6352compassC1Ev>:

#include "compass.h"

HMC6352compass::HMC6352compass()
    312c:	ef 92       	push	r14
    312e:	ff 92       	push	r15
    3130:	cf 93       	push	r28
    3132:	df 93       	push	r29
    3134:	ec 01       	movw	r28, r24
    3136:	7e 01       	movw	r14, r28
    3138:	9f 2d       	mov	r25, r15
    313a:	0e 94 32 11 	call	0x2264	; 0x2264 <_ZN7TwoWireC1Ev>
{
	// define the read address (data sheet specifies 0x43) TWI does a << 1 so 0x21 = 0x43
	 _address = 0x21;
    313e:	81 e2       	ldi	r24, 0x21	; 33
    3140:	89 83       	std	Y+1, r24	; 0x01
	// start the I2C peripheral as a master
	_wire.begin();
    3142:	ce 01       	movw	r24, r28
    3144:	0e 94 1d 12 	call	0x243a	; 0x243a <_ZN7TwoWire5beginEv>
}
    3148:	df 91       	pop	r29
    314a:	cf 91       	pop	r28
    314c:	ff 90       	pop	r15
    314e:	ef 90       	pop	r14
    3150:	08 95       	ret

00003152 <_ZN14HMC6352compassC2Ev>:

#include "compass.h"

HMC6352compass::HMC6352compass()
    3152:	ef 92       	push	r14
    3154:	ff 92       	push	r15
    3156:	cf 93       	push	r28
    3158:	df 93       	push	r29
    315a:	ec 01       	movw	r28, r24
    315c:	7e 01       	movw	r14, r28
    315e:	9f 2d       	mov	r25, r15
    3160:	0e 94 32 11 	call	0x2264	; 0x2264 <_ZN7TwoWireC1Ev>
{
	// define the read address (data sheet specifies 0x43) TWI does a << 1 so 0x21 = 0x43
	 _address = 0x21;
    3164:	81 e2       	ldi	r24, 0x21	; 33
    3166:	89 83       	std	Y+1, r24	; 0x01
	// start the I2C peripheral as a master
	_wire.begin();
    3168:	ce 01       	movw	r24, r28
    316a:	0e 94 1d 12 	call	0x243a	; 0x243a <_ZN7TwoWire5beginEv>
}
    316e:	df 91       	pop	r29
    3170:	cf 91       	pop	r28
    3172:	ff 90       	pop	r15
    3174:	ef 90       	pop	r14
    3176:	08 95       	ret

00003178 <_Z9updatePIDff>:
const float igain = 0.01;
const float dgain = 1.0;
const float WINDUP_GUARD_GAIN = 100.0;

float updatePID(float targetHeading, float curHeading)
{
    3178:	2f 92       	push	r2
    317a:	3f 92       	push	r3
    317c:	4f 92       	push	r4
    317e:	5f 92       	push	r5
    3180:	6f 92       	push	r6
    3182:	7f 92       	push	r7
    3184:	8f 92       	push	r8
    3186:	9f 92       	push	r9
    3188:	af 92       	push	r10
    318a:	bf 92       	push	r11
    318c:	cf 92       	push	r12
    318e:	df 92       	push	r13
    3190:	ef 92       	push	r14
    3192:	ff 92       	push	r15
    3194:	0f 93       	push	r16
    3196:	1f 93       	push	r17
    3198:	59 01       	movw	r10, r18
    319a:	6a 01       	movw	r12, r20
	double result;
	float error;
	float windupGuard;

	//determine error
	error = targetHeading - curHeading;
    319c:	0e 94 46 1b 	call	0x368c	; 0x368c <__subsf3>
    31a0:	7b 01       	movw	r14, r22
    31a2:	8c 01       	movw	r16, r24

	//limit rotation
	if(error > 1800){
    31a4:	7f 2d       	mov	r23, r15
    31a6:	91 2f       	mov	r25, r17
    31a8:	20 e0       	ldi	r18, 0x00	; 0
    31aa:	30 e0       	ldi	r19, 0x00	; 0
    31ac:	41 ee       	ldi	r20, 0xE1	; 225
    31ae:	54 e4       	ldi	r21, 0x44	; 68
    31b0:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <__gtsf2>
    31b4:	18 16       	cp	r1, r24
    31b6:	5c f4       	brge	.+22     	; 0x31ce <_Z9updatePIDff+0x56>
		error -= 3600;
    31b8:	6e 2d       	mov	r22, r14
    31ba:	7f 2d       	mov	r23, r15
    31bc:	80 2f       	mov	r24, r16
    31be:	91 2f       	mov	r25, r17
    31c0:	20 e0       	ldi	r18, 0x00	; 0
    31c2:	30 e0       	ldi	r19, 0x00	; 0
    31c4:	41 e6       	ldi	r20, 0x61	; 97
    31c6:	55 e4       	ldi	r21, 0x45	; 69
    31c8:	0e 94 46 1b 	call	0x368c	; 0x368c <__subsf3>
    31cc:	16 c0       	rjmp	.+44     	; 0x31fa <_Z9updatePIDff+0x82>
	}
	else if (error < -1800){
    31ce:	6e 2d       	mov	r22, r14
    31d0:	7f 2d       	mov	r23, r15
    31d2:	80 2f       	mov	r24, r16
    31d4:	91 2f       	mov	r25, r17
    31d6:	20 e0       	ldi	r18, 0x00	; 0
    31d8:	30 e0       	ldi	r19, 0x00	; 0
    31da:	41 ee       	ldi	r20, 0xE1	; 225
    31dc:	54 ec       	ldi	r21, 0xC4	; 196
    31de:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <__ltsf2>
    31e2:	88 23       	and	r24, r24
    31e4:	64 f4       	brge	.+24     	; 0x31fe <_Z9updatePIDff+0x86>
		error += 3600;
    31e6:	6e 2d       	mov	r22, r14
    31e8:	7f 2d       	mov	r23, r15
    31ea:	80 2f       	mov	r24, r16
    31ec:	91 2f       	mov	r25, r17
    31ee:	20 e0       	ldi	r18, 0x00	; 0
    31f0:	30 e0       	ldi	r19, 0x00	; 0
    31f2:	41 e6       	ldi	r20, 0x61	; 97
    31f4:	55 e4       	ldi	r21, 0x45	; 69
    31f6:	0e 94 77 1b 	call	0x36ee	; 0x36ee <__addsf3>
    31fa:	7b 01       	movw	r14, r22
    31fc:	8c 01       	movw	r16, r24
	}

	/*---------------PROPORTIONAL---------------*/
	//the pTerm is the present, it is the instantaneous error
	pTerm = pgain * error;
    31fe:	6e 2d       	mov	r22, r14
    3200:	7f 2d       	mov	r23, r15
    3202:	80 2f       	mov	r24, r16
    3204:	91 2f       	mov	r25, r17
    3206:	26 e6       	ldi	r18, 0x66	; 102
    3208:	36 e6       	ldi	r19, 0x66	; 102
    320a:	46 e6       	ldi	r20, 0x66	; 102
    320c:	5f e3       	ldi	r21, 0x3F	; 63
    320e:	0e 94 a4 1b 	call	0x3748	; 0x3748 <__mulsf3>
    3212:	56 2e       	mov	r5, r22
    3214:	47 2e       	mov	r4, r23
    3216:	38 2e       	mov	r3, r24
    3218:	29 2e       	mov	r2, r25
    321a:	a2 01       	movw	r20, r4
    321c:	91 01       	movw	r18, r2
    321e:	85 2f       	mov	r24, r21
    3220:	94 2f       	mov	r25, r20
    3222:	a3 2f       	mov	r26, r19
    3224:	b2 2f       	mov	r27, r18
    3226:	80 93 82 05 	sts	0x0582, r24
    322a:	90 93 83 05 	sts	0x0583, r25
    322e:	a0 93 84 05 	sts	0x0584, r26
    3232:	b0 93 85 05 	sts	0x0585, r27
	/*---------------PROPORTIONAL---------------*/

	/*---------------INTEGRAL---------------*/
	//iState is the past, it is the accumulated error over time
	iState += error;
    3236:	6e 2d       	mov	r22, r14
    3238:	7f 2d       	mov	r23, r15
    323a:	80 2f       	mov	r24, r16
    323c:	91 2f       	mov	r25, r17
    323e:	20 91 7a 05 	lds	r18, 0x057A
    3242:	30 91 7b 05 	lds	r19, 0x057B
    3246:	40 91 7c 05 	lds	r20, 0x057C
    324a:	50 91 7d 05 	lds	r21, 0x057D
    324e:	0e 94 77 1b 	call	0x36ee	; 0x36ee <__addsf3>
    3252:	7b 01       	movw	r14, r22
    3254:	8c 01       	movw	r16, r24
    3256:	86 2f       	mov	r24, r22
    3258:	9f 2d       	mov	r25, r15
    325a:	a0 2f       	mov	r26, r16
    325c:	b1 2f       	mov	r27, r17
    325e:	80 93 7a 05 	sts	0x057A, r24
    3262:	90 93 7b 05 	sts	0x057B, r25
    3266:	a0 93 7c 05 	sts	0x057C, r26
    326a:	b0 93 7d 05 	sts	0x057D, r27
	//it from not being able to correct itself

	//make windup guard values relative to current iGain
	windupGuard = WINDUP_GUARD_GAIN / igain;

	if(iState > windupGuard){//protects against excessive positive error
    326e:	6e 2d       	mov	r22, r14
    3270:	7f 2d       	mov	r23, r15
    3272:	80 2f       	mov	r24, r16
    3274:	91 2f       	mov	r25, r17
    3276:	20 e0       	ldi	r18, 0x00	; 0
    3278:	30 e4       	ldi	r19, 0x40	; 64
    327a:	4c e1       	ldi	r20, 0x1C	; 28
    327c:	56 e4       	ldi	r21, 0x46	; 70
    327e:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <__gtsf2>
    3282:	18 16       	cp	r1, r24
    3284:	2c f4       	brge	.+10     	; 0x3290 <_Z9updatePIDff+0x118>
		iState = windupGuard;
    3286:	80 e0       	ldi	r24, 0x00	; 0
    3288:	90 e4       	ldi	r25, 0x40	; 64
    328a:	ac e1       	ldi	r26, 0x1C	; 28
    328c:	b6 e4       	ldi	r27, 0x46	; 70
    328e:	10 c0       	rjmp	.+32     	; 0x32b0 <_Z9updatePIDff+0x138>
	}
	else if(iState < -windupGuard){//protects against excessive negative error
    3290:	6e 2d       	mov	r22, r14
    3292:	7f 2d       	mov	r23, r15
    3294:	80 2f       	mov	r24, r16
    3296:	91 2f       	mov	r25, r17
    3298:	20 e0       	ldi	r18, 0x00	; 0
    329a:	30 e4       	ldi	r19, 0x40	; 64
    329c:	4c e1       	ldi	r20, 0x1C	; 28
    329e:	56 ec       	ldi	r21, 0xC6	; 198
    32a0:	0e 94 aa 1d 	call	0x3b54	; 0x3b54 <__ltsf2>
    32a4:	88 23       	and	r24, r24
    32a6:	64 f4       	brge	.+24     	; 0x32c0 <_Z9updatePIDff+0x148>
		iState = -windupGuard;
    32a8:	80 e0       	ldi	r24, 0x00	; 0
    32aa:	90 e4       	ldi	r25, 0x40	; 64
    32ac:	ac e1       	ldi	r26, 0x1C	; 28
    32ae:	b6 ec       	ldi	r27, 0xC6	; 198
    32b0:	80 93 7a 05 	sts	0x057A, r24
    32b4:	90 93 7b 05 	sts	0x057B, r25
    32b8:	a0 93 7c 05 	sts	0x057C, r26
    32bc:	b0 93 7d 05 	sts	0x057D, r27
	}

	//accumulated error multiplied by the gain determine the iTerm
	iTerm = igain * iState;
    32c0:	60 91 7a 05 	lds	r22, 0x057A
    32c4:	70 91 7b 05 	lds	r23, 0x057B
    32c8:	80 91 7c 05 	lds	r24, 0x057C
    32cc:	90 91 7d 05 	lds	r25, 0x057D
    32d0:	2a e0       	ldi	r18, 0x0A	; 10
    32d2:	37 ed       	ldi	r19, 0xD7	; 215
    32d4:	43 e2       	ldi	r20, 0x23	; 35
    32d6:	5c e3       	ldi	r21, 0x3C	; 60
    32d8:	0e 94 a4 1b 	call	0x3748	; 0x3748 <__mulsf3>
    32dc:	8b 01       	movw	r16, r22
    32de:	f8 2e       	mov	r15, r24
    32e0:	e9 2e       	mov	r14, r25
    32e2:	97 01       	movw	r18, r14
    32e4:	86 2f       	mov	r24, r22
    32e6:	91 2f       	mov	r25, r17
    32e8:	a3 2f       	mov	r26, r19
    32ea:	b2 2f       	mov	r27, r18
    32ec:	80 93 86 05 	sts	0x0586, r24
    32f0:	90 93 87 05 	sts	0x0587, r25
    32f4:	a0 93 88 05 	sts	0x0588, r26
    32f8:	b0 93 89 05 	sts	0x0589, r27
	/*---------------INTEGRAL---------------*/

	/*---------------DERIVATIVE---------------*/
	//The dTerm is the future, it is the rate at which the heading is changing
	dTerm = (dgain * (curHeading - lastHeading));
    32fc:	c6 01       	movw	r24, r12
    32fe:	b5 01       	movw	r22, r10
    3300:	20 91 7e 05 	lds	r18, 0x057E
    3304:	30 91 7f 05 	lds	r19, 0x057F
    3308:	40 91 80 05 	lds	r20, 0x0580
    330c:	50 91 81 05 	lds	r21, 0x0581
    3310:	0e 94 46 1b 	call	0x368c	; 0x368c <__subsf3>
    3314:	96 2e       	mov	r9, r22
    3316:	87 2e       	mov	r8, r23
    3318:	78 2e       	mov	r7, r24
    331a:	69 2e       	mov	r6, r25
    331c:	a4 01       	movw	r20, r8
    331e:	93 01       	movw	r18, r6
    3320:	85 2f       	mov	r24, r21
    3322:	94 2f       	mov	r25, r20
    3324:	a3 2f       	mov	r26, r19
    3326:	b2 2f       	mov	r27, r18
    3328:	80 93 8a 05 	sts	0x058A, r24
    332c:	90 93 8b 05 	sts	0x058B, r25
    3330:	a0 93 8c 05 	sts	0x058C, r26
    3334:	b0 93 8d 05 	sts	0x058D, r27

	//store the current temperature
	lastHeading = curHeading;
    3338:	a0 92 7e 05 	sts	0x057E, r10
    333c:	b0 92 7f 05 	sts	0x057F, r11
    3340:	c0 92 80 05 	sts	0x0580, r12
    3344:	d0 92 81 05 	sts	0x0581, r13
    3348:	a2 01       	movw	r20, r4
    334a:	91 01       	movw	r18, r2
    334c:	65 2f       	mov	r22, r21
    334e:	74 2d       	mov	r23, r4
    3350:	83 2f       	mov	r24, r19
    3352:	92 2d       	mov	r25, r2
    3354:	f7 01       	movw	r30, r14
    3356:	20 2f       	mov	r18, r16
    3358:	31 2f       	mov	r19, r17
    335a:	4f 2f       	mov	r20, r31
    335c:	5e 2f       	mov	r21, r30
    335e:	0e 94 77 1b 	call	0x36ee	; 0x36ee <__addsf3>
    3362:	d4 01       	movw	r26, r8
    3364:	f3 01       	movw	r30, r6
    3366:	2b 2f       	mov	r18, r27
    3368:	3a 2f       	mov	r19, r26
    336a:	4f 2f       	mov	r20, r31
    336c:	5e 2f       	mov	r21, r30
    336e:	0e 94 46 1b 	call	0x368c	; 0x368c <__subsf3>

	//feedback
	return pTerm + iTerm - dTerm;
}
    3372:	1f 91       	pop	r17
    3374:	0f 91       	pop	r16
    3376:	ff 90       	pop	r15
    3378:	ef 90       	pop	r14
    337a:	df 90       	pop	r13
    337c:	cf 90       	pop	r12
    337e:	bf 90       	pop	r11
    3380:	af 90       	pop	r10
    3382:	9f 90       	pop	r9
    3384:	8f 90       	pop	r8
    3386:	7f 90       	pop	r7
    3388:	6f 90       	pop	r6
    338a:	5f 90       	pop	r5
    338c:	4f 90       	pop	r4
    338e:	3f 90       	pop	r3
    3390:	2f 90       	pop	r2
    3392:	08 95       	ret

00003394 <__fixunssfsi>:
    3394:	ef 92       	push	r14
    3396:	ff 92       	push	r15
    3398:	0f 93       	push	r16
    339a:	1f 93       	push	r17
    339c:	7b 01       	movw	r14, r22
    339e:	8c 01       	movw	r16, r24
    33a0:	20 e0       	ldi	r18, 0x00	; 0
    33a2:	30 e0       	ldi	r19, 0x00	; 0
    33a4:	40 e0       	ldi	r20, 0x00	; 0
    33a6:	5f e4       	ldi	r21, 0x4F	; 79
    33a8:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <__gesf2>
    33ac:	88 23       	and	r24, r24
    33ae:	8c f0       	brlt	.+34     	; 0x33d2 <__fixunssfsi+0x3e>
    33b0:	c8 01       	movw	r24, r16
    33b2:	b7 01       	movw	r22, r14
    33b4:	20 e0       	ldi	r18, 0x00	; 0
    33b6:	30 e0       	ldi	r19, 0x00	; 0
    33b8:	40 e0       	ldi	r20, 0x00	; 0
    33ba:	5f e4       	ldi	r21, 0x4F	; 79
    33bc:	0e 94 46 1b 	call	0x368c	; 0x368c <__subsf3>
    33c0:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__fixsfsi>
    33c4:	9b 01       	movw	r18, r22
    33c6:	ac 01       	movw	r20, r24
    33c8:	20 50       	subi	r18, 0x00	; 0
    33ca:	30 40       	sbci	r19, 0x00	; 0
    33cc:	40 40       	sbci	r20, 0x00	; 0
    33ce:	50 48       	sbci	r21, 0x80	; 128
    33d0:	06 c0       	rjmp	.+12     	; 0x33de <__fixunssfsi+0x4a>
    33d2:	c8 01       	movw	r24, r16
    33d4:	b7 01       	movw	r22, r14
    33d6:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__fixsfsi>
    33da:	9b 01       	movw	r18, r22
    33dc:	ac 01       	movw	r20, r24
    33de:	b9 01       	movw	r22, r18
    33e0:	ca 01       	movw	r24, r20
    33e2:	1f 91       	pop	r17
    33e4:	0f 91       	pop	r16
    33e6:	ff 90       	pop	r15
    33e8:	ef 90       	pop	r14
    33ea:	08 95       	ret

000033ec <_fpadd_parts>:
    33ec:	a0 e0       	ldi	r26, 0x00	; 0
    33ee:	b0 e0       	ldi	r27, 0x00	; 0
    33f0:	ec ef       	ldi	r30, 0xFC	; 252
    33f2:	f9 e1       	ldi	r31, 0x19	; 25
    33f4:	0c 94 61 21 	jmp	0x42c2	; 0x42c2 <__prologue_saves__+0x4>
    33f8:	fc 01       	movw	r30, r24
    33fa:	2b 01       	movw	r4, r22
    33fc:	ea 01       	movw	r28, r20
    33fe:	80 81       	ld	r24, Z
    3400:	82 30       	cpi	r24, 0x02	; 2
    3402:	08 f4       	brcc	.+2      	; 0x3406 <_fpadd_parts+0x1a>
    3404:	3d c1       	rjmp	.+634    	; 0x3680 <_fpadd_parts+0x294>
    3406:	db 01       	movw	r26, r22
    3408:	9c 91       	ld	r25, X
    340a:	92 30       	cpi	r25, 0x02	; 2
    340c:	08 f4       	brcc	.+2      	; 0x3410 <_fpadd_parts+0x24>
    340e:	37 c1       	rjmp	.+622    	; 0x367e <_fpadd_parts+0x292>
    3410:	84 30       	cpi	r24, 0x04	; 4
    3412:	69 f4       	brne	.+26     	; 0x342e <_fpadd_parts+0x42>
    3414:	94 30       	cpi	r25, 0x04	; 4
    3416:	09 f0       	breq	.+2      	; 0x341a <_fpadd_parts+0x2e>
    3418:	33 c1       	rjmp	.+614    	; 0x3680 <_fpadd_parts+0x294>
    341a:	91 81       	ldd	r25, Z+1	; 0x01
    341c:	11 96       	adiw	r26, 0x01	; 1
    341e:	8c 91       	ld	r24, X
    3420:	11 97       	sbiw	r26, 0x01	; 1
    3422:	98 17       	cp	r25, r24
    3424:	09 f4       	brne	.+2      	; 0x3428 <_fpadd_parts+0x3c>
    3426:	2c c1       	rjmp	.+600    	; 0x3680 <_fpadd_parts+0x294>
    3428:	e6 e3       	ldi	r30, 0x36	; 54
    342a:	f1 e0       	ldi	r31, 0x01	; 1
    342c:	29 c1       	rjmp	.+594    	; 0x3680 <_fpadd_parts+0x294>
    342e:	94 30       	cpi	r25, 0x04	; 4
    3430:	09 f4       	brne	.+2      	; 0x3434 <_fpadd_parts+0x48>
    3432:	25 c1       	rjmp	.+586    	; 0x367e <_fpadd_parts+0x292>
    3434:	92 30       	cpi	r25, 0x02	; 2
    3436:	a9 f4       	brne	.+42     	; 0x3462 <_fpadd_parts+0x76>
    3438:	82 30       	cpi	r24, 0x02	; 2
    343a:	09 f0       	breq	.+2      	; 0x343e <_fpadd_parts+0x52>
    343c:	21 c1       	rjmp	.+578    	; 0x3680 <_fpadd_parts+0x294>
    343e:	9f 01       	movw	r18, r30
    3440:	88 e0       	ldi	r24, 0x08	; 8
    3442:	d9 01       	movw	r26, r18
    3444:	0d 90       	ld	r0, X+
    3446:	9d 01       	movw	r18, r26
    3448:	da 01       	movw	r26, r20
    344a:	0d 92       	st	X+, r0
    344c:	ad 01       	movw	r20, r26
    344e:	81 50       	subi	r24, 0x01	; 1
    3450:	c1 f7       	brne	.-16     	; 0x3442 <_fpadd_parts+0x56>
    3452:	d2 01       	movw	r26, r4
    3454:	11 96       	adiw	r26, 0x01	; 1
    3456:	8c 91       	ld	r24, X
    3458:	11 97       	sbiw	r26, 0x01	; 1
    345a:	91 81       	ldd	r25, Z+1	; 0x01
    345c:	89 23       	and	r24, r25
    345e:	89 83       	std	Y+1, r24	; 0x01
    3460:	0c c1       	rjmp	.+536    	; 0x367a <_fpadd_parts+0x28e>
    3462:	82 30       	cpi	r24, 0x02	; 2
    3464:	09 f4       	brne	.+2      	; 0x3468 <_fpadd_parts+0x7c>
    3466:	0b c1       	rjmp	.+534    	; 0x367e <_fpadd_parts+0x292>
    3468:	82 81       	ldd	r24, Z+2	; 0x02
    346a:	93 81       	ldd	r25, Z+3	; 0x03
    346c:	db 01       	movw	r26, r22
    346e:	12 96       	adiw	r26, 0x02	; 2
    3470:	4d 91       	ld	r20, X+
    3472:	5c 91       	ld	r21, X
    3474:	13 97       	sbiw	r26, 0x03	; 3
    3476:	e4 80       	ldd	r14, Z+4	; 0x04
    3478:	f5 80       	ldd	r15, Z+5	; 0x05
    347a:	06 81       	ldd	r16, Z+6	; 0x06
    347c:	17 81       	ldd	r17, Z+7	; 0x07
    347e:	14 96       	adiw	r26, 0x04	; 4
    3480:	ad 90       	ld	r10, X+
    3482:	bd 90       	ld	r11, X+
    3484:	cd 90       	ld	r12, X+
    3486:	dc 90       	ld	r13, X
    3488:	17 97       	sbiw	r26, 0x07	; 7
    348a:	9c 01       	movw	r18, r24
    348c:	24 1b       	sub	r18, r20
    348e:	35 0b       	sbc	r19, r21
    3490:	b9 01       	movw	r22, r18
    3492:	37 ff       	sbrs	r19, 7
    3494:	04 c0       	rjmp	.+8      	; 0x349e <_fpadd_parts+0xb2>
    3496:	66 27       	eor	r22, r22
    3498:	77 27       	eor	r23, r23
    349a:	62 1b       	sub	r22, r18
    349c:	73 0b       	sbc	r23, r19
    349e:	60 32       	cpi	r22, 0x20	; 32
    34a0:	71 05       	cpc	r23, r1
    34a2:	0c f0       	brlt	.+2      	; 0x34a6 <_fpadd_parts+0xba>
    34a4:	62 c0       	rjmp	.+196    	; 0x356a <_fpadd_parts+0x17e>
    34a6:	12 16       	cp	r1, r18
    34a8:	13 06       	cpc	r1, r19
    34aa:	6c f5       	brge	.+90     	; 0x3506 <_fpadd_parts+0x11a>
    34ac:	35 01       	movw	r6, r10
    34ae:	46 01       	movw	r8, r12
    34b0:	06 2e       	mov	r0, r22
    34b2:	04 c0       	rjmp	.+8      	; 0x34bc <_fpadd_parts+0xd0>
    34b4:	96 94       	lsr	r9
    34b6:	87 94       	ror	r8
    34b8:	77 94       	ror	r7
    34ba:	67 94       	ror	r6
    34bc:	0a 94       	dec	r0
    34be:	d2 f7       	brpl	.-12     	; 0x34b4 <_fpadd_parts+0xc8>
    34c0:	21 e0       	ldi	r18, 0x01	; 1
    34c2:	30 e0       	ldi	r19, 0x00	; 0
    34c4:	40 e0       	ldi	r20, 0x00	; 0
    34c6:	50 e0       	ldi	r21, 0x00	; 0
    34c8:	04 c0       	rjmp	.+8      	; 0x34d2 <_fpadd_parts+0xe6>
    34ca:	22 0f       	add	r18, r18
    34cc:	33 1f       	adc	r19, r19
    34ce:	44 1f       	adc	r20, r20
    34d0:	55 1f       	adc	r21, r21
    34d2:	6a 95       	dec	r22
    34d4:	d2 f7       	brpl	.-12     	; 0x34ca <_fpadd_parts+0xde>
    34d6:	21 50       	subi	r18, 0x01	; 1
    34d8:	30 40       	sbci	r19, 0x00	; 0
    34da:	40 40       	sbci	r20, 0x00	; 0
    34dc:	50 40       	sbci	r21, 0x00	; 0
    34de:	2a 21       	and	r18, r10
    34e0:	3b 21       	and	r19, r11
    34e2:	4c 21       	and	r20, r12
    34e4:	5d 21       	and	r21, r13
    34e6:	21 15       	cp	r18, r1
    34e8:	31 05       	cpc	r19, r1
    34ea:	41 05       	cpc	r20, r1
    34ec:	51 05       	cpc	r21, r1
    34ee:	21 f0       	breq	.+8      	; 0x34f8 <_fpadd_parts+0x10c>
    34f0:	21 e0       	ldi	r18, 0x01	; 1
    34f2:	30 e0       	ldi	r19, 0x00	; 0
    34f4:	40 e0       	ldi	r20, 0x00	; 0
    34f6:	50 e0       	ldi	r21, 0x00	; 0
    34f8:	59 01       	movw	r10, r18
    34fa:	6a 01       	movw	r12, r20
    34fc:	a6 28       	or	r10, r6
    34fe:	b7 28       	or	r11, r7
    3500:	c8 28       	or	r12, r8
    3502:	d9 28       	or	r13, r9
    3504:	3d c0       	rjmp	.+122    	; 0x3580 <_fpadd_parts+0x194>
    3506:	21 15       	cp	r18, r1
    3508:	31 05       	cpc	r19, r1
    350a:	d1 f1       	breq	.+116    	; 0x3580 <_fpadd_parts+0x194>
    350c:	86 0f       	add	r24, r22
    350e:	97 1f       	adc	r25, r23
    3510:	37 01       	movw	r6, r14
    3512:	48 01       	movw	r8, r16
    3514:	06 2e       	mov	r0, r22
    3516:	04 c0       	rjmp	.+8      	; 0x3520 <_fpadd_parts+0x134>
    3518:	96 94       	lsr	r9
    351a:	87 94       	ror	r8
    351c:	77 94       	ror	r7
    351e:	67 94       	ror	r6
    3520:	0a 94       	dec	r0
    3522:	d2 f7       	brpl	.-12     	; 0x3518 <_fpadd_parts+0x12c>
    3524:	21 e0       	ldi	r18, 0x01	; 1
    3526:	30 e0       	ldi	r19, 0x00	; 0
    3528:	40 e0       	ldi	r20, 0x00	; 0
    352a:	50 e0       	ldi	r21, 0x00	; 0
    352c:	04 c0       	rjmp	.+8      	; 0x3536 <_fpadd_parts+0x14a>
    352e:	22 0f       	add	r18, r18
    3530:	33 1f       	adc	r19, r19
    3532:	44 1f       	adc	r20, r20
    3534:	55 1f       	adc	r21, r21
    3536:	6a 95       	dec	r22
    3538:	d2 f7       	brpl	.-12     	; 0x352e <_fpadd_parts+0x142>
    353a:	21 50       	subi	r18, 0x01	; 1
    353c:	30 40       	sbci	r19, 0x00	; 0
    353e:	40 40       	sbci	r20, 0x00	; 0
    3540:	50 40       	sbci	r21, 0x00	; 0
    3542:	2e 21       	and	r18, r14
    3544:	3f 21       	and	r19, r15
    3546:	40 23       	and	r20, r16
    3548:	51 23       	and	r21, r17
    354a:	21 15       	cp	r18, r1
    354c:	31 05       	cpc	r19, r1
    354e:	41 05       	cpc	r20, r1
    3550:	51 05       	cpc	r21, r1
    3552:	21 f0       	breq	.+8      	; 0x355c <_fpadd_parts+0x170>
    3554:	21 e0       	ldi	r18, 0x01	; 1
    3556:	30 e0       	ldi	r19, 0x00	; 0
    3558:	40 e0       	ldi	r20, 0x00	; 0
    355a:	50 e0       	ldi	r21, 0x00	; 0
    355c:	79 01       	movw	r14, r18
    355e:	8a 01       	movw	r16, r20
    3560:	e6 28       	or	r14, r6
    3562:	f7 28       	or	r15, r7
    3564:	08 29       	or	r16, r8
    3566:	19 29       	or	r17, r9
    3568:	0b c0       	rjmp	.+22     	; 0x3580 <_fpadd_parts+0x194>
    356a:	48 17       	cp	r20, r24
    356c:	59 07       	cpc	r21, r25
    356e:	2c f0       	brlt	.+10     	; 0x357a <_fpadd_parts+0x18e>
    3570:	ca 01       	movw	r24, r20
    3572:	ee 24       	eor	r14, r14
    3574:	ff 24       	eor	r15, r15
    3576:	87 01       	movw	r16, r14
    3578:	03 c0       	rjmp	.+6      	; 0x3580 <_fpadd_parts+0x194>
    357a:	aa 24       	eor	r10, r10
    357c:	bb 24       	eor	r11, r11
    357e:	65 01       	movw	r12, r10
    3580:	21 81       	ldd	r18, Z+1	; 0x01
    3582:	f2 01       	movw	r30, r4
    3584:	31 81       	ldd	r19, Z+1	; 0x01
    3586:	23 17       	cp	r18, r19
    3588:	09 f4       	brne	.+2      	; 0x358c <_fpadd_parts+0x1a0>
    358a:	4a c0       	rjmp	.+148    	; 0x3620 <_fpadd_parts+0x234>
    358c:	22 23       	and	r18, r18
    358e:	49 f0       	breq	.+18     	; 0x35a2 <_fpadd_parts+0x1b6>
    3590:	a6 01       	movw	r20, r12
    3592:	95 01       	movw	r18, r10
    3594:	2e 19       	sub	r18, r14
    3596:	3f 09       	sbc	r19, r15
    3598:	40 0b       	sbc	r20, r16
    359a:	51 0b       	sbc	r21, r17
    359c:	79 01       	movw	r14, r18
    359e:	8a 01       	movw	r16, r20
    35a0:	04 c0       	rjmp	.+8      	; 0x35aa <_fpadd_parts+0x1be>
    35a2:	ea 18       	sub	r14, r10
    35a4:	fb 08       	sbc	r15, r11
    35a6:	0c 09       	sbc	r16, r12
    35a8:	1d 09       	sbc	r17, r13
    35aa:	17 fd       	sbrc	r17, 7
    35ac:	0c c0       	rjmp	.+24     	; 0x35c6 <_fpadd_parts+0x1da>
    35ae:	19 82       	std	Y+1, r1	; 0x01
    35b0:	9b 83       	std	Y+3, r25	; 0x03
    35b2:	8a 83       	std	Y+2, r24	; 0x02
    35b4:	ec 82       	std	Y+4, r14	; 0x04
    35b6:	fd 82       	std	Y+5, r15	; 0x05
    35b8:	0e 83       	std	Y+6, r16	; 0x06
    35ba:	1f 83       	std	Y+7, r17	; 0x07
    35bc:	8c 81       	ldd	r24, Y+4	; 0x04
    35be:	9d 81       	ldd	r25, Y+5	; 0x05
    35c0:	ae 81       	ldd	r26, Y+6	; 0x06
    35c2:	bf 81       	ldd	r27, Y+7	; 0x07
    35c4:	1a c0       	rjmp	.+52     	; 0x35fa <_fpadd_parts+0x20e>
    35c6:	21 e0       	ldi	r18, 0x01	; 1
    35c8:	29 83       	std	Y+1, r18	; 0x01
    35ca:	9b 83       	std	Y+3, r25	; 0x03
    35cc:	8a 83       	std	Y+2, r24	; 0x02
    35ce:	88 27       	eor	r24, r24
    35d0:	99 27       	eor	r25, r25
    35d2:	dc 01       	movw	r26, r24
    35d4:	8e 19       	sub	r24, r14
    35d6:	9f 09       	sbc	r25, r15
    35d8:	a0 0b       	sbc	r26, r16
    35da:	b1 0b       	sbc	r27, r17
    35dc:	8c 83       	std	Y+4, r24	; 0x04
    35de:	9d 83       	std	Y+5, r25	; 0x05
    35e0:	ae 83       	std	Y+6, r26	; 0x06
    35e2:	bf 83       	std	Y+7, r27	; 0x07
    35e4:	eb cf       	rjmp	.-42     	; 0x35bc <_fpadd_parts+0x1d0>
    35e6:	88 0f       	add	r24, r24
    35e8:	99 1f       	adc	r25, r25
    35ea:	aa 1f       	adc	r26, r26
    35ec:	bb 1f       	adc	r27, r27
    35ee:	2a 81       	ldd	r18, Y+2	; 0x02
    35f0:	3b 81       	ldd	r19, Y+3	; 0x03
    35f2:	21 50       	subi	r18, 0x01	; 1
    35f4:	30 40       	sbci	r19, 0x00	; 0
    35f6:	3b 83       	std	Y+3, r19	; 0x03
    35f8:	2a 83       	std	Y+2, r18	; 0x02
    35fa:	9c 01       	movw	r18, r24
    35fc:	ad 01       	movw	r20, r26
    35fe:	21 50       	subi	r18, 0x01	; 1
    3600:	30 40       	sbci	r19, 0x00	; 0
    3602:	40 40       	sbci	r20, 0x00	; 0
    3604:	50 40       	sbci	r21, 0x00	; 0
    3606:	2f 3f       	cpi	r18, 0xFF	; 255
    3608:	6f ef       	ldi	r22, 0xFF	; 255
    360a:	36 07       	cpc	r19, r22
    360c:	6f ef       	ldi	r22, 0xFF	; 255
    360e:	46 07       	cpc	r20, r22
    3610:	6f e3       	ldi	r22, 0x3F	; 63
    3612:	56 07       	cpc	r21, r22
    3614:	40 f3       	brcs	.-48     	; 0x35e6 <_fpadd_parts+0x1fa>
    3616:	8c 83       	std	Y+4, r24	; 0x04
    3618:	9d 83       	std	Y+5, r25	; 0x05
    361a:	ae 83       	std	Y+6, r26	; 0x06
    361c:	bf 83       	std	Y+7, r27	; 0x07
    361e:	0b c0       	rjmp	.+22     	; 0x3636 <_fpadd_parts+0x24a>
    3620:	29 83       	std	Y+1, r18	; 0x01
    3622:	9b 83       	std	Y+3, r25	; 0x03
    3624:	8a 83       	std	Y+2, r24	; 0x02
    3626:	ea 0c       	add	r14, r10
    3628:	fb 1c       	adc	r15, r11
    362a:	0c 1d       	adc	r16, r12
    362c:	1d 1d       	adc	r17, r13
    362e:	ec 82       	std	Y+4, r14	; 0x04
    3630:	fd 82       	std	Y+5, r15	; 0x05
    3632:	0e 83       	std	Y+6, r16	; 0x06
    3634:	1f 83       	std	Y+7, r17	; 0x07
    3636:	83 e0       	ldi	r24, 0x03	; 3
    3638:	88 83       	st	Y, r24
    363a:	2c 81       	ldd	r18, Y+4	; 0x04
    363c:	3d 81       	ldd	r19, Y+5	; 0x05
    363e:	4e 81       	ldd	r20, Y+6	; 0x06
    3640:	5f 81       	ldd	r21, Y+7	; 0x07
    3642:	57 ff       	sbrs	r21, 7
    3644:	1a c0       	rjmp	.+52     	; 0x367a <_fpadd_parts+0x28e>
    3646:	c9 01       	movw	r24, r18
    3648:	aa 27       	eor	r26, r26
    364a:	97 fd       	sbrc	r25, 7
    364c:	a0 95       	com	r26
    364e:	ba 2f       	mov	r27, r26
    3650:	81 70       	andi	r24, 0x01	; 1
    3652:	90 70       	andi	r25, 0x00	; 0
    3654:	a0 70       	andi	r26, 0x00	; 0
    3656:	b0 70       	andi	r27, 0x00	; 0
    3658:	56 95       	lsr	r21
    365a:	47 95       	ror	r20
    365c:	37 95       	ror	r19
    365e:	27 95       	ror	r18
    3660:	82 2b       	or	r24, r18
    3662:	93 2b       	or	r25, r19
    3664:	a4 2b       	or	r26, r20
    3666:	b5 2b       	or	r27, r21
    3668:	8c 83       	std	Y+4, r24	; 0x04
    366a:	9d 83       	std	Y+5, r25	; 0x05
    366c:	ae 83       	std	Y+6, r26	; 0x06
    366e:	bf 83       	std	Y+7, r27	; 0x07
    3670:	8a 81       	ldd	r24, Y+2	; 0x02
    3672:	9b 81       	ldd	r25, Y+3	; 0x03
    3674:	01 96       	adiw	r24, 0x01	; 1
    3676:	9b 83       	std	Y+3, r25	; 0x03
    3678:	8a 83       	std	Y+2, r24	; 0x02
    367a:	fe 01       	movw	r30, r28
    367c:	01 c0       	rjmp	.+2      	; 0x3680 <_fpadd_parts+0x294>
    367e:	f2 01       	movw	r30, r4
    3680:	cf 01       	movw	r24, r30
    3682:	cd b7       	in	r28, 0x3d	; 61
    3684:	de b7       	in	r29, 0x3e	; 62
    3686:	e0 e1       	ldi	r30, 0x10	; 16
    3688:	0c 94 7d 21 	jmp	0x42fa	; 0x42fa <__epilogue_restores__+0x4>

0000368c <__subsf3>:
    368c:	a0 e2       	ldi	r26, 0x20	; 32
    368e:	b0 e0       	ldi	r27, 0x00	; 0
    3690:	ec e4       	ldi	r30, 0x4C	; 76
    3692:	fb e1       	ldi	r31, 0x1B	; 27
    3694:	0c 94 6b 21 	jmp	0x42d6	; 0x42d6 <__prologue_saves__+0x18>
    3698:	69 83       	std	Y+1, r22	; 0x01
    369a:	7a 83       	std	Y+2, r23	; 0x02
    369c:	8b 83       	std	Y+3, r24	; 0x03
    369e:	9c 83       	std	Y+4, r25	; 0x04
    36a0:	2d 83       	std	Y+5, r18	; 0x05
    36a2:	3e 83       	std	Y+6, r19	; 0x06
    36a4:	4f 83       	std	Y+7, r20	; 0x07
    36a6:	58 87       	std	Y+8, r21	; 0x08
    36a8:	e9 e0       	ldi	r30, 0x09	; 9
    36aa:	ee 2e       	mov	r14, r30
    36ac:	f1 2c       	mov	r15, r1
    36ae:	ec 0e       	add	r14, r28
    36b0:	fd 1e       	adc	r15, r29
    36b2:	ce 01       	movw	r24, r28
    36b4:	01 96       	adiw	r24, 0x01	; 1
    36b6:	b7 01       	movw	r22, r14
    36b8:	0e 94 29 20 	call	0x4052	; 0x4052 <__unpack_f>
    36bc:	8e 01       	movw	r16, r28
    36be:	0f 5e       	subi	r16, 0xEF	; 239
    36c0:	1f 4f       	sbci	r17, 0xFF	; 255
    36c2:	ce 01       	movw	r24, r28
    36c4:	05 96       	adiw	r24, 0x05	; 5
    36c6:	b8 01       	movw	r22, r16
    36c8:	0e 94 29 20 	call	0x4052	; 0x4052 <__unpack_f>
    36cc:	8a 89       	ldd	r24, Y+18	; 0x12
    36ce:	91 e0       	ldi	r25, 0x01	; 1
    36d0:	89 27       	eor	r24, r25
    36d2:	8a 8b       	std	Y+18, r24	; 0x12
    36d4:	c7 01       	movw	r24, r14
    36d6:	b8 01       	movw	r22, r16
    36d8:	ae 01       	movw	r20, r28
    36da:	47 5e       	subi	r20, 0xE7	; 231
    36dc:	5f 4f       	sbci	r21, 0xFF	; 255
    36de:	0e 94 f6 19 	call	0x33ec	; 0x33ec <_fpadd_parts>
    36e2:	0e 94 5a 1f 	call	0x3eb4	; 0x3eb4 <__pack_f>
    36e6:	a0 96       	adiw	r28, 0x20	; 32
    36e8:	e6 e0       	ldi	r30, 0x06	; 6
    36ea:	0c 94 87 21 	jmp	0x430e	; 0x430e <__epilogue_restores__+0x18>

000036ee <__addsf3>:
    36ee:	a0 e2       	ldi	r26, 0x20	; 32
    36f0:	b0 e0       	ldi	r27, 0x00	; 0
    36f2:	ed e7       	ldi	r30, 0x7D	; 125
    36f4:	fb e1       	ldi	r31, 0x1B	; 27
    36f6:	0c 94 6b 21 	jmp	0x42d6	; 0x42d6 <__prologue_saves__+0x18>
    36fa:	69 83       	std	Y+1, r22	; 0x01
    36fc:	7a 83       	std	Y+2, r23	; 0x02
    36fe:	8b 83       	std	Y+3, r24	; 0x03
    3700:	9c 83       	std	Y+4, r25	; 0x04
    3702:	2d 83       	std	Y+5, r18	; 0x05
    3704:	3e 83       	std	Y+6, r19	; 0x06
    3706:	4f 83       	std	Y+7, r20	; 0x07
    3708:	58 87       	std	Y+8, r21	; 0x08
    370a:	f9 e0       	ldi	r31, 0x09	; 9
    370c:	ef 2e       	mov	r14, r31
    370e:	f1 2c       	mov	r15, r1
    3710:	ec 0e       	add	r14, r28
    3712:	fd 1e       	adc	r15, r29
    3714:	ce 01       	movw	r24, r28
    3716:	01 96       	adiw	r24, 0x01	; 1
    3718:	b7 01       	movw	r22, r14
    371a:	0e 94 29 20 	call	0x4052	; 0x4052 <__unpack_f>
    371e:	8e 01       	movw	r16, r28
    3720:	0f 5e       	subi	r16, 0xEF	; 239
    3722:	1f 4f       	sbci	r17, 0xFF	; 255
    3724:	ce 01       	movw	r24, r28
    3726:	05 96       	adiw	r24, 0x05	; 5
    3728:	b8 01       	movw	r22, r16
    372a:	0e 94 29 20 	call	0x4052	; 0x4052 <__unpack_f>
    372e:	c7 01       	movw	r24, r14
    3730:	b8 01       	movw	r22, r16
    3732:	ae 01       	movw	r20, r28
    3734:	47 5e       	subi	r20, 0xE7	; 231
    3736:	5f 4f       	sbci	r21, 0xFF	; 255
    3738:	0e 94 f6 19 	call	0x33ec	; 0x33ec <_fpadd_parts>
    373c:	0e 94 5a 1f 	call	0x3eb4	; 0x3eb4 <__pack_f>
    3740:	a0 96       	adiw	r28, 0x20	; 32
    3742:	e6 e0       	ldi	r30, 0x06	; 6
    3744:	0c 94 87 21 	jmp	0x430e	; 0x430e <__epilogue_restores__+0x18>

00003748 <__mulsf3>:
    3748:	a0 e2       	ldi	r26, 0x20	; 32
    374a:	b0 e0       	ldi	r27, 0x00	; 0
    374c:	ea ea       	ldi	r30, 0xAA	; 170
    374e:	fb e1       	ldi	r31, 0x1B	; 27
    3750:	0c 94 5f 21 	jmp	0x42be	; 0x42be <__prologue_saves__>
    3754:	69 83       	std	Y+1, r22	; 0x01
    3756:	7a 83       	std	Y+2, r23	; 0x02
    3758:	8b 83       	std	Y+3, r24	; 0x03
    375a:	9c 83       	std	Y+4, r25	; 0x04
    375c:	2d 83       	std	Y+5, r18	; 0x05
    375e:	3e 83       	std	Y+6, r19	; 0x06
    3760:	4f 83       	std	Y+7, r20	; 0x07
    3762:	58 87       	std	Y+8, r21	; 0x08
    3764:	ce 01       	movw	r24, r28
    3766:	01 96       	adiw	r24, 0x01	; 1
    3768:	be 01       	movw	r22, r28
    376a:	67 5f       	subi	r22, 0xF7	; 247
    376c:	7f 4f       	sbci	r23, 0xFF	; 255
    376e:	0e 94 29 20 	call	0x4052	; 0x4052 <__unpack_f>
    3772:	ce 01       	movw	r24, r28
    3774:	05 96       	adiw	r24, 0x05	; 5
    3776:	be 01       	movw	r22, r28
    3778:	6f 5e       	subi	r22, 0xEF	; 239
    377a:	7f 4f       	sbci	r23, 0xFF	; 255
    377c:	0e 94 29 20 	call	0x4052	; 0x4052 <__unpack_f>
    3780:	99 85       	ldd	r25, Y+9	; 0x09
    3782:	92 30       	cpi	r25, 0x02	; 2
    3784:	88 f0       	brcs	.+34     	; 0x37a8 <__mulsf3+0x60>
    3786:	89 89       	ldd	r24, Y+17	; 0x11
    3788:	82 30       	cpi	r24, 0x02	; 2
    378a:	c8 f0       	brcs	.+50     	; 0x37be <__mulsf3+0x76>
    378c:	94 30       	cpi	r25, 0x04	; 4
    378e:	19 f4       	brne	.+6      	; 0x3796 <__mulsf3+0x4e>
    3790:	82 30       	cpi	r24, 0x02	; 2
    3792:	51 f4       	brne	.+20     	; 0x37a8 <__mulsf3+0x60>
    3794:	04 c0       	rjmp	.+8      	; 0x379e <__mulsf3+0x56>
    3796:	84 30       	cpi	r24, 0x04	; 4
    3798:	29 f4       	brne	.+10     	; 0x37a4 <__mulsf3+0x5c>
    379a:	92 30       	cpi	r25, 0x02	; 2
    379c:	81 f4       	brne	.+32     	; 0x37be <__mulsf3+0x76>
    379e:	86 e3       	ldi	r24, 0x36	; 54
    37a0:	91 e0       	ldi	r25, 0x01	; 1
    37a2:	c4 c0       	rjmp	.+392    	; 0x392c <__mulsf3+0x1e4>
    37a4:	92 30       	cpi	r25, 0x02	; 2
    37a6:	49 f4       	brne	.+18     	; 0x37ba <__mulsf3+0x72>
    37a8:	80 e0       	ldi	r24, 0x00	; 0
    37aa:	2a 85       	ldd	r18, Y+10	; 0x0a
    37ac:	9a 89       	ldd	r25, Y+18	; 0x12
    37ae:	29 13       	cpse	r18, r25
    37b0:	81 e0       	ldi	r24, 0x01	; 1
    37b2:	8a 87       	std	Y+10, r24	; 0x0a
    37b4:	ce 01       	movw	r24, r28
    37b6:	09 96       	adiw	r24, 0x09	; 9
    37b8:	b9 c0       	rjmp	.+370    	; 0x392c <__mulsf3+0x1e4>
    37ba:	82 30       	cpi	r24, 0x02	; 2
    37bc:	49 f4       	brne	.+18     	; 0x37d0 <__mulsf3+0x88>
    37be:	80 e0       	ldi	r24, 0x00	; 0
    37c0:	2a 85       	ldd	r18, Y+10	; 0x0a
    37c2:	9a 89       	ldd	r25, Y+18	; 0x12
    37c4:	29 13       	cpse	r18, r25
    37c6:	81 e0       	ldi	r24, 0x01	; 1
    37c8:	8a 8b       	std	Y+18, r24	; 0x12
    37ca:	ce 01       	movw	r24, r28
    37cc:	41 96       	adiw	r24, 0x11	; 17
    37ce:	ae c0       	rjmp	.+348    	; 0x392c <__mulsf3+0x1e4>
    37d0:	6d 84       	ldd	r6, Y+13	; 0x0d
    37d2:	7e 84       	ldd	r7, Y+14	; 0x0e
    37d4:	8f 84       	ldd	r8, Y+15	; 0x0f
    37d6:	98 88       	ldd	r9, Y+16	; 0x10
    37d8:	ad 88       	ldd	r10, Y+21	; 0x15
    37da:	be 88       	ldd	r11, Y+22	; 0x16
    37dc:	cf 88       	ldd	r12, Y+23	; 0x17
    37de:	d8 8c       	ldd	r13, Y+24	; 0x18
    37e0:	60 e0       	ldi	r22, 0x00	; 0
    37e2:	70 e0       	ldi	r23, 0x00	; 0
    37e4:	80 e0       	ldi	r24, 0x00	; 0
    37e6:	90 e0       	ldi	r25, 0x00	; 0
    37e8:	dc 01       	movw	r26, r24
    37ea:	ee 24       	eor	r14, r14
    37ec:	ff 24       	eor	r15, r15
    37ee:	87 01       	movw	r16, r14
    37f0:	20 e0       	ldi	r18, 0x00	; 0
    37f2:	30 e0       	ldi	r19, 0x00	; 0
    37f4:	a9 01       	movw	r20, r18
    37f6:	f3 01       	movw	r30, r6
    37f8:	e1 70       	andi	r30, 0x01	; 1
    37fa:	f0 70       	andi	r31, 0x00	; 0
    37fc:	30 97       	sbiw	r30, 0x00	; 0
    37fe:	c9 f0       	breq	.+50     	; 0x3832 <__mulsf3+0xea>
    3800:	2a 0d       	add	r18, r10
    3802:	3b 1d       	adc	r19, r11
    3804:	4c 1d       	adc	r20, r12
    3806:	5d 1d       	adc	r21, r13
    3808:	8e 0d       	add	r24, r14
    380a:	9f 1d       	adc	r25, r15
    380c:	a0 1f       	adc	r26, r16
    380e:	b1 1f       	adc	r27, r17
    3810:	22 24       	eor	r2, r2
    3812:	33 24       	eor	r3, r3
    3814:	21 01       	movw	r4, r2
    3816:	2a 15       	cp	r18, r10
    3818:	3b 05       	cpc	r19, r11
    381a:	4c 05       	cpc	r20, r12
    381c:	5d 05       	cpc	r21, r13
    381e:	28 f4       	brcc	.+10     	; 0x382a <__mulsf3+0xe2>
    3820:	e1 e0       	ldi	r30, 0x01	; 1
    3822:	2e 2e       	mov	r2, r30
    3824:	31 2c       	mov	r3, r1
    3826:	41 2c       	mov	r4, r1
    3828:	51 2c       	mov	r5, r1
    382a:	82 0d       	add	r24, r2
    382c:	93 1d       	adc	r25, r3
    382e:	a4 1d       	adc	r26, r4
    3830:	b5 1d       	adc	r27, r5
    3832:	ee 0c       	add	r14, r14
    3834:	ff 1c       	adc	r15, r15
    3836:	00 1f       	adc	r16, r16
    3838:	11 1f       	adc	r17, r17
    383a:	d7 fe       	sbrs	r13, 7
    383c:	09 c0       	rjmp	.+18     	; 0x3850 <__mulsf3+0x108>
    383e:	e1 e0       	ldi	r30, 0x01	; 1
    3840:	2e 2e       	mov	r2, r30
    3842:	31 2c       	mov	r3, r1
    3844:	41 2c       	mov	r4, r1
    3846:	51 2c       	mov	r5, r1
    3848:	e2 28       	or	r14, r2
    384a:	f3 28       	or	r15, r3
    384c:	04 29       	or	r16, r4
    384e:	15 29       	or	r17, r5
    3850:	6f 5f       	subi	r22, 0xFF	; 255
    3852:	7f 4f       	sbci	r23, 0xFF	; 255
    3854:	60 32       	cpi	r22, 0x20	; 32
    3856:	71 05       	cpc	r23, r1
    3858:	49 f0       	breq	.+18     	; 0x386c <__mulsf3+0x124>
    385a:	aa 0c       	add	r10, r10
    385c:	bb 1c       	adc	r11, r11
    385e:	cc 1c       	adc	r12, r12
    3860:	dd 1c       	adc	r13, r13
    3862:	96 94       	lsr	r9
    3864:	87 94       	ror	r8
    3866:	77 94       	ror	r7
    3868:	67 94       	ror	r6
    386a:	c5 cf       	rjmp	.-118    	; 0x37f6 <__mulsf3+0xae>
    386c:	6b 89       	ldd	r22, Y+19	; 0x13
    386e:	7c 89       	ldd	r23, Y+20	; 0x14
    3870:	eb 85       	ldd	r30, Y+11	; 0x0b
    3872:	fc 85       	ldd	r31, Y+12	; 0x0c
    3874:	6e 0f       	add	r22, r30
    3876:	7f 1f       	adc	r23, r31
    3878:	6e 5f       	subi	r22, 0xFE	; 254
    387a:	7f 4f       	sbci	r23, 0xFF	; 255
    387c:	7c 8f       	std	Y+28, r23	; 0x1c
    387e:	6b 8f       	std	Y+27, r22	; 0x1b
    3880:	1a 8e       	std	Y+26, r1	; 0x1a
    3882:	7a 85       	ldd	r23, Y+10	; 0x0a
    3884:	6a 89       	ldd	r22, Y+18	; 0x12
    3886:	76 17       	cp	r23, r22
    3888:	11 f0       	breq	.+4      	; 0x388e <__mulsf3+0x146>
    388a:	61 e0       	ldi	r22, 0x01	; 1
    388c:	6a 8f       	std	Y+26, r22	; 0x1a
    388e:	6b 8d       	ldd	r22, Y+27	; 0x1b
    3890:	7c 8d       	ldd	r23, Y+28	; 0x1c
    3892:	10 c0       	rjmp	.+32     	; 0x38b4 <__mulsf3+0x16c>
    3894:	fc 01       	movw	r30, r24
    3896:	e1 70       	andi	r30, 0x01	; 1
    3898:	f0 70       	andi	r31, 0x00	; 0
    389a:	30 97       	sbiw	r30, 0x00	; 0
    389c:	29 f0       	breq	.+10     	; 0x38a8 <__mulsf3+0x160>
    389e:	56 95       	lsr	r21
    38a0:	47 95       	ror	r20
    38a2:	37 95       	ror	r19
    38a4:	27 95       	ror	r18
    38a6:	50 68       	ori	r21, 0x80	; 128
    38a8:	b6 95       	lsr	r27
    38aa:	a7 95       	ror	r26
    38ac:	97 95       	ror	r25
    38ae:	87 95       	ror	r24
    38b0:	6f 5f       	subi	r22, 0xFF	; 255
    38b2:	7f 4f       	sbci	r23, 0xFF	; 255
    38b4:	b7 fd       	sbrc	r27, 7
    38b6:	ee cf       	rjmp	.-36     	; 0x3894 <__mulsf3+0x14c>
    38b8:	0c c0       	rjmp	.+24     	; 0x38d2 <__mulsf3+0x18a>
    38ba:	88 0f       	add	r24, r24
    38bc:	99 1f       	adc	r25, r25
    38be:	aa 1f       	adc	r26, r26
    38c0:	bb 1f       	adc	r27, r27
    38c2:	57 fd       	sbrc	r21, 7
    38c4:	81 60       	ori	r24, 0x01	; 1
    38c6:	22 0f       	add	r18, r18
    38c8:	33 1f       	adc	r19, r19
    38ca:	44 1f       	adc	r20, r20
    38cc:	55 1f       	adc	r21, r21
    38ce:	61 50       	subi	r22, 0x01	; 1
    38d0:	70 40       	sbci	r23, 0x00	; 0
    38d2:	80 30       	cpi	r24, 0x00	; 0
    38d4:	e0 e0       	ldi	r30, 0x00	; 0
    38d6:	9e 07       	cpc	r25, r30
    38d8:	e0 e0       	ldi	r30, 0x00	; 0
    38da:	ae 07       	cpc	r26, r30
    38dc:	e0 e4       	ldi	r30, 0x40	; 64
    38de:	be 07       	cpc	r27, r30
    38e0:	60 f3       	brcs	.-40     	; 0x38ba <__mulsf3+0x172>
    38e2:	6b 8f       	std	Y+27, r22	; 0x1b
    38e4:	7c 8f       	std	Y+28, r23	; 0x1c
    38e6:	6f e7       	ldi	r22, 0x7F	; 127
    38e8:	e6 2e       	mov	r14, r22
    38ea:	f1 2c       	mov	r15, r1
    38ec:	01 2d       	mov	r16, r1
    38ee:	11 2d       	mov	r17, r1
    38f0:	e8 22       	and	r14, r24
    38f2:	f9 22       	and	r15, r25
    38f4:	0a 23       	and	r16, r26
    38f6:	1b 23       	and	r17, r27
    38f8:	60 e4       	ldi	r22, 0x40	; 64
    38fa:	e6 16       	cp	r14, r22
    38fc:	f1 04       	cpc	r15, r1
    38fe:	01 05       	cpc	r16, r1
    3900:	11 05       	cpc	r17, r1
    3902:	61 f4       	brne	.+24     	; 0x391c <__mulsf3+0x1d4>
    3904:	87 fd       	sbrc	r24, 7
    3906:	0a c0       	rjmp	.+20     	; 0x391c <__mulsf3+0x1d4>
    3908:	21 15       	cp	r18, r1
    390a:	31 05       	cpc	r19, r1
    390c:	41 05       	cpc	r20, r1
    390e:	51 05       	cpc	r21, r1
    3910:	29 f0       	breq	.+10     	; 0x391c <__mulsf3+0x1d4>
    3912:	80 5c       	subi	r24, 0xC0	; 192
    3914:	9f 4f       	sbci	r25, 0xFF	; 255
    3916:	af 4f       	sbci	r26, 0xFF	; 255
    3918:	bf 4f       	sbci	r27, 0xFF	; 255
    391a:	80 78       	andi	r24, 0x80	; 128
    391c:	8d 8f       	std	Y+29, r24	; 0x1d
    391e:	9e 8f       	std	Y+30, r25	; 0x1e
    3920:	af 8f       	std	Y+31, r26	; 0x1f
    3922:	b8 a3       	std	Y+32, r27	; 0x20
    3924:	83 e0       	ldi	r24, 0x03	; 3
    3926:	89 8f       	std	Y+25, r24	; 0x19
    3928:	ce 01       	movw	r24, r28
    392a:	49 96       	adiw	r24, 0x19	; 25
    392c:	0e 94 5a 1f 	call	0x3eb4	; 0x3eb4 <__pack_f>
    3930:	a0 96       	adiw	r28, 0x20	; 32
    3932:	e2 e1       	ldi	r30, 0x12	; 18
    3934:	0c 94 7b 21 	jmp	0x42f6	; 0x42f6 <__epilogue_restores__>

00003938 <__divsf3>:
    3938:	a8 e1       	ldi	r26, 0x18	; 24
    393a:	b0 e0       	ldi	r27, 0x00	; 0
    393c:	e2 ea       	ldi	r30, 0xA2	; 162
    393e:	fc e1       	ldi	r31, 0x1C	; 28
    3940:	0c 94 67 21 	jmp	0x42ce	; 0x42ce <__prologue_saves__+0x10>
    3944:	69 83       	std	Y+1, r22	; 0x01
    3946:	7a 83       	std	Y+2, r23	; 0x02
    3948:	8b 83       	std	Y+3, r24	; 0x03
    394a:	9c 83       	std	Y+4, r25	; 0x04
    394c:	2d 83       	std	Y+5, r18	; 0x05
    394e:	3e 83       	std	Y+6, r19	; 0x06
    3950:	4f 83       	std	Y+7, r20	; 0x07
    3952:	58 87       	std	Y+8, r21	; 0x08
    3954:	8e 01       	movw	r16, r28
    3956:	07 5f       	subi	r16, 0xF7	; 247
    3958:	1f 4f       	sbci	r17, 0xFF	; 255
    395a:	ce 01       	movw	r24, r28
    395c:	01 96       	adiw	r24, 0x01	; 1
    395e:	b8 01       	movw	r22, r16
    3960:	0e 94 29 20 	call	0x4052	; 0x4052 <__unpack_f>
    3964:	81 e1       	ldi	r24, 0x11	; 17
    3966:	e8 2e       	mov	r14, r24
    3968:	f1 2c       	mov	r15, r1
    396a:	ec 0e       	add	r14, r28
    396c:	fd 1e       	adc	r15, r29
    396e:	ce 01       	movw	r24, r28
    3970:	05 96       	adiw	r24, 0x05	; 5
    3972:	b7 01       	movw	r22, r14
    3974:	0e 94 29 20 	call	0x4052	; 0x4052 <__unpack_f>
    3978:	99 85       	ldd	r25, Y+9	; 0x09
    397a:	92 30       	cpi	r25, 0x02	; 2
    397c:	08 f4       	brcc	.+2      	; 0x3980 <__divsf3+0x48>
    397e:	83 c0       	rjmp	.+262    	; 0x3a86 <__divsf3+0x14e>
    3980:	89 89       	ldd	r24, Y+17	; 0x11
    3982:	82 30       	cpi	r24, 0x02	; 2
    3984:	10 f4       	brcc	.+4      	; 0x398a <__divsf3+0x52>
    3986:	87 01       	movw	r16, r14
    3988:	7e c0       	rjmp	.+252    	; 0x3a86 <__divsf3+0x14e>
    398a:	2a 85       	ldd	r18, Y+10	; 0x0a
    398c:	3a 89       	ldd	r19, Y+18	; 0x12
    398e:	23 27       	eor	r18, r19
    3990:	2a 87       	std	Y+10, r18	; 0x0a
    3992:	94 30       	cpi	r25, 0x04	; 4
    3994:	11 f0       	breq	.+4      	; 0x399a <__divsf3+0x62>
    3996:	92 30       	cpi	r25, 0x02	; 2
    3998:	31 f4       	brne	.+12     	; 0x39a6 <__divsf3+0x6e>
    399a:	98 17       	cp	r25, r24
    399c:	09 f0       	breq	.+2      	; 0x39a0 <__divsf3+0x68>
    399e:	70 c0       	rjmp	.+224    	; 0x3a80 <__divsf3+0x148>
    39a0:	06 e3       	ldi	r16, 0x36	; 54
    39a2:	11 e0       	ldi	r17, 0x01	; 1
    39a4:	70 c0       	rjmp	.+224    	; 0x3a86 <__divsf3+0x14e>
    39a6:	84 30       	cpi	r24, 0x04	; 4
    39a8:	39 f4       	brne	.+14     	; 0x39b8 <__divsf3+0x80>
    39aa:	1d 86       	std	Y+13, r1	; 0x0d
    39ac:	1e 86       	std	Y+14, r1	; 0x0e
    39ae:	1f 86       	std	Y+15, r1	; 0x0f
    39b0:	18 8a       	std	Y+16, r1	; 0x10
    39b2:	1c 86       	std	Y+12, r1	; 0x0c
    39b4:	1b 86       	std	Y+11, r1	; 0x0b
    39b6:	67 c0       	rjmp	.+206    	; 0x3a86 <__divsf3+0x14e>
    39b8:	82 30       	cpi	r24, 0x02	; 2
    39ba:	19 f4       	brne	.+6      	; 0x39c2 <__divsf3+0x8a>
    39bc:	84 e0       	ldi	r24, 0x04	; 4
    39be:	89 87       	std	Y+9, r24	; 0x09
    39c0:	62 c0       	rjmp	.+196    	; 0x3a86 <__divsf3+0x14e>
    39c2:	8b 85       	ldd	r24, Y+11	; 0x0b
    39c4:	9c 85       	ldd	r25, Y+12	; 0x0c
    39c6:	2b 89       	ldd	r18, Y+19	; 0x13
    39c8:	3c 89       	ldd	r19, Y+20	; 0x14
    39ca:	82 1b       	sub	r24, r18
    39cc:	93 0b       	sbc	r25, r19
    39ce:	9c 87       	std	Y+12, r25	; 0x0c
    39d0:	8b 87       	std	Y+11, r24	; 0x0b
    39d2:	2d 85       	ldd	r18, Y+13	; 0x0d
    39d4:	3e 85       	ldd	r19, Y+14	; 0x0e
    39d6:	4f 85       	ldd	r20, Y+15	; 0x0f
    39d8:	58 89       	ldd	r21, Y+16	; 0x10
    39da:	ad 88       	ldd	r10, Y+21	; 0x15
    39dc:	be 88       	ldd	r11, Y+22	; 0x16
    39de:	cf 88       	ldd	r12, Y+23	; 0x17
    39e0:	d8 8c       	ldd	r13, Y+24	; 0x18
    39e2:	2a 15       	cp	r18, r10
    39e4:	3b 05       	cpc	r19, r11
    39e6:	4c 05       	cpc	r20, r12
    39e8:	5d 05       	cpc	r21, r13
    39ea:	38 f4       	brcc	.+14     	; 0x39fa <__divsf3+0xc2>
    39ec:	22 0f       	add	r18, r18
    39ee:	33 1f       	adc	r19, r19
    39f0:	44 1f       	adc	r20, r20
    39f2:	55 1f       	adc	r21, r21
    39f4:	01 97       	sbiw	r24, 0x01	; 1
    39f6:	9c 87       	std	Y+12, r25	; 0x0c
    39f8:	8b 87       	std	Y+11, r24	; 0x0b
    39fa:	60 e0       	ldi	r22, 0x00	; 0
    39fc:	70 e0       	ldi	r23, 0x00	; 0
    39fe:	e1 2c       	mov	r14, r1
    3a00:	f1 2c       	mov	r15, r1
    3a02:	01 2d       	mov	r16, r1
    3a04:	a0 e4       	ldi	r26, 0x40	; 64
    3a06:	1a 2f       	mov	r17, r26
    3a08:	80 e0       	ldi	r24, 0x00	; 0
    3a0a:	90 e0       	ldi	r25, 0x00	; 0
    3a0c:	dc 01       	movw	r26, r24
    3a0e:	2a 15       	cp	r18, r10
    3a10:	3b 05       	cpc	r19, r11
    3a12:	4c 05       	cpc	r20, r12
    3a14:	5d 05       	cpc	r21, r13
    3a16:	40 f0       	brcs	.+16     	; 0x3a28 <__divsf3+0xf0>
    3a18:	8e 29       	or	r24, r14
    3a1a:	9f 29       	or	r25, r15
    3a1c:	a0 2b       	or	r26, r16
    3a1e:	b1 2b       	or	r27, r17
    3a20:	2a 19       	sub	r18, r10
    3a22:	3b 09       	sbc	r19, r11
    3a24:	4c 09       	sbc	r20, r12
    3a26:	5d 09       	sbc	r21, r13
    3a28:	16 95       	lsr	r17
    3a2a:	07 95       	ror	r16
    3a2c:	f7 94       	ror	r15
    3a2e:	e7 94       	ror	r14
    3a30:	22 0f       	add	r18, r18
    3a32:	33 1f       	adc	r19, r19
    3a34:	44 1f       	adc	r20, r20
    3a36:	55 1f       	adc	r21, r21
    3a38:	6f 5f       	subi	r22, 0xFF	; 255
    3a3a:	7f 4f       	sbci	r23, 0xFF	; 255
    3a3c:	6f 31       	cpi	r22, 0x1F	; 31
    3a3e:	71 05       	cpc	r23, r1
    3a40:	31 f7       	brne	.-52     	; 0x3a0e <__divsf3+0xd6>
    3a42:	6f e7       	ldi	r22, 0x7F	; 127
    3a44:	e6 2e       	mov	r14, r22
    3a46:	f1 2c       	mov	r15, r1
    3a48:	01 2d       	mov	r16, r1
    3a4a:	11 2d       	mov	r17, r1
    3a4c:	e8 22       	and	r14, r24
    3a4e:	f9 22       	and	r15, r25
    3a50:	0a 23       	and	r16, r26
    3a52:	1b 23       	and	r17, r27
    3a54:	60 e4       	ldi	r22, 0x40	; 64
    3a56:	e6 16       	cp	r14, r22
    3a58:	f1 04       	cpc	r15, r1
    3a5a:	01 05       	cpc	r16, r1
    3a5c:	11 05       	cpc	r17, r1
    3a5e:	61 f4       	brne	.+24     	; 0x3a78 <__divsf3+0x140>
    3a60:	87 fd       	sbrc	r24, 7
    3a62:	0a c0       	rjmp	.+20     	; 0x3a78 <__divsf3+0x140>
    3a64:	21 15       	cp	r18, r1
    3a66:	31 05       	cpc	r19, r1
    3a68:	41 05       	cpc	r20, r1
    3a6a:	51 05       	cpc	r21, r1
    3a6c:	29 f0       	breq	.+10     	; 0x3a78 <__divsf3+0x140>
    3a6e:	80 5c       	subi	r24, 0xC0	; 192
    3a70:	9f 4f       	sbci	r25, 0xFF	; 255
    3a72:	af 4f       	sbci	r26, 0xFF	; 255
    3a74:	bf 4f       	sbci	r27, 0xFF	; 255
    3a76:	80 78       	andi	r24, 0x80	; 128
    3a78:	8d 87       	std	Y+13, r24	; 0x0d
    3a7a:	9e 87       	std	Y+14, r25	; 0x0e
    3a7c:	af 87       	std	Y+15, r26	; 0x0f
    3a7e:	b8 8b       	std	Y+16, r27	; 0x10
    3a80:	8e 01       	movw	r16, r28
    3a82:	07 5f       	subi	r16, 0xF7	; 247
    3a84:	1f 4f       	sbci	r17, 0xFF	; 255
    3a86:	c8 01       	movw	r24, r16
    3a88:	0e 94 5a 1f 	call	0x3eb4	; 0x3eb4 <__pack_f>
    3a8c:	68 96       	adiw	r28, 0x18	; 24
    3a8e:	ea e0       	ldi	r30, 0x0A	; 10
    3a90:	0c 94 83 21 	jmp	0x4306	; 0x4306 <__epilogue_restores__+0x10>

00003a94 <__gtsf2>:
    3a94:	a8 e1       	ldi	r26, 0x18	; 24
    3a96:	b0 e0       	ldi	r27, 0x00	; 0
    3a98:	e0 e5       	ldi	r30, 0x50	; 80
    3a9a:	fd e1       	ldi	r31, 0x1D	; 29
    3a9c:	0c 94 6b 21 	jmp	0x42d6	; 0x42d6 <__prologue_saves__+0x18>
    3aa0:	69 83       	std	Y+1, r22	; 0x01
    3aa2:	7a 83       	std	Y+2, r23	; 0x02
    3aa4:	8b 83       	std	Y+3, r24	; 0x03
    3aa6:	9c 83       	std	Y+4, r25	; 0x04
    3aa8:	2d 83       	std	Y+5, r18	; 0x05
    3aaa:	3e 83       	std	Y+6, r19	; 0x06
    3aac:	4f 83       	std	Y+7, r20	; 0x07
    3aae:	58 87       	std	Y+8, r21	; 0x08
    3ab0:	89 e0       	ldi	r24, 0x09	; 9
    3ab2:	e8 2e       	mov	r14, r24
    3ab4:	f1 2c       	mov	r15, r1
    3ab6:	ec 0e       	add	r14, r28
    3ab8:	fd 1e       	adc	r15, r29
    3aba:	ce 01       	movw	r24, r28
    3abc:	01 96       	adiw	r24, 0x01	; 1
    3abe:	b7 01       	movw	r22, r14
    3ac0:	0e 94 29 20 	call	0x4052	; 0x4052 <__unpack_f>
    3ac4:	8e 01       	movw	r16, r28
    3ac6:	0f 5e       	subi	r16, 0xEF	; 239
    3ac8:	1f 4f       	sbci	r17, 0xFF	; 255
    3aca:	ce 01       	movw	r24, r28
    3acc:	05 96       	adiw	r24, 0x05	; 5
    3ace:	b8 01       	movw	r22, r16
    3ad0:	0e 94 29 20 	call	0x4052	; 0x4052 <__unpack_f>
    3ad4:	89 85       	ldd	r24, Y+9	; 0x09
    3ad6:	82 30       	cpi	r24, 0x02	; 2
    3ad8:	40 f0       	brcs	.+16     	; 0x3aea <__gtsf2+0x56>
    3ada:	89 89       	ldd	r24, Y+17	; 0x11
    3adc:	82 30       	cpi	r24, 0x02	; 2
    3ade:	28 f0       	brcs	.+10     	; 0x3aea <__gtsf2+0x56>
    3ae0:	c7 01       	movw	r24, r14
    3ae2:	b8 01       	movw	r22, r16
    3ae4:	0e 94 98 20 	call	0x4130	; 0x4130 <__fpcmp_parts_f>
    3ae8:	01 c0       	rjmp	.+2      	; 0x3aec <__gtsf2+0x58>
    3aea:	8f ef       	ldi	r24, 0xFF	; 255
    3aec:	68 96       	adiw	r28, 0x18	; 24
    3aee:	e6 e0       	ldi	r30, 0x06	; 6
    3af0:	0c 94 87 21 	jmp	0x430e	; 0x430e <__epilogue_restores__+0x18>

00003af4 <__gesf2>:
    3af4:	a8 e1       	ldi	r26, 0x18	; 24
    3af6:	b0 e0       	ldi	r27, 0x00	; 0
    3af8:	e0 e8       	ldi	r30, 0x80	; 128
    3afa:	fd e1       	ldi	r31, 0x1D	; 29
    3afc:	0c 94 6b 21 	jmp	0x42d6	; 0x42d6 <__prologue_saves__+0x18>
    3b00:	69 83       	std	Y+1, r22	; 0x01
    3b02:	7a 83       	std	Y+2, r23	; 0x02
    3b04:	8b 83       	std	Y+3, r24	; 0x03
    3b06:	9c 83       	std	Y+4, r25	; 0x04
    3b08:	2d 83       	std	Y+5, r18	; 0x05
    3b0a:	3e 83       	std	Y+6, r19	; 0x06
    3b0c:	4f 83       	std	Y+7, r20	; 0x07
    3b0e:	58 87       	std	Y+8, r21	; 0x08
    3b10:	89 e0       	ldi	r24, 0x09	; 9
    3b12:	e8 2e       	mov	r14, r24
    3b14:	f1 2c       	mov	r15, r1
    3b16:	ec 0e       	add	r14, r28
    3b18:	fd 1e       	adc	r15, r29
    3b1a:	ce 01       	movw	r24, r28
    3b1c:	01 96       	adiw	r24, 0x01	; 1
    3b1e:	b7 01       	movw	r22, r14
    3b20:	0e 94 29 20 	call	0x4052	; 0x4052 <__unpack_f>
    3b24:	8e 01       	movw	r16, r28
    3b26:	0f 5e       	subi	r16, 0xEF	; 239
    3b28:	1f 4f       	sbci	r17, 0xFF	; 255
    3b2a:	ce 01       	movw	r24, r28
    3b2c:	05 96       	adiw	r24, 0x05	; 5
    3b2e:	b8 01       	movw	r22, r16
    3b30:	0e 94 29 20 	call	0x4052	; 0x4052 <__unpack_f>
    3b34:	89 85       	ldd	r24, Y+9	; 0x09
    3b36:	82 30       	cpi	r24, 0x02	; 2
    3b38:	40 f0       	brcs	.+16     	; 0x3b4a <__gesf2+0x56>
    3b3a:	89 89       	ldd	r24, Y+17	; 0x11
    3b3c:	82 30       	cpi	r24, 0x02	; 2
    3b3e:	28 f0       	brcs	.+10     	; 0x3b4a <__gesf2+0x56>
    3b40:	c7 01       	movw	r24, r14
    3b42:	b8 01       	movw	r22, r16
    3b44:	0e 94 98 20 	call	0x4130	; 0x4130 <__fpcmp_parts_f>
    3b48:	01 c0       	rjmp	.+2      	; 0x3b4c <__gesf2+0x58>
    3b4a:	8f ef       	ldi	r24, 0xFF	; 255
    3b4c:	68 96       	adiw	r28, 0x18	; 24
    3b4e:	e6 e0       	ldi	r30, 0x06	; 6
    3b50:	0c 94 87 21 	jmp	0x430e	; 0x430e <__epilogue_restores__+0x18>

00003b54 <__ltsf2>:
    3b54:	a8 e1       	ldi	r26, 0x18	; 24
    3b56:	b0 e0       	ldi	r27, 0x00	; 0
    3b58:	e0 eb       	ldi	r30, 0xB0	; 176
    3b5a:	fd e1       	ldi	r31, 0x1D	; 29
    3b5c:	0c 94 6b 21 	jmp	0x42d6	; 0x42d6 <__prologue_saves__+0x18>
    3b60:	69 83       	std	Y+1, r22	; 0x01
    3b62:	7a 83       	std	Y+2, r23	; 0x02
    3b64:	8b 83       	std	Y+3, r24	; 0x03
    3b66:	9c 83       	std	Y+4, r25	; 0x04
    3b68:	2d 83       	std	Y+5, r18	; 0x05
    3b6a:	3e 83       	std	Y+6, r19	; 0x06
    3b6c:	4f 83       	std	Y+7, r20	; 0x07
    3b6e:	58 87       	std	Y+8, r21	; 0x08
    3b70:	89 e0       	ldi	r24, 0x09	; 9
    3b72:	e8 2e       	mov	r14, r24
    3b74:	f1 2c       	mov	r15, r1
    3b76:	ec 0e       	add	r14, r28
    3b78:	fd 1e       	adc	r15, r29
    3b7a:	ce 01       	movw	r24, r28
    3b7c:	01 96       	adiw	r24, 0x01	; 1
    3b7e:	b7 01       	movw	r22, r14
    3b80:	0e 94 29 20 	call	0x4052	; 0x4052 <__unpack_f>
    3b84:	8e 01       	movw	r16, r28
    3b86:	0f 5e       	subi	r16, 0xEF	; 239
    3b88:	1f 4f       	sbci	r17, 0xFF	; 255
    3b8a:	ce 01       	movw	r24, r28
    3b8c:	05 96       	adiw	r24, 0x05	; 5
    3b8e:	b8 01       	movw	r22, r16
    3b90:	0e 94 29 20 	call	0x4052	; 0x4052 <__unpack_f>
    3b94:	89 85       	ldd	r24, Y+9	; 0x09
    3b96:	82 30       	cpi	r24, 0x02	; 2
    3b98:	40 f0       	brcs	.+16     	; 0x3baa <__ltsf2+0x56>
    3b9a:	89 89       	ldd	r24, Y+17	; 0x11
    3b9c:	82 30       	cpi	r24, 0x02	; 2
    3b9e:	28 f0       	brcs	.+10     	; 0x3baa <__ltsf2+0x56>
    3ba0:	c7 01       	movw	r24, r14
    3ba2:	b8 01       	movw	r22, r16
    3ba4:	0e 94 98 20 	call	0x4130	; 0x4130 <__fpcmp_parts_f>
    3ba8:	01 c0       	rjmp	.+2      	; 0x3bac <__ltsf2+0x58>
    3baa:	81 e0       	ldi	r24, 0x01	; 1
    3bac:	68 96       	adiw	r28, 0x18	; 24
    3bae:	e6 e0       	ldi	r30, 0x06	; 6
    3bb0:	0c 94 87 21 	jmp	0x430e	; 0x430e <__epilogue_restores__+0x18>

00003bb4 <__floatsisf>:
    3bb4:	a8 e0       	ldi	r26, 0x08	; 8
    3bb6:	b0 e0       	ldi	r27, 0x00	; 0
    3bb8:	e0 ee       	ldi	r30, 0xE0	; 224
    3bba:	fd e1       	ldi	r31, 0x1D	; 29
    3bbc:	0c 94 69 21 	jmp	0x42d2	; 0x42d2 <__prologue_saves__+0x14>
    3bc0:	23 e0       	ldi	r18, 0x03	; 3
    3bc2:	29 83       	std	Y+1, r18	; 0x01
    3bc4:	9b 01       	movw	r18, r22
    3bc6:	ac 01       	movw	r20, r24
    3bc8:	22 27       	eor	r18, r18
    3bca:	57 fd       	sbrc	r21, 7
    3bcc:	23 95       	inc	r18
    3bce:	33 27       	eor	r19, r19
    3bd0:	44 27       	eor	r20, r20
    3bd2:	55 27       	eor	r21, r21
    3bd4:	2a 83       	std	Y+2, r18	; 0x02
    3bd6:	61 15       	cp	r22, r1
    3bd8:	71 05       	cpc	r23, r1
    3bda:	81 05       	cpc	r24, r1
    3bdc:	91 05       	cpc	r25, r1
    3bde:	19 f4       	brne	.+6      	; 0x3be6 <__floatsisf+0x32>
    3be0:	82 e0       	ldi	r24, 0x02	; 2
    3be2:	89 83       	std	Y+1, r24	; 0x01
    3be4:	3c c0       	rjmp	.+120    	; 0x3c5e <__floatsisf+0xaa>
    3be6:	22 23       	and	r18, r18
    3be8:	a9 f0       	breq	.+42     	; 0x3c14 <__floatsisf+0x60>
    3bea:	60 30       	cpi	r22, 0x00	; 0
    3bec:	20 e0       	ldi	r18, 0x00	; 0
    3bee:	72 07       	cpc	r23, r18
    3bf0:	20 e0       	ldi	r18, 0x00	; 0
    3bf2:	82 07       	cpc	r24, r18
    3bf4:	20 e8       	ldi	r18, 0x80	; 128
    3bf6:	92 07       	cpc	r25, r18
    3bf8:	29 f4       	brne	.+10     	; 0x3c04 <__floatsisf+0x50>
    3bfa:	60 e0       	ldi	r22, 0x00	; 0
    3bfc:	70 e0       	ldi	r23, 0x00	; 0
    3bfe:	80 e0       	ldi	r24, 0x00	; 0
    3c00:	9f ec       	ldi	r25, 0xCF	; 207
    3c02:	31 c0       	rjmp	.+98     	; 0x3c66 <__floatsisf+0xb2>
    3c04:	ee 24       	eor	r14, r14
    3c06:	ff 24       	eor	r15, r15
    3c08:	87 01       	movw	r16, r14
    3c0a:	e6 1a       	sub	r14, r22
    3c0c:	f7 0a       	sbc	r15, r23
    3c0e:	08 0b       	sbc	r16, r24
    3c10:	19 0b       	sbc	r17, r25
    3c12:	02 c0       	rjmp	.+4      	; 0x3c18 <__floatsisf+0x64>
    3c14:	7b 01       	movw	r14, r22
    3c16:	8c 01       	movw	r16, r24
    3c18:	8e e1       	ldi	r24, 0x1E	; 30
    3c1a:	c8 2e       	mov	r12, r24
    3c1c:	d1 2c       	mov	r13, r1
    3c1e:	dc 82       	std	Y+4, r13	; 0x04
    3c20:	cb 82       	std	Y+3, r12	; 0x03
    3c22:	ed 82       	std	Y+5, r14	; 0x05
    3c24:	fe 82       	std	Y+6, r15	; 0x06
    3c26:	0f 83       	std	Y+7, r16	; 0x07
    3c28:	18 87       	std	Y+8, r17	; 0x08
    3c2a:	c8 01       	movw	r24, r16
    3c2c:	b7 01       	movw	r22, r14
    3c2e:	0e 94 02 1f 	call	0x3e04	; 0x3e04 <__clzsi2>
    3c32:	9c 01       	movw	r18, r24
    3c34:	21 50       	subi	r18, 0x01	; 1
    3c36:	30 40       	sbci	r19, 0x00	; 0
    3c38:	12 16       	cp	r1, r18
    3c3a:	13 06       	cpc	r1, r19
    3c3c:	84 f4       	brge	.+32     	; 0x3c5e <__floatsisf+0xaa>
    3c3e:	02 2e       	mov	r0, r18
    3c40:	04 c0       	rjmp	.+8      	; 0x3c4a <__floatsisf+0x96>
    3c42:	ee 0c       	add	r14, r14
    3c44:	ff 1c       	adc	r15, r15
    3c46:	00 1f       	adc	r16, r16
    3c48:	11 1f       	adc	r17, r17
    3c4a:	0a 94       	dec	r0
    3c4c:	d2 f7       	brpl	.-12     	; 0x3c42 <__floatsisf+0x8e>
    3c4e:	ed 82       	std	Y+5, r14	; 0x05
    3c50:	fe 82       	std	Y+6, r15	; 0x06
    3c52:	0f 83       	std	Y+7, r16	; 0x07
    3c54:	18 87       	std	Y+8, r17	; 0x08
    3c56:	c2 1a       	sub	r12, r18
    3c58:	d3 0a       	sbc	r13, r19
    3c5a:	dc 82       	std	Y+4, r13	; 0x04
    3c5c:	cb 82       	std	Y+3, r12	; 0x03
    3c5e:	ce 01       	movw	r24, r28
    3c60:	01 96       	adiw	r24, 0x01	; 1
    3c62:	0e 94 5a 1f 	call	0x3eb4	; 0x3eb4 <__pack_f>
    3c66:	28 96       	adiw	r28, 0x08	; 8
    3c68:	e8 e0       	ldi	r30, 0x08	; 8
    3c6a:	0c 94 85 21 	jmp	0x430a	; 0x430a <__epilogue_restores__+0x14>

00003c6e <__fixsfsi>:
    3c6e:	ac e0       	ldi	r26, 0x0C	; 12
    3c70:	b0 e0       	ldi	r27, 0x00	; 0
    3c72:	ed e3       	ldi	r30, 0x3D	; 61
    3c74:	fe e1       	ldi	r31, 0x1E	; 30
    3c76:	0c 94 6f 21 	jmp	0x42de	; 0x42de <__prologue_saves__+0x20>
    3c7a:	69 83       	std	Y+1, r22	; 0x01
    3c7c:	7a 83       	std	Y+2, r23	; 0x02
    3c7e:	8b 83       	std	Y+3, r24	; 0x03
    3c80:	9c 83       	std	Y+4, r25	; 0x04
    3c82:	ce 01       	movw	r24, r28
    3c84:	01 96       	adiw	r24, 0x01	; 1
    3c86:	be 01       	movw	r22, r28
    3c88:	6b 5f       	subi	r22, 0xFB	; 251
    3c8a:	7f 4f       	sbci	r23, 0xFF	; 255
    3c8c:	0e 94 29 20 	call	0x4052	; 0x4052 <__unpack_f>
    3c90:	8d 81       	ldd	r24, Y+5	; 0x05
    3c92:	82 30       	cpi	r24, 0x02	; 2
    3c94:	61 f1       	breq	.+88     	; 0x3cee <__fixsfsi+0x80>
    3c96:	82 30       	cpi	r24, 0x02	; 2
    3c98:	50 f1       	brcs	.+84     	; 0x3cee <__fixsfsi+0x80>
    3c9a:	84 30       	cpi	r24, 0x04	; 4
    3c9c:	21 f4       	brne	.+8      	; 0x3ca6 <__fixsfsi+0x38>
    3c9e:	8e 81       	ldd	r24, Y+6	; 0x06
    3ca0:	88 23       	and	r24, r24
    3ca2:	49 f1       	breq	.+82     	; 0x3cf6 <__fixsfsi+0x88>
    3ca4:	2d c0       	rjmp	.+90     	; 0x3d00 <__fixsfsi+0x92>
    3ca6:	2f 81       	ldd	r18, Y+7	; 0x07
    3ca8:	38 85       	ldd	r19, Y+8	; 0x08
    3caa:	37 fd       	sbrc	r19, 7
    3cac:	20 c0       	rjmp	.+64     	; 0x3cee <__fixsfsi+0x80>
    3cae:	6e 81       	ldd	r22, Y+6	; 0x06
    3cb0:	2f 31       	cpi	r18, 0x1F	; 31
    3cb2:	31 05       	cpc	r19, r1
    3cb4:	1c f0       	brlt	.+6      	; 0x3cbc <__fixsfsi+0x4e>
    3cb6:	66 23       	and	r22, r22
    3cb8:	f1 f0       	breq	.+60     	; 0x3cf6 <__fixsfsi+0x88>
    3cba:	22 c0       	rjmp	.+68     	; 0x3d00 <__fixsfsi+0x92>
    3cbc:	8e e1       	ldi	r24, 0x1E	; 30
    3cbe:	90 e0       	ldi	r25, 0x00	; 0
    3cc0:	82 1b       	sub	r24, r18
    3cc2:	93 0b       	sbc	r25, r19
    3cc4:	29 85       	ldd	r18, Y+9	; 0x09
    3cc6:	3a 85       	ldd	r19, Y+10	; 0x0a
    3cc8:	4b 85       	ldd	r20, Y+11	; 0x0b
    3cca:	5c 85       	ldd	r21, Y+12	; 0x0c
    3ccc:	04 c0       	rjmp	.+8      	; 0x3cd6 <__fixsfsi+0x68>
    3cce:	56 95       	lsr	r21
    3cd0:	47 95       	ror	r20
    3cd2:	37 95       	ror	r19
    3cd4:	27 95       	ror	r18
    3cd6:	8a 95       	dec	r24
    3cd8:	d2 f7       	brpl	.-12     	; 0x3cce <__fixsfsi+0x60>
    3cda:	66 23       	and	r22, r22
    3cdc:	a9 f0       	breq	.+42     	; 0x3d08 <__fixsfsi+0x9a>
    3cde:	50 95       	com	r21
    3ce0:	40 95       	com	r20
    3ce2:	30 95       	com	r19
    3ce4:	21 95       	neg	r18
    3ce6:	3f 4f       	sbci	r19, 0xFF	; 255
    3ce8:	4f 4f       	sbci	r20, 0xFF	; 255
    3cea:	5f 4f       	sbci	r21, 0xFF	; 255
    3cec:	0d c0       	rjmp	.+26     	; 0x3d08 <__fixsfsi+0x9a>
    3cee:	20 e0       	ldi	r18, 0x00	; 0
    3cf0:	30 e0       	ldi	r19, 0x00	; 0
    3cf2:	a9 01       	movw	r20, r18
    3cf4:	09 c0       	rjmp	.+18     	; 0x3d08 <__fixsfsi+0x9a>
    3cf6:	2f ef       	ldi	r18, 0xFF	; 255
    3cf8:	3f ef       	ldi	r19, 0xFF	; 255
    3cfa:	4f ef       	ldi	r20, 0xFF	; 255
    3cfc:	5f e7       	ldi	r21, 0x7F	; 127
    3cfe:	04 c0       	rjmp	.+8      	; 0x3d08 <__fixsfsi+0x9a>
    3d00:	20 e0       	ldi	r18, 0x00	; 0
    3d02:	30 e0       	ldi	r19, 0x00	; 0
    3d04:	40 e0       	ldi	r20, 0x00	; 0
    3d06:	50 e8       	ldi	r21, 0x80	; 128
    3d08:	b9 01       	movw	r22, r18
    3d0a:	ca 01       	movw	r24, r20
    3d0c:	2c 96       	adiw	r28, 0x0c	; 12
    3d0e:	e2 e0       	ldi	r30, 0x02	; 2
    3d10:	0c 94 8b 21 	jmp	0x4316	; 0x4316 <__epilogue_restores__+0x20>

00003d14 <__floatunsisf>:
    3d14:	a8 e0       	ldi	r26, 0x08	; 8
    3d16:	b0 e0       	ldi	r27, 0x00	; 0
    3d18:	e0 e9       	ldi	r30, 0x90	; 144
    3d1a:	fe e1       	ldi	r31, 0x1E	; 30
    3d1c:	0c 94 69 21 	jmp	0x42d2	; 0x42d2 <__prologue_saves__+0x14>
    3d20:	7b 01       	movw	r14, r22
    3d22:	8c 01       	movw	r16, r24
    3d24:	1a 82       	std	Y+2, r1	; 0x02
    3d26:	61 15       	cp	r22, r1
    3d28:	71 05       	cpc	r23, r1
    3d2a:	81 05       	cpc	r24, r1
    3d2c:	91 05       	cpc	r25, r1
    3d2e:	19 f4       	brne	.+6      	; 0x3d36 <__floatunsisf+0x22>
    3d30:	82 e0       	ldi	r24, 0x02	; 2
    3d32:	89 83       	std	Y+1, r24	; 0x01
    3d34:	5f c0       	rjmp	.+190    	; 0x3df4 <__floatunsisf+0xe0>
    3d36:	83 e0       	ldi	r24, 0x03	; 3
    3d38:	89 83       	std	Y+1, r24	; 0x01
    3d3a:	8e e1       	ldi	r24, 0x1E	; 30
    3d3c:	c8 2e       	mov	r12, r24
    3d3e:	d1 2c       	mov	r13, r1
    3d40:	dc 82       	std	Y+4, r13	; 0x04
    3d42:	cb 82       	std	Y+3, r12	; 0x03
    3d44:	ed 82       	std	Y+5, r14	; 0x05
    3d46:	fe 82       	std	Y+6, r15	; 0x06
    3d48:	0f 83       	std	Y+7, r16	; 0x07
    3d4a:	18 87       	std	Y+8, r17	; 0x08
    3d4c:	c8 01       	movw	r24, r16
    3d4e:	b7 01       	movw	r22, r14
    3d50:	0e 94 02 1f 	call	0x3e04	; 0x3e04 <__clzsi2>
    3d54:	9c 01       	movw	r18, r24
    3d56:	21 50       	subi	r18, 0x01	; 1
    3d58:	30 40       	sbci	r19, 0x00	; 0
    3d5a:	37 ff       	sbrs	r19, 7
    3d5c:	38 c0       	rjmp	.+112    	; 0x3dce <__floatunsisf+0xba>
    3d5e:	ee 27       	eor	r30, r30
    3d60:	ff 27       	eor	r31, r31
    3d62:	e2 1b       	sub	r30, r18
    3d64:	f3 0b       	sbc	r31, r19
    3d66:	40 e0       	ldi	r20, 0x00	; 0
    3d68:	50 e0       	ldi	r21, 0x00	; 0
    3d6a:	ba 01       	movw	r22, r20
    3d6c:	81 e0       	ldi	r24, 0x01	; 1
    3d6e:	90 e0       	ldi	r25, 0x00	; 0
    3d70:	a0 e0       	ldi	r26, 0x00	; 0
    3d72:	b0 e0       	ldi	r27, 0x00	; 0
    3d74:	0e 2e       	mov	r0, r30
    3d76:	04 c0       	rjmp	.+8      	; 0x3d80 <__floatunsisf+0x6c>
    3d78:	88 0f       	add	r24, r24
    3d7a:	99 1f       	adc	r25, r25
    3d7c:	aa 1f       	adc	r26, r26
    3d7e:	bb 1f       	adc	r27, r27
    3d80:	0a 94       	dec	r0
    3d82:	d2 f7       	brpl	.-12     	; 0x3d78 <__floatunsisf+0x64>
    3d84:	01 97       	sbiw	r24, 0x01	; 1
    3d86:	a1 09       	sbc	r26, r1
    3d88:	b1 09       	sbc	r27, r1
    3d8a:	8e 21       	and	r24, r14
    3d8c:	9f 21       	and	r25, r15
    3d8e:	a0 23       	and	r26, r16
    3d90:	b1 23       	and	r27, r17
    3d92:	00 97       	sbiw	r24, 0x00	; 0
    3d94:	a1 05       	cpc	r26, r1
    3d96:	b1 05       	cpc	r27, r1
    3d98:	21 f0       	breq	.+8      	; 0x3da2 <__floatunsisf+0x8e>
    3d9a:	41 e0       	ldi	r20, 0x01	; 1
    3d9c:	50 e0       	ldi	r21, 0x00	; 0
    3d9e:	60 e0       	ldi	r22, 0x00	; 0
    3da0:	70 e0       	ldi	r23, 0x00	; 0
    3da2:	04 c0       	rjmp	.+8      	; 0x3dac <__floatunsisf+0x98>
    3da4:	16 95       	lsr	r17
    3da6:	07 95       	ror	r16
    3da8:	f7 94       	ror	r15
    3daa:	e7 94       	ror	r14
    3dac:	ea 95       	dec	r30
    3dae:	d2 f7       	brpl	.-12     	; 0x3da4 <__floatunsisf+0x90>
    3db0:	e4 2a       	or	r14, r20
    3db2:	f5 2a       	or	r15, r21
    3db4:	06 2b       	or	r16, r22
    3db6:	17 2b       	or	r17, r23
    3db8:	ed 82       	std	Y+5, r14	; 0x05
    3dba:	fe 82       	std	Y+6, r15	; 0x06
    3dbc:	0f 83       	std	Y+7, r16	; 0x07
    3dbe:	18 87       	std	Y+8, r17	; 0x08
    3dc0:	8e e1       	ldi	r24, 0x1E	; 30
    3dc2:	90 e0       	ldi	r25, 0x00	; 0
    3dc4:	82 1b       	sub	r24, r18
    3dc6:	93 0b       	sbc	r25, r19
    3dc8:	9c 83       	std	Y+4, r25	; 0x04
    3dca:	8b 83       	std	Y+3, r24	; 0x03
    3dcc:	13 c0       	rjmp	.+38     	; 0x3df4 <__floatunsisf+0xe0>
    3dce:	21 15       	cp	r18, r1
    3dd0:	31 05       	cpc	r19, r1
    3dd2:	81 f0       	breq	.+32     	; 0x3df4 <__floatunsisf+0xe0>
    3dd4:	02 2e       	mov	r0, r18
    3dd6:	04 c0       	rjmp	.+8      	; 0x3de0 <__floatunsisf+0xcc>
    3dd8:	ee 0c       	add	r14, r14
    3dda:	ff 1c       	adc	r15, r15
    3ddc:	00 1f       	adc	r16, r16
    3dde:	11 1f       	adc	r17, r17
    3de0:	0a 94       	dec	r0
    3de2:	d2 f7       	brpl	.-12     	; 0x3dd8 <__floatunsisf+0xc4>
    3de4:	ed 82       	std	Y+5, r14	; 0x05
    3de6:	fe 82       	std	Y+6, r15	; 0x06
    3de8:	0f 83       	std	Y+7, r16	; 0x07
    3dea:	18 87       	std	Y+8, r17	; 0x08
    3dec:	c2 1a       	sub	r12, r18
    3dee:	d3 0a       	sbc	r13, r19
    3df0:	dc 82       	std	Y+4, r13	; 0x04
    3df2:	cb 82       	std	Y+3, r12	; 0x03
    3df4:	ce 01       	movw	r24, r28
    3df6:	01 96       	adiw	r24, 0x01	; 1
    3df8:	0e 94 5a 1f 	call	0x3eb4	; 0x3eb4 <__pack_f>
    3dfc:	28 96       	adiw	r28, 0x08	; 8
    3dfe:	e8 e0       	ldi	r30, 0x08	; 8
    3e00:	0c 94 85 21 	jmp	0x430a	; 0x430a <__epilogue_restores__+0x14>

00003e04 <__clzsi2>:
    3e04:	af 92       	push	r10
    3e06:	bf 92       	push	r11
    3e08:	cf 92       	push	r12
    3e0a:	df 92       	push	r13
    3e0c:	ef 92       	push	r14
    3e0e:	ff 92       	push	r15
    3e10:	0f 93       	push	r16
    3e12:	1f 93       	push	r17
    3e14:	7b 01       	movw	r14, r22
    3e16:	8c 01       	movw	r16, r24
    3e18:	80 e0       	ldi	r24, 0x00	; 0
    3e1a:	e8 16       	cp	r14, r24
    3e1c:	80 e0       	ldi	r24, 0x00	; 0
    3e1e:	f8 06       	cpc	r15, r24
    3e20:	81 e0       	ldi	r24, 0x01	; 1
    3e22:	08 07       	cpc	r16, r24
    3e24:	80 e0       	ldi	r24, 0x00	; 0
    3e26:	18 07       	cpc	r17, r24
    3e28:	80 f4       	brcc	.+32     	; 0x3e4a <__clzsi2+0x46>
    3e2a:	8f ef       	ldi	r24, 0xFF	; 255
    3e2c:	e8 16       	cp	r14, r24
    3e2e:	f1 04       	cpc	r15, r1
    3e30:	01 05       	cpc	r16, r1
    3e32:	11 05       	cpc	r17, r1
    3e34:	31 f0       	breq	.+12     	; 0x3e42 <__clzsi2+0x3e>
    3e36:	28 f0       	brcs	.+10     	; 0x3e42 <__clzsi2+0x3e>
    3e38:	88 e0       	ldi	r24, 0x08	; 8
    3e3a:	90 e0       	ldi	r25, 0x00	; 0
    3e3c:	a0 e0       	ldi	r26, 0x00	; 0
    3e3e:	b0 e0       	ldi	r27, 0x00	; 0
    3e40:	16 c0       	rjmp	.+44     	; 0x3e6e <__clzsi2+0x6a>
    3e42:	80 e0       	ldi	r24, 0x00	; 0
    3e44:	90 e0       	ldi	r25, 0x00	; 0
    3e46:	dc 01       	movw	r26, r24
    3e48:	12 c0       	rjmp	.+36     	; 0x3e6e <__clzsi2+0x6a>
    3e4a:	80 e0       	ldi	r24, 0x00	; 0
    3e4c:	e8 16       	cp	r14, r24
    3e4e:	80 e0       	ldi	r24, 0x00	; 0
    3e50:	f8 06       	cpc	r15, r24
    3e52:	80 e0       	ldi	r24, 0x00	; 0
    3e54:	08 07       	cpc	r16, r24
    3e56:	81 e0       	ldi	r24, 0x01	; 1
    3e58:	18 07       	cpc	r17, r24
    3e5a:	28 f0       	brcs	.+10     	; 0x3e66 <__clzsi2+0x62>
    3e5c:	88 e1       	ldi	r24, 0x18	; 24
    3e5e:	90 e0       	ldi	r25, 0x00	; 0
    3e60:	a0 e0       	ldi	r26, 0x00	; 0
    3e62:	b0 e0       	ldi	r27, 0x00	; 0
    3e64:	04 c0       	rjmp	.+8      	; 0x3e6e <__clzsi2+0x6a>
    3e66:	80 e1       	ldi	r24, 0x10	; 16
    3e68:	90 e0       	ldi	r25, 0x00	; 0
    3e6a:	a0 e0       	ldi	r26, 0x00	; 0
    3e6c:	b0 e0       	ldi	r27, 0x00	; 0
    3e6e:	20 e2       	ldi	r18, 0x20	; 32
    3e70:	30 e0       	ldi	r19, 0x00	; 0
    3e72:	40 e0       	ldi	r20, 0x00	; 0
    3e74:	50 e0       	ldi	r21, 0x00	; 0
    3e76:	28 1b       	sub	r18, r24
    3e78:	39 0b       	sbc	r19, r25
    3e7a:	4a 0b       	sbc	r20, r26
    3e7c:	5b 0b       	sbc	r21, r27
    3e7e:	57 01       	movw	r10, r14
    3e80:	68 01       	movw	r12, r16
    3e82:	04 c0       	rjmp	.+8      	; 0x3e8c <__clzsi2+0x88>
    3e84:	d6 94       	lsr	r13
    3e86:	c7 94       	ror	r12
    3e88:	b7 94       	ror	r11
    3e8a:	a7 94       	ror	r10
    3e8c:	8a 95       	dec	r24
    3e8e:	d2 f7       	brpl	.-12     	; 0x3e84 <__clzsi2+0x80>
    3e90:	f5 01       	movw	r30, r10
    3e92:	e2 5c       	subi	r30, 0xC2	; 194
    3e94:	fe 4f       	sbci	r31, 0xFE	; 254
    3e96:	80 81       	ld	r24, Z
    3e98:	28 1b       	sub	r18, r24
    3e9a:	31 09       	sbc	r19, r1
    3e9c:	41 09       	sbc	r20, r1
    3e9e:	51 09       	sbc	r21, r1
    3ea0:	c9 01       	movw	r24, r18
    3ea2:	1f 91       	pop	r17
    3ea4:	0f 91       	pop	r16
    3ea6:	ff 90       	pop	r15
    3ea8:	ef 90       	pop	r14
    3eaa:	df 90       	pop	r13
    3eac:	cf 90       	pop	r12
    3eae:	bf 90       	pop	r11
    3eb0:	af 90       	pop	r10
    3eb2:	08 95       	ret

00003eb4 <__pack_f>:
    3eb4:	cf 92       	push	r12
    3eb6:	df 92       	push	r13
    3eb8:	ef 92       	push	r14
    3eba:	ff 92       	push	r15
    3ebc:	0f 93       	push	r16
    3ebe:	1f 93       	push	r17
    3ec0:	fc 01       	movw	r30, r24
    3ec2:	24 81       	ldd	r18, Z+4	; 0x04
    3ec4:	35 81       	ldd	r19, Z+5	; 0x05
    3ec6:	46 81       	ldd	r20, Z+6	; 0x06
    3ec8:	57 81       	ldd	r21, Z+7	; 0x07
    3eca:	01 81       	ldd	r16, Z+1	; 0x01
    3ecc:	80 81       	ld	r24, Z
    3ece:	82 30       	cpi	r24, 0x02	; 2
    3ed0:	20 f4       	brcc	.+8      	; 0x3eda <__pack_f+0x26>
    3ed2:	40 61       	ori	r20, 0x10	; 16
    3ed4:	8f ef       	ldi	r24, 0xFF	; 255
    3ed6:	90 e0       	ldi	r25, 0x00	; 0
    3ed8:	a2 c0       	rjmp	.+324    	; 0x401e <__pack_f+0x16a>
    3eda:	84 30       	cpi	r24, 0x04	; 4
    3edc:	09 f4       	brne	.+2      	; 0x3ee0 <__pack_f+0x2c>
    3ede:	9a c0       	rjmp	.+308    	; 0x4014 <__pack_f+0x160>
    3ee0:	82 30       	cpi	r24, 0x02	; 2
    3ee2:	19 f4       	brne	.+6      	; 0x3eea <__pack_f+0x36>
    3ee4:	80 e0       	ldi	r24, 0x00	; 0
    3ee6:	90 e0       	ldi	r25, 0x00	; 0
    3ee8:	97 c0       	rjmp	.+302    	; 0x4018 <__pack_f+0x164>
    3eea:	21 15       	cp	r18, r1
    3eec:	31 05       	cpc	r19, r1
    3eee:	41 05       	cpc	r20, r1
    3ef0:	51 05       	cpc	r21, r1
    3ef2:	19 f4       	brne	.+6      	; 0x3efa <__pack_f+0x46>
    3ef4:	80 e0       	ldi	r24, 0x00	; 0
    3ef6:	90 e0       	ldi	r25, 0x00	; 0
    3ef8:	92 c0       	rjmp	.+292    	; 0x401e <__pack_f+0x16a>
    3efa:	82 81       	ldd	r24, Z+2	; 0x02
    3efc:	93 81       	ldd	r25, Z+3	; 0x03
    3efe:	6f ef       	ldi	r22, 0xFF	; 255
    3f00:	82 38       	cpi	r24, 0x82	; 130
    3f02:	96 07       	cpc	r25, r22
    3f04:	0c f0       	brlt	.+2      	; 0x3f08 <__pack_f+0x54>
    3f06:	58 c0       	rjmp	.+176    	; 0x3fb8 <__pack_f+0x104>
    3f08:	62 e8       	ldi	r22, 0x82	; 130
    3f0a:	7f ef       	ldi	r23, 0xFF	; 255
    3f0c:	68 1b       	sub	r22, r24
    3f0e:	79 0b       	sbc	r23, r25
    3f10:	6a 31       	cpi	r22, 0x1A	; 26
    3f12:	71 05       	cpc	r23, r1
    3f14:	24 f0       	brlt	.+8      	; 0x3f1e <__pack_f+0x6a>
    3f16:	20 e0       	ldi	r18, 0x00	; 0
    3f18:	30 e0       	ldi	r19, 0x00	; 0
    3f1a:	a9 01       	movw	r20, r18
    3f1c:	2a c0       	rjmp	.+84     	; 0x3f72 <__pack_f+0xbe>
    3f1e:	69 01       	movw	r12, r18
    3f20:	7a 01       	movw	r14, r20
    3f22:	06 2e       	mov	r0, r22
    3f24:	04 c0       	rjmp	.+8      	; 0x3f2e <__pack_f+0x7a>
    3f26:	f6 94       	lsr	r15
    3f28:	e7 94       	ror	r14
    3f2a:	d7 94       	ror	r13
    3f2c:	c7 94       	ror	r12
    3f2e:	0a 94       	dec	r0
    3f30:	d2 f7       	brpl	.-12     	; 0x3f26 <__pack_f+0x72>
    3f32:	81 e0       	ldi	r24, 0x01	; 1
    3f34:	90 e0       	ldi	r25, 0x00	; 0
    3f36:	a0 e0       	ldi	r26, 0x00	; 0
    3f38:	b0 e0       	ldi	r27, 0x00	; 0
    3f3a:	04 c0       	rjmp	.+8      	; 0x3f44 <__pack_f+0x90>
    3f3c:	88 0f       	add	r24, r24
    3f3e:	99 1f       	adc	r25, r25
    3f40:	aa 1f       	adc	r26, r26
    3f42:	bb 1f       	adc	r27, r27
    3f44:	6a 95       	dec	r22
    3f46:	d2 f7       	brpl	.-12     	; 0x3f3c <__pack_f+0x88>
    3f48:	01 97       	sbiw	r24, 0x01	; 1
    3f4a:	a1 09       	sbc	r26, r1
    3f4c:	b1 09       	sbc	r27, r1
    3f4e:	82 23       	and	r24, r18
    3f50:	93 23       	and	r25, r19
    3f52:	a4 23       	and	r26, r20
    3f54:	b5 23       	and	r27, r21
    3f56:	00 97       	sbiw	r24, 0x00	; 0
    3f58:	a1 05       	cpc	r26, r1
    3f5a:	b1 05       	cpc	r27, r1
    3f5c:	21 f0       	breq	.+8      	; 0x3f66 <__pack_f+0xb2>
    3f5e:	81 e0       	ldi	r24, 0x01	; 1
    3f60:	90 e0       	ldi	r25, 0x00	; 0
    3f62:	a0 e0       	ldi	r26, 0x00	; 0
    3f64:	b0 e0       	ldi	r27, 0x00	; 0
    3f66:	9c 01       	movw	r18, r24
    3f68:	ad 01       	movw	r20, r26
    3f6a:	2c 29       	or	r18, r12
    3f6c:	3d 29       	or	r19, r13
    3f6e:	4e 29       	or	r20, r14
    3f70:	5f 29       	or	r21, r15
    3f72:	da 01       	movw	r26, r20
    3f74:	c9 01       	movw	r24, r18
    3f76:	8f 77       	andi	r24, 0x7F	; 127
    3f78:	90 70       	andi	r25, 0x00	; 0
    3f7a:	a0 70       	andi	r26, 0x00	; 0
    3f7c:	b0 70       	andi	r27, 0x00	; 0
    3f7e:	80 34       	cpi	r24, 0x40	; 64
    3f80:	91 05       	cpc	r25, r1
    3f82:	a1 05       	cpc	r26, r1
    3f84:	b1 05       	cpc	r27, r1
    3f86:	39 f4       	brne	.+14     	; 0x3f96 <__pack_f+0xe2>
    3f88:	27 ff       	sbrs	r18, 7
    3f8a:	09 c0       	rjmp	.+18     	; 0x3f9e <__pack_f+0xea>
    3f8c:	20 5c       	subi	r18, 0xC0	; 192
    3f8e:	3f 4f       	sbci	r19, 0xFF	; 255
    3f90:	4f 4f       	sbci	r20, 0xFF	; 255
    3f92:	5f 4f       	sbci	r21, 0xFF	; 255
    3f94:	04 c0       	rjmp	.+8      	; 0x3f9e <__pack_f+0xea>
    3f96:	21 5c       	subi	r18, 0xC1	; 193
    3f98:	3f 4f       	sbci	r19, 0xFF	; 255
    3f9a:	4f 4f       	sbci	r20, 0xFF	; 255
    3f9c:	5f 4f       	sbci	r21, 0xFF	; 255
    3f9e:	80 e0       	ldi	r24, 0x00	; 0
    3fa0:	90 e0       	ldi	r25, 0x00	; 0
    3fa2:	20 30       	cpi	r18, 0x00	; 0
    3fa4:	60 e0       	ldi	r22, 0x00	; 0
    3fa6:	36 07       	cpc	r19, r22
    3fa8:	60 e0       	ldi	r22, 0x00	; 0
    3faa:	46 07       	cpc	r20, r22
    3fac:	60 e4       	ldi	r22, 0x40	; 64
    3fae:	56 07       	cpc	r21, r22
    3fb0:	48 f1       	brcs	.+82     	; 0x4004 <__pack_f+0x150>
    3fb2:	81 e0       	ldi	r24, 0x01	; 1
    3fb4:	90 e0       	ldi	r25, 0x00	; 0
    3fb6:	26 c0       	rjmp	.+76     	; 0x4004 <__pack_f+0x150>
    3fb8:	80 38       	cpi	r24, 0x80	; 128
    3fba:	91 05       	cpc	r25, r1
    3fbc:	5c f5       	brge	.+86     	; 0x4014 <__pack_f+0x160>
    3fbe:	81 58       	subi	r24, 0x81	; 129
    3fc0:	9f 4f       	sbci	r25, 0xFF	; 255
    3fc2:	7f e7       	ldi	r23, 0x7F	; 127
    3fc4:	c7 2e       	mov	r12, r23
    3fc6:	d1 2c       	mov	r13, r1
    3fc8:	e1 2c       	mov	r14, r1
    3fca:	f1 2c       	mov	r15, r1
    3fcc:	c2 22       	and	r12, r18
    3fce:	d3 22       	and	r13, r19
    3fd0:	e4 22       	and	r14, r20
    3fd2:	f5 22       	and	r15, r21
    3fd4:	60 e4       	ldi	r22, 0x40	; 64
    3fd6:	c6 16       	cp	r12, r22
    3fd8:	d1 04       	cpc	r13, r1
    3fda:	e1 04       	cpc	r14, r1
    3fdc:	f1 04       	cpc	r15, r1
    3fde:	39 f4       	brne	.+14     	; 0x3fee <__pack_f+0x13a>
    3fe0:	27 ff       	sbrs	r18, 7
    3fe2:	09 c0       	rjmp	.+18     	; 0x3ff6 <__pack_f+0x142>
    3fe4:	20 5c       	subi	r18, 0xC0	; 192
    3fe6:	3f 4f       	sbci	r19, 0xFF	; 255
    3fe8:	4f 4f       	sbci	r20, 0xFF	; 255
    3fea:	5f 4f       	sbci	r21, 0xFF	; 255
    3fec:	04 c0       	rjmp	.+8      	; 0x3ff6 <__pack_f+0x142>
    3fee:	21 5c       	subi	r18, 0xC1	; 193
    3ff0:	3f 4f       	sbci	r19, 0xFF	; 255
    3ff2:	4f 4f       	sbci	r20, 0xFF	; 255
    3ff4:	5f 4f       	sbci	r21, 0xFF	; 255
    3ff6:	57 ff       	sbrs	r21, 7
    3ff8:	05 c0       	rjmp	.+10     	; 0x4004 <__pack_f+0x150>
    3ffa:	56 95       	lsr	r21
    3ffc:	47 95       	ror	r20
    3ffe:	37 95       	ror	r19
    4000:	27 95       	ror	r18
    4002:	01 96       	adiw	r24, 0x01	; 1
    4004:	97 e0       	ldi	r25, 0x07	; 7
    4006:	56 95       	lsr	r21
    4008:	47 95       	ror	r20
    400a:	37 95       	ror	r19
    400c:	27 95       	ror	r18
    400e:	9a 95       	dec	r25
    4010:	d1 f7       	brne	.-12     	; 0x4006 <__pack_f+0x152>
    4012:	05 c0       	rjmp	.+10     	; 0x401e <__pack_f+0x16a>
    4014:	8f ef       	ldi	r24, 0xFF	; 255
    4016:	90 e0       	ldi	r25, 0x00	; 0
    4018:	20 e0       	ldi	r18, 0x00	; 0
    401a:	30 e0       	ldi	r19, 0x00	; 0
    401c:	a9 01       	movw	r20, r18
    401e:	78 2f       	mov	r23, r24
    4020:	77 95       	ror	r23
    4022:	77 27       	eor	r23, r23
    4024:	77 95       	ror	r23
    4026:	14 2f       	mov	r17, r20
    4028:	1f 77       	andi	r17, 0x7F	; 127
    402a:	60 2f       	mov	r22, r16
    402c:	67 95       	ror	r22
    402e:	66 27       	eor	r22, r22
    4030:	67 95       	ror	r22
    4032:	86 95       	lsr	r24
    4034:	f1 2f       	mov	r31, r17
    4036:	f7 2b       	or	r31, r23
    4038:	e8 2f       	mov	r30, r24
    403a:	e6 2b       	or	r30, r22
    403c:	62 2f       	mov	r22, r18
    403e:	73 2f       	mov	r23, r19
    4040:	8f 2f       	mov	r24, r31
    4042:	9e 2f       	mov	r25, r30
    4044:	1f 91       	pop	r17
    4046:	0f 91       	pop	r16
    4048:	ff 90       	pop	r15
    404a:	ef 90       	pop	r14
    404c:	df 90       	pop	r13
    404e:	cf 90       	pop	r12
    4050:	08 95       	ret

00004052 <__unpack_f>:
    4052:	fc 01       	movw	r30, r24
    4054:	db 01       	movw	r26, r22
    4056:	20 81       	ld	r18, Z
    4058:	31 81       	ldd	r19, Z+1	; 0x01
    405a:	82 81       	ldd	r24, Z+2	; 0x02
    405c:	48 2f       	mov	r20, r24
    405e:	4f 77       	andi	r20, 0x7F	; 127
    4060:	50 e0       	ldi	r21, 0x00	; 0
    4062:	98 2f       	mov	r25, r24
    4064:	99 1f       	adc	r25, r25
    4066:	99 27       	eor	r25, r25
    4068:	99 1f       	adc	r25, r25
    406a:	63 81       	ldd	r22, Z+3	; 0x03
    406c:	86 2f       	mov	r24, r22
    406e:	88 0f       	add	r24, r24
    4070:	89 2b       	or	r24, r25
    4072:	90 e0       	ldi	r25, 0x00	; 0
    4074:	66 1f       	adc	r22, r22
    4076:	66 27       	eor	r22, r22
    4078:	66 1f       	adc	r22, r22
    407a:	11 96       	adiw	r26, 0x01	; 1
    407c:	6c 93       	st	X, r22
    407e:	11 97       	sbiw	r26, 0x01	; 1
    4080:	00 97       	sbiw	r24, 0x00	; 0
    4082:	69 f5       	brne	.+90     	; 0x40de <__unpack_f+0x8c>
    4084:	21 15       	cp	r18, r1
    4086:	31 05       	cpc	r19, r1
    4088:	41 05       	cpc	r20, r1
    408a:	51 05       	cpc	r21, r1
    408c:	11 f4       	brne	.+4      	; 0x4092 <__unpack_f+0x40>
    408e:	82 e0       	ldi	r24, 0x02	; 2
    4090:	2f c0       	rjmp	.+94     	; 0x40f0 <__unpack_f+0x9e>
    4092:	82 e8       	ldi	r24, 0x82	; 130
    4094:	9f ef       	ldi	r25, 0xFF	; 255
    4096:	13 96       	adiw	r26, 0x03	; 3
    4098:	9c 93       	st	X, r25
    409a:	8e 93       	st	-X, r24
    409c:	12 97       	sbiw	r26, 0x02	; 2
    409e:	67 e0       	ldi	r22, 0x07	; 7
    40a0:	22 0f       	add	r18, r18
    40a2:	33 1f       	adc	r19, r19
    40a4:	44 1f       	adc	r20, r20
    40a6:	55 1f       	adc	r21, r21
    40a8:	6a 95       	dec	r22
    40aa:	d1 f7       	brne	.-12     	; 0x40a0 <__unpack_f+0x4e>
    40ac:	83 e0       	ldi	r24, 0x03	; 3
    40ae:	8c 93       	st	X, r24
    40b0:	0d c0       	rjmp	.+26     	; 0x40cc <__unpack_f+0x7a>
    40b2:	22 0f       	add	r18, r18
    40b4:	33 1f       	adc	r19, r19
    40b6:	44 1f       	adc	r20, r20
    40b8:	55 1f       	adc	r21, r21
    40ba:	12 96       	adiw	r26, 0x02	; 2
    40bc:	8d 91       	ld	r24, X+
    40be:	9c 91       	ld	r25, X
    40c0:	13 97       	sbiw	r26, 0x03	; 3
    40c2:	01 97       	sbiw	r24, 0x01	; 1
    40c4:	13 96       	adiw	r26, 0x03	; 3
    40c6:	9c 93       	st	X, r25
    40c8:	8e 93       	st	-X, r24
    40ca:	12 97       	sbiw	r26, 0x02	; 2
    40cc:	20 30       	cpi	r18, 0x00	; 0
    40ce:	80 e0       	ldi	r24, 0x00	; 0
    40d0:	38 07       	cpc	r19, r24
    40d2:	80 e0       	ldi	r24, 0x00	; 0
    40d4:	48 07       	cpc	r20, r24
    40d6:	80 e4       	ldi	r24, 0x40	; 64
    40d8:	58 07       	cpc	r21, r24
    40da:	58 f3       	brcs	.-42     	; 0x40b2 <__unpack_f+0x60>
    40dc:	22 c0       	rjmp	.+68     	; 0x4122 <__unpack_f+0xd0>
    40de:	8f 3f       	cpi	r24, 0xFF	; 255
    40e0:	91 05       	cpc	r25, r1
    40e2:	79 f4       	brne	.+30     	; 0x4102 <__unpack_f+0xb0>
    40e4:	21 15       	cp	r18, r1
    40e6:	31 05       	cpc	r19, r1
    40e8:	41 05       	cpc	r20, r1
    40ea:	51 05       	cpc	r21, r1
    40ec:	19 f4       	brne	.+6      	; 0x40f4 <__unpack_f+0xa2>
    40ee:	84 e0       	ldi	r24, 0x04	; 4
    40f0:	8c 93       	st	X, r24
    40f2:	08 95       	ret
    40f4:	44 ff       	sbrs	r20, 4
    40f6:	03 c0       	rjmp	.+6      	; 0x40fe <__unpack_f+0xac>
    40f8:	81 e0       	ldi	r24, 0x01	; 1
    40fa:	8c 93       	st	X, r24
    40fc:	12 c0       	rjmp	.+36     	; 0x4122 <__unpack_f+0xd0>
    40fe:	1c 92       	st	X, r1
    4100:	10 c0       	rjmp	.+32     	; 0x4122 <__unpack_f+0xd0>
    4102:	8f 57       	subi	r24, 0x7F	; 127
    4104:	90 40       	sbci	r25, 0x00	; 0
    4106:	13 96       	adiw	r26, 0x03	; 3
    4108:	9c 93       	st	X, r25
    410a:	8e 93       	st	-X, r24
    410c:	12 97       	sbiw	r26, 0x02	; 2
    410e:	83 e0       	ldi	r24, 0x03	; 3
    4110:	8c 93       	st	X, r24
    4112:	87 e0       	ldi	r24, 0x07	; 7
    4114:	22 0f       	add	r18, r18
    4116:	33 1f       	adc	r19, r19
    4118:	44 1f       	adc	r20, r20
    411a:	55 1f       	adc	r21, r21
    411c:	8a 95       	dec	r24
    411e:	d1 f7       	brne	.-12     	; 0x4114 <__unpack_f+0xc2>
    4120:	50 64       	ori	r21, 0x40	; 64
    4122:	14 96       	adiw	r26, 0x04	; 4
    4124:	2d 93       	st	X+, r18
    4126:	3d 93       	st	X+, r19
    4128:	4d 93       	st	X+, r20
    412a:	5c 93       	st	X, r21
    412c:	17 97       	sbiw	r26, 0x07	; 7
    412e:	08 95       	ret

00004130 <__fpcmp_parts_f>:
    4130:	ef 92       	push	r14
    4132:	ff 92       	push	r15
    4134:	0f 93       	push	r16
    4136:	1f 93       	push	r17
    4138:	fc 01       	movw	r30, r24
    413a:	db 01       	movw	r26, r22
    413c:	80 81       	ld	r24, Z
    413e:	82 30       	cpi	r24, 0x02	; 2
    4140:	08 f4       	brcc	.+2      	; 0x4144 <__fpcmp_parts_f+0x14>
    4142:	47 c0       	rjmp	.+142    	; 0x41d2 <__fpcmp_parts_f+0xa2>
    4144:	9c 91       	ld	r25, X
    4146:	92 30       	cpi	r25, 0x02	; 2
    4148:	08 f4       	brcc	.+2      	; 0x414c <__fpcmp_parts_f+0x1c>
    414a:	43 c0       	rjmp	.+134    	; 0x41d2 <__fpcmp_parts_f+0xa2>
    414c:	84 30       	cpi	r24, 0x04	; 4
    414e:	51 f4       	brne	.+20     	; 0x4164 <__fpcmp_parts_f+0x34>
    4150:	81 81       	ldd	r24, Z+1	; 0x01
    4152:	94 30       	cpi	r25, 0x04	; 4
    4154:	a1 f5       	brne	.+104    	; 0x41be <__fpcmp_parts_f+0x8e>
    4156:	11 96       	adiw	r26, 0x01	; 1
    4158:	2c 91       	ld	r18, X
    415a:	11 97       	sbiw	r26, 0x01	; 1
    415c:	30 e0       	ldi	r19, 0x00	; 0
    415e:	28 1b       	sub	r18, r24
    4160:	31 09       	sbc	r19, r1
    4162:	3f c0       	rjmp	.+126    	; 0x41e2 <__fpcmp_parts_f+0xb2>
    4164:	94 30       	cpi	r25, 0x04	; 4
    4166:	21 f0       	breq	.+8      	; 0x4170 <__fpcmp_parts_f+0x40>
    4168:	82 30       	cpi	r24, 0x02	; 2
    416a:	31 f4       	brne	.+12     	; 0x4178 <__fpcmp_parts_f+0x48>
    416c:	92 30       	cpi	r25, 0x02	; 2
    416e:	b9 f1       	breq	.+110    	; 0x41de <__fpcmp_parts_f+0xae>
    4170:	11 96       	adiw	r26, 0x01	; 1
    4172:	8c 91       	ld	r24, X
    4174:	11 97       	sbiw	r26, 0x01	; 1
    4176:	2b c0       	rjmp	.+86     	; 0x41ce <__fpcmp_parts_f+0x9e>
    4178:	81 81       	ldd	r24, Z+1	; 0x01
    417a:	92 30       	cpi	r25, 0x02	; 2
    417c:	01 f1       	breq	.+64     	; 0x41be <__fpcmp_parts_f+0x8e>
    417e:	11 96       	adiw	r26, 0x01	; 1
    4180:	9c 91       	ld	r25, X
    4182:	11 97       	sbiw	r26, 0x01	; 1
    4184:	89 17       	cp	r24, r25
    4186:	d9 f4       	brne	.+54     	; 0x41be <__fpcmp_parts_f+0x8e>
    4188:	42 81       	ldd	r20, Z+2	; 0x02
    418a:	53 81       	ldd	r21, Z+3	; 0x03
    418c:	12 96       	adiw	r26, 0x02	; 2
    418e:	2d 91       	ld	r18, X+
    4190:	3c 91       	ld	r19, X
    4192:	13 97       	sbiw	r26, 0x03	; 3
    4194:	24 17       	cp	r18, r20
    4196:	35 07       	cpc	r19, r21
    4198:	94 f0       	brlt	.+36     	; 0x41be <__fpcmp_parts_f+0x8e>
    419a:	42 17       	cp	r20, r18
    419c:	53 07       	cpc	r21, r19
    419e:	bc f0       	brlt	.+46     	; 0x41ce <__fpcmp_parts_f+0x9e>
    41a0:	e4 80       	ldd	r14, Z+4	; 0x04
    41a2:	f5 80       	ldd	r15, Z+5	; 0x05
    41a4:	06 81       	ldd	r16, Z+6	; 0x06
    41a6:	17 81       	ldd	r17, Z+7	; 0x07
    41a8:	14 96       	adiw	r26, 0x04	; 4
    41aa:	2d 91       	ld	r18, X+
    41ac:	3d 91       	ld	r19, X+
    41ae:	4d 91       	ld	r20, X+
    41b0:	5c 91       	ld	r21, X
    41b2:	17 97       	sbiw	r26, 0x07	; 7
    41b4:	2e 15       	cp	r18, r14
    41b6:	3f 05       	cpc	r19, r15
    41b8:	40 07       	cpc	r20, r16
    41ba:	51 07       	cpc	r21, r17
    41bc:	18 f4       	brcc	.+6      	; 0x41c4 <__fpcmp_parts_f+0x94>
    41be:	88 23       	and	r24, r24
    41c0:	41 f0       	breq	.+16     	; 0x41d2 <__fpcmp_parts_f+0xa2>
    41c2:	0a c0       	rjmp	.+20     	; 0x41d8 <__fpcmp_parts_f+0xa8>
    41c4:	e2 16       	cp	r14, r18
    41c6:	f3 06       	cpc	r15, r19
    41c8:	04 07       	cpc	r16, r20
    41ca:	15 07       	cpc	r17, r21
    41cc:	40 f4       	brcc	.+16     	; 0x41de <__fpcmp_parts_f+0xae>
    41ce:	88 23       	and	r24, r24
    41d0:	19 f0       	breq	.+6      	; 0x41d8 <__fpcmp_parts_f+0xa8>
    41d2:	21 e0       	ldi	r18, 0x01	; 1
    41d4:	30 e0       	ldi	r19, 0x00	; 0
    41d6:	05 c0       	rjmp	.+10     	; 0x41e2 <__fpcmp_parts_f+0xb2>
    41d8:	2f ef       	ldi	r18, 0xFF	; 255
    41da:	3f ef       	ldi	r19, 0xFF	; 255
    41dc:	02 c0       	rjmp	.+4      	; 0x41e2 <__fpcmp_parts_f+0xb2>
    41de:	20 e0       	ldi	r18, 0x00	; 0
    41e0:	30 e0       	ldi	r19, 0x00	; 0
    41e2:	c9 01       	movw	r24, r18
    41e4:	1f 91       	pop	r17
    41e6:	0f 91       	pop	r16
    41e8:	ff 90       	pop	r15
    41ea:	ef 90       	pop	r14
    41ec:	08 95       	ret

000041ee <__mulsi3>:
    41ee:	62 9f       	mul	r22, r18
    41f0:	d0 01       	movw	r26, r0
    41f2:	73 9f       	mul	r23, r19
    41f4:	f0 01       	movw	r30, r0
    41f6:	82 9f       	mul	r24, r18
    41f8:	e0 0d       	add	r30, r0
    41fa:	f1 1d       	adc	r31, r1
    41fc:	64 9f       	mul	r22, r20
    41fe:	e0 0d       	add	r30, r0
    4200:	f1 1d       	adc	r31, r1
    4202:	92 9f       	mul	r25, r18
    4204:	f0 0d       	add	r31, r0
    4206:	83 9f       	mul	r24, r19
    4208:	f0 0d       	add	r31, r0
    420a:	74 9f       	mul	r23, r20
    420c:	f0 0d       	add	r31, r0
    420e:	65 9f       	mul	r22, r21
    4210:	f0 0d       	add	r31, r0
    4212:	99 27       	eor	r25, r25
    4214:	72 9f       	mul	r23, r18
    4216:	b0 0d       	add	r27, r0
    4218:	e1 1d       	adc	r30, r1
    421a:	f9 1f       	adc	r31, r25
    421c:	63 9f       	mul	r22, r19
    421e:	b0 0d       	add	r27, r0
    4220:	e1 1d       	adc	r30, r1
    4222:	f9 1f       	adc	r31, r25
    4224:	bd 01       	movw	r22, r26
    4226:	cf 01       	movw	r24, r30
    4228:	11 24       	eor	r1, r1
    422a:	08 95       	ret

0000422c <__udivmodhi4>:
    422c:	aa 1b       	sub	r26, r26
    422e:	bb 1b       	sub	r27, r27
    4230:	51 e1       	ldi	r21, 0x11	; 17
    4232:	07 c0       	rjmp	.+14     	; 0x4242 <__udivmodhi4_ep>

00004234 <__udivmodhi4_loop>:
    4234:	aa 1f       	adc	r26, r26
    4236:	bb 1f       	adc	r27, r27
    4238:	a6 17       	cp	r26, r22
    423a:	b7 07       	cpc	r27, r23
    423c:	10 f0       	brcs	.+4      	; 0x4242 <__udivmodhi4_ep>
    423e:	a6 1b       	sub	r26, r22
    4240:	b7 0b       	sbc	r27, r23

00004242 <__udivmodhi4_ep>:
    4242:	88 1f       	adc	r24, r24
    4244:	99 1f       	adc	r25, r25
    4246:	5a 95       	dec	r21
    4248:	a9 f7       	brne	.-22     	; 0x4234 <__udivmodhi4_loop>
    424a:	80 95       	com	r24
    424c:	90 95       	com	r25
    424e:	bc 01       	movw	r22, r24
    4250:	cd 01       	movw	r24, r26
    4252:	08 95       	ret

00004254 <__divmodhi4>:
    4254:	97 fb       	bst	r25, 7
    4256:	09 2e       	mov	r0, r25
    4258:	07 26       	eor	r0, r23
    425a:	0a d0       	rcall	.+20     	; 0x4270 <__divmodhi4_neg1>
    425c:	77 fd       	sbrc	r23, 7
    425e:	04 d0       	rcall	.+8      	; 0x4268 <__divmodhi4_neg2>
    4260:	e5 df       	rcall	.-54     	; 0x422c <__udivmodhi4>
    4262:	06 d0       	rcall	.+12     	; 0x4270 <__divmodhi4_neg1>
    4264:	00 20       	and	r0, r0
    4266:	1a f4       	brpl	.+6      	; 0x426e <__divmodhi4_exit>

00004268 <__divmodhi4_neg2>:
    4268:	70 95       	com	r23
    426a:	61 95       	neg	r22
    426c:	7f 4f       	sbci	r23, 0xFF	; 255

0000426e <__divmodhi4_exit>:
    426e:	08 95       	ret

00004270 <__divmodhi4_neg1>:
    4270:	f6 f7       	brtc	.-4      	; 0x426e <__divmodhi4_exit>
    4272:	90 95       	com	r25
    4274:	81 95       	neg	r24
    4276:	9f 4f       	sbci	r25, 0xFF	; 255
    4278:	08 95       	ret

0000427a <__udivmodsi4>:
    427a:	a1 e2       	ldi	r26, 0x21	; 33
    427c:	1a 2e       	mov	r1, r26
    427e:	aa 1b       	sub	r26, r26
    4280:	bb 1b       	sub	r27, r27
    4282:	fd 01       	movw	r30, r26
    4284:	0d c0       	rjmp	.+26     	; 0x42a0 <__udivmodsi4_ep>

00004286 <__udivmodsi4_loop>:
    4286:	aa 1f       	adc	r26, r26
    4288:	bb 1f       	adc	r27, r27
    428a:	ee 1f       	adc	r30, r30
    428c:	ff 1f       	adc	r31, r31
    428e:	a2 17       	cp	r26, r18
    4290:	b3 07       	cpc	r27, r19
    4292:	e4 07       	cpc	r30, r20
    4294:	f5 07       	cpc	r31, r21
    4296:	20 f0       	brcs	.+8      	; 0x42a0 <__udivmodsi4_ep>
    4298:	a2 1b       	sub	r26, r18
    429a:	b3 0b       	sbc	r27, r19
    429c:	e4 0b       	sbc	r30, r20
    429e:	f5 0b       	sbc	r31, r21

000042a0 <__udivmodsi4_ep>:
    42a0:	66 1f       	adc	r22, r22
    42a2:	77 1f       	adc	r23, r23
    42a4:	88 1f       	adc	r24, r24
    42a6:	99 1f       	adc	r25, r25
    42a8:	1a 94       	dec	r1
    42aa:	69 f7       	brne	.-38     	; 0x4286 <__udivmodsi4_loop>
    42ac:	60 95       	com	r22
    42ae:	70 95       	com	r23
    42b0:	80 95       	com	r24
    42b2:	90 95       	com	r25
    42b4:	9b 01       	movw	r18, r22
    42b6:	ac 01       	movw	r20, r24
    42b8:	bd 01       	movw	r22, r26
    42ba:	cf 01       	movw	r24, r30
    42bc:	08 95       	ret

000042be <__prologue_saves__>:
    42be:	2f 92       	push	r2
    42c0:	3f 92       	push	r3
    42c2:	4f 92       	push	r4
    42c4:	5f 92       	push	r5
    42c6:	6f 92       	push	r6
    42c8:	7f 92       	push	r7
    42ca:	8f 92       	push	r8
    42cc:	9f 92       	push	r9
    42ce:	af 92       	push	r10
    42d0:	bf 92       	push	r11
    42d2:	cf 92       	push	r12
    42d4:	df 92       	push	r13
    42d6:	ef 92       	push	r14
    42d8:	ff 92       	push	r15
    42da:	0f 93       	push	r16
    42dc:	1f 93       	push	r17
    42de:	cf 93       	push	r28
    42e0:	df 93       	push	r29
    42e2:	cd b7       	in	r28, 0x3d	; 61
    42e4:	de b7       	in	r29, 0x3e	; 62
    42e6:	ca 1b       	sub	r28, r26
    42e8:	db 0b       	sbc	r29, r27
    42ea:	0f b6       	in	r0, 0x3f	; 63
    42ec:	f8 94       	cli
    42ee:	de bf       	out	0x3e, r29	; 62
    42f0:	0f be       	out	0x3f, r0	; 63
    42f2:	cd bf       	out	0x3d, r28	; 61
    42f4:	09 94       	ijmp

000042f6 <__epilogue_restores__>:
    42f6:	2a 88       	ldd	r2, Y+18	; 0x12
    42f8:	39 88       	ldd	r3, Y+17	; 0x11
    42fa:	48 88       	ldd	r4, Y+16	; 0x10
    42fc:	5f 84       	ldd	r5, Y+15	; 0x0f
    42fe:	6e 84       	ldd	r6, Y+14	; 0x0e
    4300:	7d 84       	ldd	r7, Y+13	; 0x0d
    4302:	8c 84       	ldd	r8, Y+12	; 0x0c
    4304:	9b 84       	ldd	r9, Y+11	; 0x0b
    4306:	aa 84       	ldd	r10, Y+10	; 0x0a
    4308:	b9 84       	ldd	r11, Y+9	; 0x09
    430a:	c8 84       	ldd	r12, Y+8	; 0x08
    430c:	df 80       	ldd	r13, Y+7	; 0x07
    430e:	ee 80       	ldd	r14, Y+6	; 0x06
    4310:	fd 80       	ldd	r15, Y+5	; 0x05
    4312:	0c 81       	ldd	r16, Y+4	; 0x04
    4314:	1b 81       	ldd	r17, Y+3	; 0x03
    4316:	aa 81       	ldd	r26, Y+2	; 0x02
    4318:	b9 81       	ldd	r27, Y+1	; 0x01
    431a:	ce 0f       	add	r28, r30
    431c:	d1 1d       	adc	r29, r1
    431e:	0f b6       	in	r0, 0x3f	; 63
    4320:	f8 94       	cli
    4322:	de bf       	out	0x3e, r29	; 62
    4324:	0f be       	out	0x3f, r0	; 63
    4326:	cd bf       	out	0x3d, r28	; 61
    4328:	ed 01       	movw	r28, r26
    432a:	08 95       	ret

0000432c <__tablejump2__>:
    432c:	ee 0f       	add	r30, r30
    432e:	ff 1f       	adc	r31, r31

00004330 <__tablejump__>:
    4330:	05 90       	lpm	r0, Z+
    4332:	f4 91       	lpm	r31, Z+
    4334:	e0 2d       	mov	r30, r0
    4336:	09 94       	ijmp

00004338 <acos>:
    4338:	9f 93       	push	r25
    433a:	9f 77       	andi	r25, 0x7F	; 127
    433c:	6e d0       	rcall	.+220    	; 0x441a <__fp_arccos>
    433e:	0f 90       	pop	r0
    4340:	00 20       	and	r0, r0
    4342:	3a f4       	brpl	.+14     	; 0x4352 <acos+0x1a>
    4344:	90 58       	subi	r25, 0x80	; 128
    4346:	a2 ea       	ldi	r26, 0xA2	; 162
    4348:	2a ed       	ldi	r18, 0xDA	; 218
    434a:	3f e0       	ldi	r19, 0x0F	; 15
    434c:	49 e4       	ldi	r20, 0x49	; 73
    434e:	50 e4       	ldi	r21, 0x40	; 64
    4350:	0e d0       	rcall	.+28     	; 0x436e <__addsf3x>
    4352:	e2 c0       	rjmp	.+452    	; 0x4518 <__fp_round>
    4354:	ab d0       	rcall	.+342    	; 0x44ac <__fp_pscA>
    4356:	30 f0       	brcs	.+12     	; 0x4364 <acos+0x2c>
    4358:	b0 d0       	rcall	.+352    	; 0x44ba <__fp_pscB>
    435a:	20 f0       	brcs	.+8      	; 0x4364 <acos+0x2c>
    435c:	31 f4       	brne	.+12     	; 0x436a <acos+0x32>
    435e:	9f 3f       	cpi	r25, 0xFF	; 255
    4360:	11 f4       	brne	.+4      	; 0x4366 <acos+0x2e>
    4362:	1e f4       	brtc	.+6      	; 0x436a <acos+0x32>
    4364:	7b c0       	rjmp	.+246    	; 0x445c <__fp_nan>
    4366:	0e f4       	brtc	.+2      	; 0x436a <acos+0x32>
    4368:	e0 95       	com	r30
    436a:	e7 fb       	bst	r30, 7
    436c:	71 c0       	rjmp	.+226    	; 0x4450 <__fp_inf>

0000436e <__addsf3x>:
    436e:	e9 2f       	mov	r30, r25
    4370:	f5 d0       	rcall	.+490    	; 0x455c <__fp_split3>
    4372:	80 f3       	brcs	.-32     	; 0x4354 <acos+0x1c>
    4374:	ba 17       	cp	r27, r26
    4376:	62 07       	cpc	r22, r18
    4378:	73 07       	cpc	r23, r19
    437a:	84 07       	cpc	r24, r20
    437c:	95 07       	cpc	r25, r21
    437e:	18 f0       	brcs	.+6      	; 0x4386 <__addsf3x+0x18>
    4380:	71 f4       	brne	.+28     	; 0x439e <__addsf3x+0x30>
    4382:	9e f5       	brtc	.+102    	; 0x43ea <__addsf3x+0x7c>
    4384:	0d c1       	rjmp	.+538    	; 0x45a0 <__fp_zero>
    4386:	0e f4       	brtc	.+2      	; 0x438a <__addsf3x+0x1c>
    4388:	e0 95       	com	r30
    438a:	0b 2e       	mov	r0, r27
    438c:	ba 2f       	mov	r27, r26
    438e:	a0 2d       	mov	r26, r0
    4390:	0b 01       	movw	r0, r22
    4392:	b9 01       	movw	r22, r18
    4394:	90 01       	movw	r18, r0
    4396:	0c 01       	movw	r0, r24
    4398:	ca 01       	movw	r24, r20
    439a:	a0 01       	movw	r20, r0
    439c:	11 24       	eor	r1, r1
    439e:	ff 27       	eor	r31, r31
    43a0:	59 1b       	sub	r21, r25
    43a2:	99 f0       	breq	.+38     	; 0x43ca <__addsf3x+0x5c>
    43a4:	59 3f       	cpi	r21, 0xF9	; 249
    43a6:	50 f4       	brcc	.+20     	; 0x43bc <__addsf3x+0x4e>
    43a8:	50 3e       	cpi	r21, 0xE0	; 224
    43aa:	68 f1       	brcs	.+90     	; 0x4406 <__addsf3x+0x98>
    43ac:	1a 16       	cp	r1, r26
    43ae:	f0 40       	sbci	r31, 0x00	; 0
    43b0:	a2 2f       	mov	r26, r18
    43b2:	23 2f       	mov	r18, r19
    43b4:	34 2f       	mov	r19, r20
    43b6:	44 27       	eor	r20, r20
    43b8:	58 5f       	subi	r21, 0xF8	; 248
    43ba:	f3 cf       	rjmp	.-26     	; 0x43a2 <__addsf3x+0x34>
    43bc:	46 95       	lsr	r20
    43be:	37 95       	ror	r19
    43c0:	27 95       	ror	r18
    43c2:	a7 95       	ror	r26
    43c4:	f0 40       	sbci	r31, 0x00	; 0
    43c6:	53 95       	inc	r21
    43c8:	c9 f7       	brne	.-14     	; 0x43bc <__addsf3x+0x4e>
    43ca:	7e f4       	brtc	.+30     	; 0x43ea <__addsf3x+0x7c>
    43cc:	1f 16       	cp	r1, r31
    43ce:	ba 0b       	sbc	r27, r26
    43d0:	62 0b       	sbc	r22, r18
    43d2:	73 0b       	sbc	r23, r19
    43d4:	84 0b       	sbc	r24, r20
    43d6:	ba f0       	brmi	.+46     	; 0x4406 <__addsf3x+0x98>
    43d8:	91 50       	subi	r25, 0x01	; 1
    43da:	a1 f0       	breq	.+40     	; 0x4404 <__addsf3x+0x96>
    43dc:	ff 0f       	add	r31, r31
    43de:	bb 1f       	adc	r27, r27
    43e0:	66 1f       	adc	r22, r22
    43e2:	77 1f       	adc	r23, r23
    43e4:	88 1f       	adc	r24, r24
    43e6:	c2 f7       	brpl	.-16     	; 0x43d8 <__addsf3x+0x6a>
    43e8:	0e c0       	rjmp	.+28     	; 0x4406 <__addsf3x+0x98>
    43ea:	ba 0f       	add	r27, r26
    43ec:	62 1f       	adc	r22, r18
    43ee:	73 1f       	adc	r23, r19
    43f0:	84 1f       	adc	r24, r20
    43f2:	48 f4       	brcc	.+18     	; 0x4406 <__addsf3x+0x98>
    43f4:	87 95       	ror	r24
    43f6:	77 95       	ror	r23
    43f8:	67 95       	ror	r22
    43fa:	b7 95       	ror	r27
    43fc:	f7 95       	ror	r31
    43fe:	9e 3f       	cpi	r25, 0xFE	; 254
    4400:	08 f0       	brcs	.+2      	; 0x4404 <__addsf3x+0x96>
    4402:	b3 cf       	rjmp	.-154    	; 0x436a <acos+0x32>
    4404:	93 95       	inc	r25
    4406:	88 0f       	add	r24, r24
    4408:	08 f0       	brcs	.+2      	; 0x440c <__addsf3x+0x9e>
    440a:	99 27       	eor	r25, r25
    440c:	ee 0f       	add	r30, r30
    440e:	97 95       	ror	r25
    4410:	87 95       	ror	r24
    4412:	08 95       	ret

00004414 <cos>:
    4414:	5a d0       	rcall	.+180    	; 0x44ca <__fp_rempio2>
    4416:	e3 95       	inc	r30
    4418:	90 c0       	rjmp	.+288    	; 0x453a <__fp_sinus>

0000441a <__fp_arccos>:
    441a:	df 93       	push	r29
    441c:	cf 93       	push	r28
    441e:	1f 93       	push	r17
    4420:	0f 93       	push	r16
    4422:	8b 01       	movw	r16, r22
    4424:	ec 01       	movw	r28, r24
    4426:	e8 e6       	ldi	r30, 0x68	; 104
    4428:	f0 e0       	ldi	r31, 0x00	; 0
    442a:	1b d0       	rcall	.+54     	; 0x4462 <__fp_powser>
    442c:	75 d0       	rcall	.+234    	; 0x4518 <__fp_round>
    442e:	98 01       	movw	r18, r16
    4430:	ae 01       	movw	r20, r28
    4432:	8b 01       	movw	r16, r22
    4434:	ec 01       	movw	r28, r24
    4436:	60 e0       	ldi	r22, 0x00	; 0
    4438:	70 e0       	ldi	r23, 0x00	; 0
    443a:	80 e8       	ldi	r24, 0x80	; 128
    443c:	9f e3       	ldi	r25, 0x3F	; 63
    443e:	26 d9       	rcall	.-3508   	; 0x368c <__subsf3>
    4440:	1b d1       	rcall	.+566    	; 0x4678 <sqrt>
    4442:	98 01       	movw	r18, r16
    4444:	ae 01       	movw	r20, r28
    4446:	0f 91       	pop	r16
    4448:	1f 91       	pop	r17
    444a:	cf 91       	pop	r28
    444c:	df 91       	pop	r29
    444e:	b9 c0       	rjmp	.+370    	; 0x45c2 <__mulsf3x>

00004450 <__fp_inf>:
    4450:	97 f9       	bld	r25, 7
    4452:	9f 67       	ori	r25, 0x7F	; 127
    4454:	80 e8       	ldi	r24, 0x80	; 128
    4456:	70 e0       	ldi	r23, 0x00	; 0
    4458:	60 e0       	ldi	r22, 0x00	; 0
    445a:	08 95       	ret

0000445c <__fp_nan>:
    445c:	9f ef       	ldi	r25, 0xFF	; 255
    445e:	80 ec       	ldi	r24, 0xC0	; 192
    4460:	08 95       	ret

00004462 <__fp_powser>:
    4462:	df 93       	push	r29
    4464:	cf 93       	push	r28
    4466:	1f 93       	push	r17
    4468:	0f 93       	push	r16
    446a:	ff 92       	push	r15
    446c:	ef 92       	push	r14
    446e:	df 92       	push	r13
    4470:	7b 01       	movw	r14, r22
    4472:	8c 01       	movw	r16, r24
    4474:	68 94       	set
    4476:	05 c0       	rjmp	.+10     	; 0x4482 <__fp_powser+0x20>
    4478:	da 2e       	mov	r13, r26
    447a:	ef 01       	movw	r28, r30
    447c:	a2 d0       	rcall	.+324    	; 0x45c2 <__mulsf3x>
    447e:	fe 01       	movw	r30, r28
    4480:	e8 94       	clt
    4482:	a5 91       	lpm	r26, Z+
    4484:	25 91       	lpm	r18, Z+
    4486:	35 91       	lpm	r19, Z+
    4488:	45 91       	lpm	r20, Z+
    448a:	55 91       	lpm	r21, Z+
    448c:	ae f3       	brts	.-22     	; 0x4478 <__fp_powser+0x16>
    448e:	ef 01       	movw	r28, r30
    4490:	6e df       	rcall	.-292    	; 0x436e <__addsf3x>
    4492:	fe 01       	movw	r30, r28
    4494:	97 01       	movw	r18, r14
    4496:	a8 01       	movw	r20, r16
    4498:	da 94       	dec	r13
    449a:	79 f7       	brne	.-34     	; 0x447a <__fp_powser+0x18>
    449c:	df 90       	pop	r13
    449e:	ef 90       	pop	r14
    44a0:	ff 90       	pop	r15
    44a2:	0f 91       	pop	r16
    44a4:	1f 91       	pop	r17
    44a6:	cf 91       	pop	r28
    44a8:	df 91       	pop	r29
    44aa:	08 95       	ret

000044ac <__fp_pscA>:
    44ac:	00 24       	eor	r0, r0
    44ae:	0a 94       	dec	r0
    44b0:	16 16       	cp	r1, r22
    44b2:	17 06       	cpc	r1, r23
    44b4:	18 06       	cpc	r1, r24
    44b6:	09 06       	cpc	r0, r25
    44b8:	08 95       	ret

000044ba <__fp_pscB>:
    44ba:	00 24       	eor	r0, r0
    44bc:	0a 94       	dec	r0
    44be:	12 16       	cp	r1, r18
    44c0:	13 06       	cpc	r1, r19
    44c2:	14 06       	cpc	r1, r20
    44c4:	05 06       	cpc	r0, r21
    44c6:	08 95       	ret
    44c8:	c9 cf       	rjmp	.-110    	; 0x445c <__fp_nan>

000044ca <__fp_rempio2>:
    44ca:	50 d0       	rcall	.+160    	; 0x456c <__fp_splitA>
    44cc:	e8 f3       	brcs	.-6      	; 0x44c8 <__fp_pscB+0xe>
    44ce:	e8 94       	clt
    44d0:	e0 e0       	ldi	r30, 0x00	; 0
    44d2:	bb 27       	eor	r27, r27
    44d4:	9f 57       	subi	r25, 0x7F	; 127
    44d6:	f0 f0       	brcs	.+60     	; 0x4514 <__fp_rempio2+0x4a>
    44d8:	2a ed       	ldi	r18, 0xDA	; 218
    44da:	3f e0       	ldi	r19, 0x0F	; 15
    44dc:	49 ec       	ldi	r20, 0xC9	; 201
    44de:	06 c0       	rjmp	.+12     	; 0x44ec <__fp_rempio2+0x22>
    44e0:	ee 0f       	add	r30, r30
    44e2:	bb 0f       	add	r27, r27
    44e4:	66 1f       	adc	r22, r22
    44e6:	77 1f       	adc	r23, r23
    44e8:	88 1f       	adc	r24, r24
    44ea:	28 f0       	brcs	.+10     	; 0x44f6 <__fp_rempio2+0x2c>
    44ec:	b2 3a       	cpi	r27, 0xA2	; 162
    44ee:	62 07       	cpc	r22, r18
    44f0:	73 07       	cpc	r23, r19
    44f2:	84 07       	cpc	r24, r20
    44f4:	28 f0       	brcs	.+10     	; 0x4500 <__fp_rempio2+0x36>
    44f6:	b2 5a       	subi	r27, 0xA2	; 162
    44f8:	62 0b       	sbc	r22, r18
    44fa:	73 0b       	sbc	r23, r19
    44fc:	84 0b       	sbc	r24, r20
    44fe:	e3 95       	inc	r30
    4500:	9a 95       	dec	r25
    4502:	72 f7       	brpl	.-36     	; 0x44e0 <__fp_rempio2+0x16>
    4504:	80 38       	cpi	r24, 0x80	; 128
    4506:	30 f4       	brcc	.+12     	; 0x4514 <__fp_rempio2+0x4a>
    4508:	9a 95       	dec	r25
    450a:	bb 0f       	add	r27, r27
    450c:	66 1f       	adc	r22, r22
    450e:	77 1f       	adc	r23, r23
    4510:	88 1f       	adc	r24, r24
    4512:	d2 f7       	brpl	.-12     	; 0x4508 <__fp_rempio2+0x3e>
    4514:	90 48       	sbci	r25, 0x80	; 128
    4516:	f0 c0       	rjmp	.+480    	; 0x46f8 <__fp_mpack_finite>

00004518 <__fp_round>:
    4518:	09 2e       	mov	r0, r25
    451a:	03 94       	inc	r0
    451c:	00 0c       	add	r0, r0
    451e:	11 f4       	brne	.+4      	; 0x4524 <__fp_round+0xc>
    4520:	88 23       	and	r24, r24
    4522:	52 f0       	brmi	.+20     	; 0x4538 <__fp_round+0x20>
    4524:	bb 0f       	add	r27, r27
    4526:	40 f4       	brcc	.+16     	; 0x4538 <__fp_round+0x20>
    4528:	bf 2b       	or	r27, r31
    452a:	11 f4       	brne	.+4      	; 0x4530 <__fp_round+0x18>
    452c:	60 ff       	sbrs	r22, 0
    452e:	04 c0       	rjmp	.+8      	; 0x4538 <__fp_round+0x20>
    4530:	6f 5f       	subi	r22, 0xFF	; 255
    4532:	7f 4f       	sbci	r23, 0xFF	; 255
    4534:	8f 4f       	sbci	r24, 0xFF	; 255
    4536:	9f 4f       	sbci	r25, 0xFF	; 255
    4538:	08 95       	ret

0000453a <__fp_sinus>:
    453a:	ef 93       	push	r30
    453c:	e0 ff       	sbrs	r30, 0
    453e:	06 c0       	rjmp	.+12     	; 0x454c <__fp_sinus+0x12>
    4540:	a2 ea       	ldi	r26, 0xA2	; 162
    4542:	2a ed       	ldi	r18, 0xDA	; 218
    4544:	3f e0       	ldi	r19, 0x0F	; 15
    4546:	49 ec       	ldi	r20, 0xC9	; 201
    4548:	5f eb       	ldi	r21, 0xBF	; 191
    454a:	11 df       	rcall	.-478    	; 0x436e <__addsf3x>
    454c:	e5 df       	rcall	.-54     	; 0x4518 <__fp_round>
    454e:	0f 90       	pop	r0
    4550:	03 94       	inc	r0
    4552:	01 fc       	sbrc	r0, 1
    4554:	90 58       	subi	r25, 0x80	; 128
    4556:	e0 e9       	ldi	r30, 0x90	; 144
    4558:	f0 e0       	ldi	r31, 0x00	; 0
    455a:	e1 c0       	rjmp	.+450    	; 0x471e <__fp_powsodd>

0000455c <__fp_split3>:
    455c:	57 fd       	sbrc	r21, 7
    455e:	90 58       	subi	r25, 0x80	; 128
    4560:	44 0f       	add	r20, r20
    4562:	55 1f       	adc	r21, r21
    4564:	59 f0       	breq	.+22     	; 0x457c <__fp_splitA+0x10>
    4566:	5f 3f       	cpi	r21, 0xFF	; 255
    4568:	71 f0       	breq	.+28     	; 0x4586 <__fp_splitA+0x1a>
    456a:	47 95       	ror	r20

0000456c <__fp_splitA>:
    456c:	88 0f       	add	r24, r24
    456e:	97 fb       	bst	r25, 7
    4570:	99 1f       	adc	r25, r25
    4572:	61 f0       	breq	.+24     	; 0x458c <__fp_splitA+0x20>
    4574:	9f 3f       	cpi	r25, 0xFF	; 255
    4576:	79 f0       	breq	.+30     	; 0x4596 <__fp_splitA+0x2a>
    4578:	87 95       	ror	r24
    457a:	08 95       	ret
    457c:	12 16       	cp	r1, r18
    457e:	13 06       	cpc	r1, r19
    4580:	14 06       	cpc	r1, r20
    4582:	55 1f       	adc	r21, r21
    4584:	f2 cf       	rjmp	.-28     	; 0x456a <__fp_split3+0xe>
    4586:	46 95       	lsr	r20
    4588:	f1 df       	rcall	.-30     	; 0x456c <__fp_splitA>
    458a:	08 c0       	rjmp	.+16     	; 0x459c <__fp_splitA+0x30>
    458c:	16 16       	cp	r1, r22
    458e:	17 06       	cpc	r1, r23
    4590:	18 06       	cpc	r1, r24
    4592:	99 1f       	adc	r25, r25
    4594:	f1 cf       	rjmp	.-30     	; 0x4578 <__fp_splitA+0xc>
    4596:	86 95       	lsr	r24
    4598:	71 05       	cpc	r23, r1
    459a:	61 05       	cpc	r22, r1
    459c:	08 94       	sec
    459e:	08 95       	ret

000045a0 <__fp_zero>:
    45a0:	e8 94       	clt

000045a2 <__fp_szero>:
    45a2:	bb 27       	eor	r27, r27
    45a4:	66 27       	eor	r22, r22
    45a6:	77 27       	eor	r23, r23
    45a8:	cb 01       	movw	r24, r22
    45aa:	97 f9       	bld	r25, 7
    45ac:	08 95       	ret
    45ae:	7e df       	rcall	.-260    	; 0x44ac <__fp_pscA>
    45b0:	28 f0       	brcs	.+10     	; 0x45bc <__fp_szero+0x1a>
    45b2:	83 df       	rcall	.-250    	; 0x44ba <__fp_pscB>
    45b4:	18 f0       	brcs	.+6      	; 0x45bc <__fp_szero+0x1a>
    45b6:	95 23       	and	r25, r21
    45b8:	09 f0       	breq	.+2      	; 0x45bc <__fp_szero+0x1a>
    45ba:	4a cf       	rjmp	.-364    	; 0x4450 <__fp_inf>
    45bc:	4f cf       	rjmp	.-354    	; 0x445c <__fp_nan>
    45be:	11 24       	eor	r1, r1
    45c0:	f0 cf       	rjmp	.-32     	; 0x45a2 <__fp_szero>

000045c2 <__mulsf3x>:
    45c2:	cc df       	rcall	.-104    	; 0x455c <__fp_split3>
    45c4:	a0 f3       	brcs	.-24     	; 0x45ae <__fp_szero+0xc>

000045c6 <__mulsf3_pse>:
    45c6:	95 9f       	mul	r25, r21
    45c8:	d1 f3       	breq	.-12     	; 0x45be <__fp_szero+0x1c>
    45ca:	95 0f       	add	r25, r21
    45cc:	50 e0       	ldi	r21, 0x00	; 0
    45ce:	55 1f       	adc	r21, r21
    45d0:	62 9f       	mul	r22, r18
    45d2:	f0 01       	movw	r30, r0
    45d4:	72 9f       	mul	r23, r18
    45d6:	bb 27       	eor	r27, r27
    45d8:	f0 0d       	add	r31, r0
    45da:	b1 1d       	adc	r27, r1
    45dc:	63 9f       	mul	r22, r19
    45de:	aa 27       	eor	r26, r26
    45e0:	f0 0d       	add	r31, r0
    45e2:	b1 1d       	adc	r27, r1
    45e4:	aa 1f       	adc	r26, r26
    45e6:	64 9f       	mul	r22, r20
    45e8:	66 27       	eor	r22, r22
    45ea:	b0 0d       	add	r27, r0
    45ec:	a1 1d       	adc	r26, r1
    45ee:	66 1f       	adc	r22, r22
    45f0:	82 9f       	mul	r24, r18
    45f2:	22 27       	eor	r18, r18
    45f4:	b0 0d       	add	r27, r0
    45f6:	a1 1d       	adc	r26, r1
    45f8:	62 1f       	adc	r22, r18
    45fa:	73 9f       	mul	r23, r19
    45fc:	b0 0d       	add	r27, r0
    45fe:	a1 1d       	adc	r26, r1
    4600:	62 1f       	adc	r22, r18
    4602:	83 9f       	mul	r24, r19
    4604:	a0 0d       	add	r26, r0
    4606:	61 1d       	adc	r22, r1
    4608:	22 1f       	adc	r18, r18
    460a:	74 9f       	mul	r23, r20
    460c:	33 27       	eor	r19, r19
    460e:	a0 0d       	add	r26, r0
    4610:	61 1d       	adc	r22, r1
    4612:	23 1f       	adc	r18, r19
    4614:	84 9f       	mul	r24, r20
    4616:	60 0d       	add	r22, r0
    4618:	21 1d       	adc	r18, r1
    461a:	82 2f       	mov	r24, r18
    461c:	76 2f       	mov	r23, r22
    461e:	6a 2f       	mov	r22, r26
    4620:	11 24       	eor	r1, r1
    4622:	9f 57       	subi	r25, 0x7F	; 127
    4624:	50 40       	sbci	r21, 0x00	; 0
    4626:	8a f0       	brmi	.+34     	; 0x464a <__mulsf3_pse+0x84>
    4628:	e1 f0       	breq	.+56     	; 0x4662 <__mulsf3_pse+0x9c>
    462a:	88 23       	and	r24, r24
    462c:	4a f0       	brmi	.+18     	; 0x4640 <__mulsf3_pse+0x7a>
    462e:	ee 0f       	add	r30, r30
    4630:	ff 1f       	adc	r31, r31
    4632:	bb 1f       	adc	r27, r27
    4634:	66 1f       	adc	r22, r22
    4636:	77 1f       	adc	r23, r23
    4638:	88 1f       	adc	r24, r24
    463a:	91 50       	subi	r25, 0x01	; 1
    463c:	50 40       	sbci	r21, 0x00	; 0
    463e:	a9 f7       	brne	.-22     	; 0x462a <__mulsf3_pse+0x64>
    4640:	9e 3f       	cpi	r25, 0xFE	; 254
    4642:	51 05       	cpc	r21, r1
    4644:	70 f0       	brcs	.+28     	; 0x4662 <__mulsf3_pse+0x9c>
    4646:	04 cf       	rjmp	.-504    	; 0x4450 <__fp_inf>
    4648:	ac cf       	rjmp	.-168    	; 0x45a2 <__fp_szero>
    464a:	5f 3f       	cpi	r21, 0xFF	; 255
    464c:	ec f3       	brlt	.-6      	; 0x4648 <__mulsf3_pse+0x82>
    464e:	98 3e       	cpi	r25, 0xE8	; 232
    4650:	dc f3       	brlt	.-10     	; 0x4648 <__mulsf3_pse+0x82>
    4652:	86 95       	lsr	r24
    4654:	77 95       	ror	r23
    4656:	67 95       	ror	r22
    4658:	b7 95       	ror	r27
    465a:	f7 95       	ror	r31
    465c:	e7 95       	ror	r30
    465e:	9f 5f       	subi	r25, 0xFF	; 255
    4660:	c1 f7       	brne	.-16     	; 0x4652 <__mulsf3_pse+0x8c>
    4662:	fe 2b       	or	r31, r30
    4664:	88 0f       	add	r24, r24
    4666:	91 1d       	adc	r25, r1
    4668:	96 95       	lsr	r25
    466a:	87 95       	ror	r24
    466c:	97 f9       	bld	r25, 7
    466e:	08 95       	ret
    4670:	11 f4       	brne	.+4      	; 0x4676 <__mulsf3_pse+0xb0>
    4672:	0e f4       	brtc	.+2      	; 0x4676 <__mulsf3_pse+0xb0>
    4674:	f3 ce       	rjmp	.-538    	; 0x445c <__fp_nan>
    4676:	3e c0       	rjmp	.+124    	; 0x46f4 <__fp_mpack>

00004678 <sqrt>:
    4678:	79 df       	rcall	.-270    	; 0x456c <__fp_splitA>
    467a:	d0 f3       	brcs	.-12     	; 0x4670 <__mulsf3_pse+0xaa>
    467c:	99 23       	and	r25, r25
    467e:	d9 f3       	breq	.-10     	; 0x4676 <__mulsf3_pse+0xb0>
    4680:	ce f3       	brts	.-14     	; 0x4674 <__mulsf3_pse+0xae>
    4682:	9f 57       	subi	r25, 0x7F	; 127
    4684:	55 0b       	sbc	r21, r21
    4686:	87 ff       	sbrs	r24, 7
    4688:	43 d0       	rcall	.+134    	; 0x4710 <__fp_norm2>
    468a:	00 24       	eor	r0, r0
    468c:	a0 e6       	ldi	r26, 0x60	; 96
    468e:	40 ea       	ldi	r20, 0xA0	; 160
    4690:	90 01       	movw	r18, r0
    4692:	80 58       	subi	r24, 0x80	; 128
    4694:	56 95       	lsr	r21
    4696:	97 95       	ror	r25
    4698:	28 f4       	brcc	.+10     	; 0x46a4 <sqrt+0x2c>
    469a:	80 5c       	subi	r24, 0xC0	; 192
    469c:	66 0f       	add	r22, r22
    469e:	77 1f       	adc	r23, r23
    46a0:	88 1f       	adc	r24, r24
    46a2:	20 f0       	brcs	.+8      	; 0x46ac <sqrt+0x34>
    46a4:	26 17       	cp	r18, r22
    46a6:	37 07       	cpc	r19, r23
    46a8:	48 07       	cpc	r20, r24
    46aa:	30 f4       	brcc	.+12     	; 0x46b8 <sqrt+0x40>
    46ac:	62 1b       	sub	r22, r18
    46ae:	73 0b       	sbc	r23, r19
    46b0:	84 0b       	sbc	r24, r20
    46b2:	20 29       	or	r18, r0
    46b4:	31 29       	or	r19, r1
    46b6:	4a 2b       	or	r20, r26
    46b8:	a6 95       	lsr	r26
    46ba:	17 94       	ror	r1
    46bc:	07 94       	ror	r0
    46be:	20 25       	eor	r18, r0
    46c0:	31 25       	eor	r19, r1
    46c2:	4a 27       	eor	r20, r26
    46c4:	58 f7       	brcc	.-42     	; 0x469c <sqrt+0x24>
    46c6:	66 0f       	add	r22, r22
    46c8:	77 1f       	adc	r23, r23
    46ca:	88 1f       	adc	r24, r24
    46cc:	20 f0       	brcs	.+8      	; 0x46d6 <sqrt+0x5e>
    46ce:	26 17       	cp	r18, r22
    46d0:	37 07       	cpc	r19, r23
    46d2:	48 07       	cpc	r20, r24
    46d4:	30 f4       	brcc	.+12     	; 0x46e2 <sqrt+0x6a>
    46d6:	62 0b       	sbc	r22, r18
    46d8:	73 0b       	sbc	r23, r19
    46da:	84 0b       	sbc	r24, r20
    46dc:	20 0d       	add	r18, r0
    46de:	31 1d       	adc	r19, r1
    46e0:	41 1d       	adc	r20, r1
    46e2:	a0 95       	com	r26
    46e4:	81 f7       	brne	.-32     	; 0x46c6 <sqrt+0x4e>
    46e6:	b9 01       	movw	r22, r18
    46e8:	84 2f       	mov	r24, r20
    46ea:	91 58       	subi	r25, 0x81	; 129
    46ec:	88 0f       	add	r24, r24
    46ee:	96 95       	lsr	r25
    46f0:	87 95       	ror	r24
    46f2:	08 95       	ret

000046f4 <__fp_mpack>:
    46f4:	9f 3f       	cpi	r25, 0xFF	; 255
    46f6:	31 f0       	breq	.+12     	; 0x4704 <__fp_mpack_finite+0xc>

000046f8 <__fp_mpack_finite>:
    46f8:	91 50       	subi	r25, 0x01	; 1
    46fa:	20 f4       	brcc	.+8      	; 0x4704 <__fp_mpack_finite+0xc>
    46fc:	87 95       	ror	r24
    46fe:	77 95       	ror	r23
    4700:	67 95       	ror	r22
    4702:	b7 95       	ror	r27
    4704:	88 0f       	add	r24, r24
    4706:	91 1d       	adc	r25, r1
    4708:	96 95       	lsr	r25
    470a:	87 95       	ror	r24
    470c:	97 f9       	bld	r25, 7
    470e:	08 95       	ret

00004710 <__fp_norm2>:
    4710:	91 50       	subi	r25, 0x01	; 1
    4712:	50 40       	sbci	r21, 0x00	; 0
    4714:	66 0f       	add	r22, r22
    4716:	77 1f       	adc	r23, r23
    4718:	88 1f       	adc	r24, r24
    471a:	d2 f7       	brpl	.-12     	; 0x4710 <__fp_norm2>
    471c:	08 95       	ret

0000471e <__fp_powsodd>:
    471e:	9f 93       	push	r25
    4720:	8f 93       	push	r24
    4722:	7f 93       	push	r23
    4724:	6f 93       	push	r22
    4726:	ff 93       	push	r31
    4728:	ef 93       	push	r30
    472a:	9b 01       	movw	r18, r22
    472c:	ac 01       	movw	r20, r24
    472e:	0c d8       	rcall	.-4072   	; 0x3748 <__mulsf3>
    4730:	ef 91       	pop	r30
    4732:	ff 91       	pop	r31
    4734:	96 de       	rcall	.-724    	; 0x4462 <__fp_powser>
    4736:	2f 91       	pop	r18
    4738:	3f 91       	pop	r19
    473a:	4f 91       	pop	r20
    473c:	5f 91       	pop	r21
    473e:	04 c8       	rjmp	.-4088   	; 0x3748 <__mulsf3>

00004740 <calloc>:
    4740:	ef 92       	push	r14
    4742:	ff 92       	push	r15
    4744:	0f 93       	push	r16
    4746:	1f 93       	push	r17
    4748:	cf 93       	push	r28
    474a:	df 93       	push	r29
    474c:	68 9f       	mul	r22, r24
    474e:	80 01       	movw	r16, r0
    4750:	69 9f       	mul	r22, r25
    4752:	10 0d       	add	r17, r0
    4754:	78 9f       	mul	r23, r24
    4756:	10 0d       	add	r17, r0
    4758:	11 24       	eor	r1, r1
    475a:	c8 01       	movw	r24, r16
    475c:	0e 94 c5 23 	call	0x478a	; 0x478a <malloc>
    4760:	e8 2e       	mov	r14, r24
    4762:	e7 01       	movw	r28, r14
    4764:	7e 01       	movw	r14, r28
    4766:	f9 2e       	mov	r15, r25
    4768:	e7 01       	movw	r28, r14
    476a:	e1 14       	cp	r14, r1
    476c:	f1 04       	cpc	r15, r1
    476e:	31 f0       	breq	.+12     	; 0x477c <calloc+0x3c>
    4770:	8e 2d       	mov	r24, r14
    4772:	60 e0       	ldi	r22, 0x00	; 0
    4774:	70 e0       	ldi	r23, 0x00	; 0
    4776:	a8 01       	movw	r20, r16
    4778:	0e 94 fe 24 	call	0x49fc	; 0x49fc <memset>
    477c:	7e 01       	movw	r14, r28
    477e:	ce 01       	movw	r24, r28
    4780:	cd b7       	in	r28, 0x3d	; 61
    4782:	de b7       	in	r29, 0x3e	; 62
    4784:	e6 e0       	ldi	r30, 0x06	; 6
    4786:	0c 94 87 21 	jmp	0x430e	; 0x430e <__epilogue_restores__+0x18>

0000478a <malloc>:
    478a:	ef 92       	push	r14
    478c:	ff 92       	push	r15
    478e:	0f 93       	push	r16
    4790:	1f 93       	push	r17
    4792:	cf 93       	push	r28
    4794:	df 93       	push	r29
    4796:	82 30       	cpi	r24, 0x02	; 2
    4798:	91 05       	cpc	r25, r1
    479a:	10 f4       	brcc	.+4      	; 0x47a0 <malloc+0x16>
    479c:	82 e0       	ldi	r24, 0x02	; 2
    479e:	90 e0       	ldi	r25, 0x00	; 0
    47a0:	c0 91 90 05 	lds	r28, 0x0590
    47a4:	d0 91 91 05 	lds	r29, 0x0591
    47a8:	20 e0       	ldi	r18, 0x00	; 0
    47aa:	30 e0       	ldi	r19, 0x00	; 0
    47ac:	40 e0       	ldi	r20, 0x00	; 0
    47ae:	50 e0       	ldi	r21, 0x00	; 0
    47b0:	29 c0       	rjmp	.+82     	; 0x4804 <malloc+0x7a>
    47b2:	68 81       	ld	r22, Y
    47b4:	79 81       	ldd	r23, Y+1	; 0x01
    47b6:	68 17       	cp	r22, r24
    47b8:	79 07       	cpc	r23, r25
    47ba:	d8 f0       	brcs	.+54     	; 0x47f2 <malloc+0x68>
    47bc:	68 17       	cp	r22, r24
    47be:	79 07       	cpc	r23, r25
    47c0:	79 f4       	brne	.+30     	; 0x47e0 <malloc+0x56>
    47c2:	8a 81       	ldd	r24, Y+2	; 0x02
    47c4:	9b 81       	ldd	r25, Y+3	; 0x03
    47c6:	21 15       	cp	r18, r1
    47c8:	31 05       	cpc	r19, r1
    47ca:	21 f0       	breq	.+8      	; 0x47d4 <malloc+0x4a>
    47cc:	f9 01       	movw	r30, r18
    47ce:	93 83       	std	Z+3, r25	; 0x03
    47d0:	82 83       	std	Z+2, r24	; 0x02
    47d2:	04 c0       	rjmp	.+8      	; 0x47dc <malloc+0x52>
    47d4:	90 93 91 05 	sts	0x0591, r25
    47d8:	80 93 90 05 	sts	0x0590, r24
    47dc:	de 01       	movw	r26, r28
    47de:	2a c0       	rjmp	.+84     	; 0x4834 <malloc+0xaa>
    47e0:	41 15       	cp	r20, r1
    47e2:	51 05       	cpc	r21, r1
    47e4:	19 f0       	breq	.+6      	; 0x47ec <malloc+0x62>
    47e6:	64 17       	cp	r22, r20
    47e8:	75 07       	cpc	r23, r21
    47ea:	18 f4       	brcc	.+6      	; 0x47f2 <malloc+0x68>
    47ec:	fe 01       	movw	r30, r28
    47ee:	ab 01       	movw	r20, r22
    47f0:	d9 01       	movw	r26, r18
    47f2:	9e 01       	movw	r18, r28
    47f4:	7a 81       	ldd	r23, Y+2	; 0x02
    47f6:	6b 81       	ldd	r22, Y+3	; 0x03
    47f8:	e7 2e       	mov	r14, r23
    47fa:	e7 01       	movw	r28, r14
    47fc:	7e 01       	movw	r14, r28
    47fe:	06 2f       	mov	r16, r22
    4800:	f6 2e       	mov	r15, r22
    4802:	e7 01       	movw	r28, r14
    4804:	20 97       	sbiw	r28, 0x00	; 0
    4806:	a9 f6       	brne	.-86     	; 0x47b2 <malloc+0x28>
    4808:	41 15       	cp	r20, r1
    480a:	51 05       	cpc	r21, r1
    480c:	f9 f0       	breq	.+62     	; 0x484c <malloc+0xc2>
    480e:	48 1b       	sub	r20, r24
    4810:	59 0b       	sbc	r21, r25
    4812:	44 30       	cpi	r20, 0x04	; 4
    4814:	51 05       	cpc	r21, r1
    4816:	80 f4       	brcc	.+32     	; 0x4838 <malloc+0xae>
    4818:	82 81       	ldd	r24, Z+2	; 0x02
    481a:	93 81       	ldd	r25, Z+3	; 0x03
    481c:	10 97       	sbiw	r26, 0x00	; 0
    481e:	29 f0       	breq	.+10     	; 0x482a <malloc+0xa0>
    4820:	13 96       	adiw	r26, 0x03	; 3
    4822:	9c 93       	st	X, r25
    4824:	8e 93       	st	-X, r24
    4826:	12 97       	sbiw	r26, 0x02	; 2
    4828:	04 c0       	rjmp	.+8      	; 0x4832 <malloc+0xa8>
    482a:	90 93 91 05 	sts	0x0591, r25
    482e:	80 93 90 05 	sts	0x0590, r24
    4832:	df 01       	movw	r26, r30
    4834:	12 96       	adiw	r26, 0x02	; 2
    4836:	45 c0       	rjmp	.+138    	; 0x48c2 <malloc+0x138>
    4838:	df 01       	movw	r26, r30
    483a:	a4 0f       	add	r26, r20
    483c:	b5 1f       	adc	r27, r21
    483e:	8d 93       	st	X+, r24
    4840:	9d 93       	st	X+, r25
    4842:	42 50       	subi	r20, 0x02	; 2
    4844:	50 40       	sbci	r21, 0x00	; 0
    4846:	51 83       	std	Z+1, r21	; 0x01
    4848:	40 83       	st	Z, r20
    484a:	3b c0       	rjmp	.+118    	; 0x48c2 <malloc+0x138>
    484c:	20 91 8e 05 	lds	r18, 0x058E
    4850:	30 91 8f 05 	lds	r19, 0x058F
    4854:	21 15       	cp	r18, r1
    4856:	31 05       	cpc	r19, r1
    4858:	41 f4       	brne	.+16     	; 0x486a <malloc+0xe0>
    485a:	20 91 40 02 	lds	r18, 0x0240
    485e:	30 91 41 02 	lds	r19, 0x0241
    4862:	30 93 8f 05 	sts	0x058F, r19
    4866:	20 93 8e 05 	sts	0x058E, r18
    486a:	20 91 42 02 	lds	r18, 0x0242
    486e:	30 91 43 02 	lds	r19, 0x0243
    4872:	21 15       	cp	r18, r1
    4874:	31 05       	cpc	r19, r1
    4876:	41 f4       	brne	.+16     	; 0x4888 <malloc+0xfe>
    4878:	2d b7       	in	r18, 0x3d	; 61
    487a:	3e b7       	in	r19, 0x3e	; 62
    487c:	40 91 3e 02 	lds	r20, 0x023E
    4880:	50 91 3f 02 	lds	r21, 0x023F
    4884:	24 1b       	sub	r18, r20
    4886:	35 0b       	sbc	r19, r21
    4888:	a0 91 8e 05 	lds	r26, 0x058E
    488c:	b0 91 8f 05 	lds	r27, 0x058F
    4890:	a2 17       	cp	r26, r18
    4892:	b3 07       	cpc	r27, r19
    4894:	a0 f4       	brcc	.+40     	; 0x48be <malloc+0x134>
    4896:	2a 1b       	sub	r18, r26
    4898:	3b 0b       	sbc	r19, r27
    489a:	28 17       	cp	r18, r24
    489c:	39 07       	cpc	r19, r25
    489e:	78 f0       	brcs	.+30     	; 0x48be <malloc+0x134>
    48a0:	ac 01       	movw	r20, r24
    48a2:	4e 5f       	subi	r20, 0xFE	; 254
    48a4:	5f 4f       	sbci	r21, 0xFF	; 255
    48a6:	24 17       	cp	r18, r20
    48a8:	35 07       	cpc	r19, r21
    48aa:	48 f0       	brcs	.+18     	; 0x48be <malloc+0x134>
    48ac:	4a 0f       	add	r20, r26
    48ae:	5b 1f       	adc	r21, r27
    48b0:	50 93 8f 05 	sts	0x058F, r21
    48b4:	40 93 8e 05 	sts	0x058E, r20
    48b8:	8d 93       	st	X+, r24
    48ba:	9d 93       	st	X+, r25
    48bc:	02 c0       	rjmp	.+4      	; 0x48c2 <malloc+0x138>
    48be:	a0 e0       	ldi	r26, 0x00	; 0
    48c0:	b0 e0       	ldi	r27, 0x00	; 0
    48c2:	cd 01       	movw	r24, r26
    48c4:	cd b7       	in	r28, 0x3d	; 61
    48c6:	de b7       	in	r29, 0x3e	; 62
    48c8:	e6 e0       	ldi	r30, 0x06	; 6
    48ca:	0c 94 87 21 	jmp	0x430e	; 0x430e <__epilogue_restores__+0x18>

000048ce <free>:
    48ce:	cf 93       	push	r28
    48d0:	df 93       	push	r29
    48d2:	00 97       	sbiw	r24, 0x00	; 0
    48d4:	09 f4       	brne	.+2      	; 0x48d8 <free+0xa>
    48d6:	8f c0       	rjmp	.+286    	; 0x49f6 <free+0x128>
    48d8:	fc 01       	movw	r30, r24
    48da:	32 97       	sbiw	r30, 0x02	; 2
    48dc:	13 82       	std	Z+3, r1	; 0x03
    48de:	12 82       	std	Z+2, r1	; 0x02
    48e0:	60 91 90 05 	lds	r22, 0x0590
    48e4:	70 91 91 05 	lds	r23, 0x0591
    48e8:	61 15       	cp	r22, r1
    48ea:	71 05       	cpc	r23, r1
    48ec:	81 f4       	brne	.+32     	; 0x490e <free+0x40>
    48ee:	20 81       	ld	r18, Z
    48f0:	31 81       	ldd	r19, Z+1	; 0x01
    48f2:	28 0f       	add	r18, r24
    48f4:	39 1f       	adc	r19, r25
    48f6:	80 91 8e 05 	lds	r24, 0x058E
    48fa:	90 91 8f 05 	lds	r25, 0x058F
    48fe:	82 17       	cp	r24, r18
    4900:	93 07       	cpc	r25, r19
    4902:	61 f5       	brne	.+88     	; 0x495c <free+0x8e>
    4904:	f0 93 8f 05 	sts	0x058F, r31
    4908:	e0 93 8e 05 	sts	0x058E, r30
    490c:	74 c0       	rjmp	.+232    	; 0x49f6 <free+0x128>
    490e:	eb 01       	movw	r28, r22
    4910:	80 e0       	ldi	r24, 0x00	; 0
    4912:	90 e0       	ldi	r25, 0x00	; 0
    4914:	ce 17       	cp	r28, r30
    4916:	df 07       	cpc	r29, r31
    4918:	40 f4       	brcc	.+16     	; 0x492a <free+0x5c>
    491a:	2a 81       	ldd	r18, Y+2	; 0x02
    491c:	3b 81       	ldd	r19, Y+3	; 0x03
    491e:	ce 01       	movw	r24, r28
    4920:	21 15       	cp	r18, r1
    4922:	31 05       	cpc	r19, r1
    4924:	01 f1       	breq	.+64     	; 0x4966 <free+0x98>
    4926:	e9 01       	movw	r28, r18
    4928:	f5 cf       	rjmp	.-22     	; 0x4914 <free+0x46>
    492a:	d3 83       	std	Z+3, r29	; 0x03
    492c:	c2 83       	std	Z+2, r28	; 0x02
    492e:	df 01       	movw	r26, r30
    4930:	4d 91       	ld	r20, X+
    4932:	5d 91       	ld	r21, X+
    4934:	9d 01       	movw	r18, r26
    4936:	24 0f       	add	r18, r20
    4938:	35 1f       	adc	r19, r21
    493a:	c2 17       	cp	r28, r18
    493c:	d3 07       	cpc	r29, r19
    493e:	61 f4       	brne	.+24     	; 0x4958 <free+0x8a>
    4940:	28 81       	ld	r18, Y
    4942:	39 81       	ldd	r19, Y+1	; 0x01
    4944:	24 0f       	add	r18, r20
    4946:	35 1f       	adc	r19, r21
    4948:	2e 5f       	subi	r18, 0xFE	; 254
    494a:	3f 4f       	sbci	r19, 0xFF	; 255
    494c:	31 83       	std	Z+1, r19	; 0x01
    494e:	20 83       	st	Z, r18
    4950:	2a 81       	ldd	r18, Y+2	; 0x02
    4952:	3b 81       	ldd	r19, Y+3	; 0x03
    4954:	33 83       	std	Z+3, r19	; 0x03
    4956:	22 83       	std	Z+2, r18	; 0x02
    4958:	00 97       	sbiw	r24, 0x00	; 0
    495a:	29 f4       	brne	.+10     	; 0x4966 <free+0x98>
    495c:	f0 93 91 05 	sts	0x0591, r31
    4960:	e0 93 90 05 	sts	0x0590, r30
    4964:	48 c0       	rjmp	.+144    	; 0x49f6 <free+0x128>
    4966:	dc 01       	movw	r26, r24
    4968:	13 96       	adiw	r26, 0x03	; 3
    496a:	fc 93       	st	X, r31
    496c:	ee 93       	st	-X, r30
    496e:	12 97       	sbiw	r26, 0x02	; 2
    4970:	ec 01       	movw	r28, r24
    4972:	49 91       	ld	r20, Y+
    4974:	59 91       	ld	r21, Y+
    4976:	c4 0f       	add	r28, r20
    4978:	d5 1f       	adc	r29, r21
    497a:	ec 17       	cp	r30, r28
    497c:	fd 07       	cpc	r31, r29
    497e:	79 f4       	brne	.+30     	; 0x499e <free+0xd0>
    4980:	20 81       	ld	r18, Z
    4982:	31 81       	ldd	r19, Z+1	; 0x01
    4984:	24 0f       	add	r18, r20
    4986:	35 1f       	adc	r19, r21
    4988:	2e 5f       	subi	r18, 0xFE	; 254
    498a:	3f 4f       	sbci	r19, 0xFF	; 255
    498c:	11 96       	adiw	r26, 0x01	; 1
    498e:	3c 93       	st	X, r19
    4990:	2e 93       	st	-X, r18
    4992:	22 81       	ldd	r18, Z+2	; 0x02
    4994:	33 81       	ldd	r19, Z+3	; 0x03
    4996:	13 96       	adiw	r26, 0x03	; 3
    4998:	3c 93       	st	X, r19
    499a:	2e 93       	st	-X, r18
    499c:	12 97       	sbiw	r26, 0x02	; 2
    499e:	e0 e0       	ldi	r30, 0x00	; 0
    49a0:	f0 e0       	ldi	r31, 0x00	; 0
    49a2:	db 01       	movw	r26, r22
    49a4:	12 96       	adiw	r26, 0x02	; 2
    49a6:	8d 91       	ld	r24, X+
    49a8:	9c 91       	ld	r25, X
    49aa:	13 97       	sbiw	r26, 0x03	; 3
    49ac:	00 97       	sbiw	r24, 0x00	; 0
    49ae:	21 f0       	breq	.+8      	; 0x49b8 <free+0xea>
    49b0:	e6 2f       	mov	r30, r22
    49b2:	f7 2f       	mov	r31, r23
    49b4:	bc 01       	movw	r22, r24
    49b6:	f5 cf       	rjmp	.-22     	; 0x49a2 <free+0xd4>
    49b8:	9b 01       	movw	r18, r22
    49ba:	2e 5f       	subi	r18, 0xFE	; 254
    49bc:	3f 4f       	sbci	r19, 0xFF	; 255
    49be:	db 01       	movw	r26, r22
    49c0:	8d 91       	ld	r24, X+
    49c2:	9c 91       	ld	r25, X
    49c4:	11 97       	sbiw	r26, 0x01	; 1
    49c6:	82 0f       	add	r24, r18
    49c8:	93 1f       	adc	r25, r19
    49ca:	40 91 8e 05 	lds	r20, 0x058E
    49ce:	50 91 8f 05 	lds	r21, 0x058F
    49d2:	48 17       	cp	r20, r24
    49d4:	59 07       	cpc	r21, r25
    49d6:	79 f4       	brne	.+30     	; 0x49f6 <free+0x128>
    49d8:	30 97       	sbiw	r30, 0x00	; 0
    49da:	29 f4       	brne	.+10     	; 0x49e6 <free+0x118>
    49dc:	10 92 91 05 	sts	0x0591, r1
    49e0:	10 92 90 05 	sts	0x0590, r1
    49e4:	02 c0       	rjmp	.+4      	; 0x49ea <free+0x11c>
    49e6:	13 82       	std	Z+3, r1	; 0x03
    49e8:	12 82       	std	Z+2, r1	; 0x02
    49ea:	22 50       	subi	r18, 0x02	; 2
    49ec:	30 40       	sbci	r19, 0x00	; 0
    49ee:	30 93 8f 05 	sts	0x058F, r19
    49f2:	20 93 8e 05 	sts	0x058E, r18
    49f6:	df 91       	pop	r29
    49f8:	cf 91       	pop	r28
    49fa:	08 95       	ret

000049fc <memset>:
    49fc:	dc 01       	movw	r26, r24
    49fe:	01 c0       	rjmp	.+2      	; 0x4a02 <memset+0x6>
    4a00:	6d 93       	st	X+, r22
    4a02:	41 50       	subi	r20, 0x01	; 1
    4a04:	50 40       	sbci	r21, 0x00	; 0
    4a06:	e0 f7       	brcc	.-8      	; 0x4a00 <memset+0x4>
    4a08:	08 95       	ret

00004a0a <sprintf>:
    4a0a:	ae e0       	ldi	r26, 0x0E	; 14
    4a0c:	b0 e0       	ldi	r27, 0x00	; 0
    4a0e:	eb e0       	ldi	r30, 0x0B	; 11
    4a10:	f5 e2       	ldi	r31, 0x25	; 37
    4a12:	0c 94 6d 21 	jmp	0x42da	; 0x42da <__prologue_saves__+0x1c>
    4a16:	0d 89       	ldd	r16, Y+21	; 0x15
    4a18:	1e 89       	ldd	r17, Y+22	; 0x16
    4a1a:	86 e0       	ldi	r24, 0x06	; 6
    4a1c:	8c 83       	std	Y+4, r24	; 0x04
    4a1e:	1a 83       	std	Y+2, r17	; 0x02
    4a20:	09 83       	std	Y+1, r16	; 0x01
    4a22:	8f ef       	ldi	r24, 0xFF	; 255
    4a24:	9f e7       	ldi	r25, 0x7F	; 127
    4a26:	9e 83       	std	Y+6, r25	; 0x06
    4a28:	8d 83       	std	Y+5, r24	; 0x05
    4a2a:	9e 01       	movw	r18, r28
    4a2c:	27 5e       	subi	r18, 0xE7	; 231
    4a2e:	3f 4f       	sbci	r19, 0xFF	; 255
    4a30:	ce 01       	movw	r24, r28
    4a32:	01 96       	adiw	r24, 0x01	; 1
    4a34:	6f 89       	ldd	r22, Y+23	; 0x17
    4a36:	78 8d       	ldd	r23, Y+24	; 0x18
    4a38:	a9 01       	movw	r20, r18
    4a3a:	0e 94 28 25 	call	0x4a50	; 0x4a50 <vfprintf>
    4a3e:	ef 81       	ldd	r30, Y+7	; 0x07
    4a40:	f8 85       	ldd	r31, Y+8	; 0x08
    4a42:	e0 0f       	add	r30, r16
    4a44:	f1 1f       	adc	r31, r17
    4a46:	10 82       	st	Z, r1
    4a48:	2e 96       	adiw	r28, 0x0e	; 14
    4a4a:	e4 e0       	ldi	r30, 0x04	; 4
    4a4c:	0c 94 89 21 	jmp	0x4312	; 0x4312 <__epilogue_restores__+0x1c>

00004a50 <vfprintf>:
    4a50:	ac e0       	ldi	r26, 0x0C	; 12
    4a52:	b0 e0       	ldi	r27, 0x00	; 0
    4a54:	ee e2       	ldi	r30, 0x2E	; 46
    4a56:	f5 e2       	ldi	r31, 0x25	; 37
    4a58:	0c 94 60 21 	jmp	0x42c0	; 0x42c0 <__prologue_saves__+0x2>
    4a5c:	6c 01       	movw	r12, r24
    4a5e:	2b 01       	movw	r4, r22
    4a60:	8a 01       	movw	r16, r20
    4a62:	fc 01       	movw	r30, r24
    4a64:	17 82       	std	Z+7, r1	; 0x07
    4a66:	16 82       	std	Z+6, r1	; 0x06
    4a68:	83 81       	ldd	r24, Z+3	; 0x03
    4a6a:	81 fd       	sbrc	r24, 1
    4a6c:	03 c0       	rjmp	.+6      	; 0x4a74 <vfprintf+0x24>
    4a6e:	2f ef       	ldi	r18, 0xFF	; 255
    4a70:	3f ef       	ldi	r19, 0xFF	; 255
    4a72:	c2 c1       	rjmp	.+900    	; 0x4df8 <vfprintf+0x3a8>
    4a74:	4e 01       	movw	r8, r28
    4a76:	08 94       	sec
    4a78:	81 1c       	adc	r8, r1
    4a7a:	91 1c       	adc	r9, r1
    4a7c:	6f e3       	ldi	r22, 0x3F	; 63
    4a7e:	36 2e       	mov	r3, r22
    4a80:	f6 01       	movw	r30, r12
    4a82:	93 81       	ldd	r25, Z+3	; 0x03
    4a84:	f2 01       	movw	r30, r4
    4a86:	93 fd       	sbrc	r25, 3
    4a88:	85 91       	lpm	r24, Z+
    4a8a:	93 ff       	sbrs	r25, 3
    4a8c:	81 91       	ld	r24, Z+
    4a8e:	2f 01       	movw	r4, r30
    4a90:	88 23       	and	r24, r24
    4a92:	09 f4       	brne	.+2      	; 0x4a96 <vfprintf+0x46>
    4a94:	ae c1       	rjmp	.+860    	; 0x4df2 <vfprintf+0x3a2>
    4a96:	85 32       	cpi	r24, 0x25	; 37
    4a98:	39 f4       	brne	.+14     	; 0x4aa8 <vfprintf+0x58>
    4a9a:	93 fd       	sbrc	r25, 3
    4a9c:	85 91       	lpm	r24, Z+
    4a9e:	93 ff       	sbrs	r25, 3
    4aa0:	81 91       	ld	r24, Z+
    4aa2:	2f 01       	movw	r4, r30
    4aa4:	85 32       	cpi	r24, 0x25	; 37
    4aa6:	29 f4       	brne	.+10     	; 0x4ab2 <vfprintf+0x62>
    4aa8:	90 e0       	ldi	r25, 0x00	; 0
    4aaa:	b6 01       	movw	r22, r12
    4aac:	0e 94 2d 27 	call	0x4e5a	; 0x4e5a <fputc>
    4ab0:	e7 cf       	rjmp	.-50     	; 0x4a80 <vfprintf+0x30>
    4ab2:	ee 24       	eor	r14, r14
    4ab4:	ff 24       	eor	r15, r15
    4ab6:	20 e0       	ldi	r18, 0x00	; 0
    4ab8:	20 32       	cpi	r18, 0x20	; 32
    4aba:	b0 f4       	brcc	.+44     	; 0x4ae8 <vfprintf+0x98>
    4abc:	8b 32       	cpi	r24, 0x2B	; 43
    4abe:	69 f0       	breq	.+26     	; 0x4ada <vfprintf+0x8a>
    4ac0:	8c 32       	cpi	r24, 0x2C	; 44
    4ac2:	28 f4       	brcc	.+10     	; 0x4ace <vfprintf+0x7e>
    4ac4:	80 32       	cpi	r24, 0x20	; 32
    4ac6:	51 f0       	breq	.+20     	; 0x4adc <vfprintf+0x8c>
    4ac8:	83 32       	cpi	r24, 0x23	; 35
    4aca:	71 f4       	brne	.+28     	; 0x4ae8 <vfprintf+0x98>
    4acc:	0b c0       	rjmp	.+22     	; 0x4ae4 <vfprintf+0x94>
    4ace:	8d 32       	cpi	r24, 0x2D	; 45
    4ad0:	39 f0       	breq	.+14     	; 0x4ae0 <vfprintf+0x90>
    4ad2:	80 33       	cpi	r24, 0x30	; 48
    4ad4:	49 f4       	brne	.+18     	; 0x4ae8 <vfprintf+0x98>
    4ad6:	21 60       	ori	r18, 0x01	; 1
    4ad8:	2c c0       	rjmp	.+88     	; 0x4b32 <vfprintf+0xe2>
    4ada:	22 60       	ori	r18, 0x02	; 2
    4adc:	24 60       	ori	r18, 0x04	; 4
    4ade:	29 c0       	rjmp	.+82     	; 0x4b32 <vfprintf+0xe2>
    4ae0:	28 60       	ori	r18, 0x08	; 8
    4ae2:	27 c0       	rjmp	.+78     	; 0x4b32 <vfprintf+0xe2>
    4ae4:	20 61       	ori	r18, 0x10	; 16
    4ae6:	25 c0       	rjmp	.+74     	; 0x4b32 <vfprintf+0xe2>
    4ae8:	27 fd       	sbrc	r18, 7
    4aea:	2c c0       	rjmp	.+88     	; 0x4b44 <vfprintf+0xf4>
    4aec:	38 2f       	mov	r19, r24
    4aee:	30 53       	subi	r19, 0x30	; 48
    4af0:	3a 30       	cpi	r19, 0x0A	; 10
    4af2:	98 f4       	brcc	.+38     	; 0x4b1a <vfprintf+0xca>
    4af4:	26 ff       	sbrs	r18, 6
    4af6:	08 c0       	rjmp	.+16     	; 0x4b08 <vfprintf+0xb8>
    4af8:	8e 2d       	mov	r24, r14
    4afa:	88 0f       	add	r24, r24
    4afc:	e8 2e       	mov	r14, r24
    4afe:	ee 0c       	add	r14, r14
    4b00:	ee 0c       	add	r14, r14
    4b02:	e8 0e       	add	r14, r24
    4b04:	e3 0e       	add	r14, r19
    4b06:	15 c0       	rjmp	.+42     	; 0x4b32 <vfprintf+0xe2>
    4b08:	8f 2d       	mov	r24, r15
    4b0a:	88 0f       	add	r24, r24
    4b0c:	f8 2e       	mov	r15, r24
    4b0e:	ff 0c       	add	r15, r15
    4b10:	ff 0c       	add	r15, r15
    4b12:	f8 0e       	add	r15, r24
    4b14:	f3 0e       	add	r15, r19
    4b16:	20 62       	ori	r18, 0x20	; 32
    4b18:	0c c0       	rjmp	.+24     	; 0x4b32 <vfprintf+0xe2>
    4b1a:	8e 32       	cpi	r24, 0x2E	; 46
    4b1c:	21 f4       	brne	.+8      	; 0x4b26 <vfprintf+0xd6>
    4b1e:	26 fd       	sbrc	r18, 6
    4b20:	68 c1       	rjmp	.+720    	; 0x4df2 <vfprintf+0x3a2>
    4b22:	20 64       	ori	r18, 0x40	; 64
    4b24:	06 c0       	rjmp	.+12     	; 0x4b32 <vfprintf+0xe2>
    4b26:	8c 36       	cpi	r24, 0x6C	; 108
    4b28:	11 f4       	brne	.+4      	; 0x4b2e <vfprintf+0xde>
    4b2a:	20 68       	ori	r18, 0x80	; 128
    4b2c:	02 c0       	rjmp	.+4      	; 0x4b32 <vfprintf+0xe2>
    4b2e:	88 36       	cpi	r24, 0x68	; 104
    4b30:	49 f4       	brne	.+18     	; 0x4b44 <vfprintf+0xf4>
    4b32:	f2 01       	movw	r30, r4
    4b34:	93 fd       	sbrc	r25, 3
    4b36:	85 91       	lpm	r24, Z+
    4b38:	93 ff       	sbrs	r25, 3
    4b3a:	81 91       	ld	r24, Z+
    4b3c:	2f 01       	movw	r4, r30
    4b3e:	88 23       	and	r24, r24
    4b40:	09 f0       	breq	.+2      	; 0x4b44 <vfprintf+0xf4>
    4b42:	ba cf       	rjmp	.-140    	; 0x4ab8 <vfprintf+0x68>
    4b44:	98 2f       	mov	r25, r24
    4b46:	95 54       	subi	r25, 0x45	; 69
    4b48:	93 30       	cpi	r25, 0x03	; 3
    4b4a:	18 f0       	brcs	.+6      	; 0x4b52 <vfprintf+0x102>
    4b4c:	90 52       	subi	r25, 0x20	; 32
    4b4e:	93 30       	cpi	r25, 0x03	; 3
    4b50:	20 f4       	brcc	.+8      	; 0x4b5a <vfprintf+0x10a>
    4b52:	0c 5f       	subi	r16, 0xFC	; 252
    4b54:	1f 4f       	sbci	r17, 0xFF	; 255
    4b56:	39 82       	std	Y+1, r3	; 0x01
    4b58:	0d c0       	rjmp	.+26     	; 0x4b74 <vfprintf+0x124>
    4b5a:	83 36       	cpi	r24, 0x63	; 99
    4b5c:	31 f0       	breq	.+12     	; 0x4b6a <vfprintf+0x11a>
    4b5e:	83 37       	cpi	r24, 0x73	; 115
    4b60:	71 f0       	breq	.+28     	; 0x4b7e <vfprintf+0x12e>
    4b62:	83 35       	cpi	r24, 0x53	; 83
    4b64:	09 f0       	breq	.+2      	; 0x4b68 <vfprintf+0x118>
    4b66:	58 c0       	rjmp	.+176    	; 0x4c18 <vfprintf+0x1c8>
    4b68:	1e c0       	rjmp	.+60     	; 0x4ba6 <vfprintf+0x156>
    4b6a:	f8 01       	movw	r30, r16
    4b6c:	80 81       	ld	r24, Z
    4b6e:	89 83       	std	Y+1, r24	; 0x01
    4b70:	0e 5f       	subi	r16, 0xFE	; 254
    4b72:	1f 4f       	sbci	r17, 0xFF	; 255
    4b74:	54 01       	movw	r10, r8
    4b76:	51 e0       	ldi	r21, 0x01	; 1
    4b78:	65 2e       	mov	r6, r21
    4b7a:	71 2c       	mov	r7, r1
    4b7c:	12 c0       	rjmp	.+36     	; 0x4ba2 <vfprintf+0x152>
    4b7e:	f8 01       	movw	r30, r16
    4b80:	a0 80       	ld	r10, Z
    4b82:	b1 80       	ldd	r11, Z+1	; 0x01
    4b84:	26 fd       	sbrc	r18, 6
    4b86:	03 c0       	rjmp	.+6      	; 0x4b8e <vfprintf+0x13e>
    4b88:	6f ef       	ldi	r22, 0xFF	; 255
    4b8a:	7f ef       	ldi	r23, 0xFF	; 255
    4b8c:	02 c0       	rjmp	.+4      	; 0x4b92 <vfprintf+0x142>
    4b8e:	6e 2d       	mov	r22, r14
    4b90:	70 e0       	ldi	r23, 0x00	; 0
    4b92:	0e 5f       	subi	r16, 0xFE	; 254
    4b94:	1f 4f       	sbci	r17, 0xFF	; 255
    4b96:	c5 01       	movw	r24, r10
    4b98:	2c 87       	std	Y+12, r18	; 0x0c
    4b9a:	0e 94 22 27 	call	0x4e44	; 0x4e44 <strnlen>
    4b9e:	3c 01       	movw	r6, r24
    4ba0:	2c 85       	ldd	r18, Y+12	; 0x0c
    4ba2:	2f 77       	andi	r18, 0x7F	; 127
    4ba4:	13 c0       	rjmp	.+38     	; 0x4bcc <vfprintf+0x17c>
    4ba6:	f8 01       	movw	r30, r16
    4ba8:	a0 80       	ld	r10, Z
    4baa:	b1 80       	ldd	r11, Z+1	; 0x01
    4bac:	26 fd       	sbrc	r18, 6
    4bae:	03 c0       	rjmp	.+6      	; 0x4bb6 <vfprintf+0x166>
    4bb0:	6f ef       	ldi	r22, 0xFF	; 255
    4bb2:	7f ef       	ldi	r23, 0xFF	; 255
    4bb4:	02 c0       	rjmp	.+4      	; 0x4bba <vfprintf+0x16a>
    4bb6:	6e 2d       	mov	r22, r14
    4bb8:	70 e0       	ldi	r23, 0x00	; 0
    4bba:	0e 5f       	subi	r16, 0xFE	; 254
    4bbc:	1f 4f       	sbci	r17, 0xFF	; 255
    4bbe:	c5 01       	movw	r24, r10
    4bc0:	2c 87       	std	Y+12, r18	; 0x0c
    4bc2:	0e 94 17 27 	call	0x4e2e	; 0x4e2e <strnlen_P>
    4bc6:	3c 01       	movw	r6, r24
    4bc8:	2c 85       	ldd	r18, Y+12	; 0x0c
    4bca:	20 68       	ori	r18, 0x80	; 128
    4bcc:	23 ff       	sbrs	r18, 3
    4bce:	09 c0       	rjmp	.+18     	; 0x4be2 <vfprintf+0x192>
    4bd0:	1f c0       	rjmp	.+62     	; 0x4c10 <vfprintf+0x1c0>
    4bd2:	80 e2       	ldi	r24, 0x20	; 32
    4bd4:	90 e0       	ldi	r25, 0x00	; 0
    4bd6:	b6 01       	movw	r22, r12
    4bd8:	2c 87       	std	Y+12, r18	; 0x0c
    4bda:	0e 94 2d 27 	call	0x4e5a	; 0x4e5a <fputc>
    4bde:	fa 94       	dec	r15
    4be0:	2c 85       	ldd	r18, Y+12	; 0x0c
    4be2:	8f 2d       	mov	r24, r15
    4be4:	90 e0       	ldi	r25, 0x00	; 0
    4be6:	68 16       	cp	r6, r24
    4be8:	79 06       	cpc	r7, r25
    4bea:	98 f3       	brcs	.-26     	; 0x4bd2 <vfprintf+0x182>
    4bec:	11 c0       	rjmp	.+34     	; 0x4c10 <vfprintf+0x1c0>
    4bee:	f5 01       	movw	r30, r10
    4bf0:	27 fd       	sbrc	r18, 7
    4bf2:	85 91       	lpm	r24, Z+
    4bf4:	27 ff       	sbrs	r18, 7
    4bf6:	81 91       	ld	r24, Z+
    4bf8:	5f 01       	movw	r10, r30
    4bfa:	90 e0       	ldi	r25, 0x00	; 0
    4bfc:	b6 01       	movw	r22, r12
    4bfe:	2c 87       	std	Y+12, r18	; 0x0c
    4c00:	0e 94 2d 27 	call	0x4e5a	; 0x4e5a <fputc>
    4c04:	2c 85       	ldd	r18, Y+12	; 0x0c
    4c06:	f1 10       	cpse	r15, r1
    4c08:	fa 94       	dec	r15
    4c0a:	08 94       	sec
    4c0c:	61 08       	sbc	r6, r1
    4c0e:	71 08       	sbc	r7, r1
    4c10:	61 14       	cp	r6, r1
    4c12:	71 04       	cpc	r7, r1
    4c14:	61 f7       	brne	.-40     	; 0x4bee <vfprintf+0x19e>
    4c16:	ea c0       	rjmp	.+468    	; 0x4dec <vfprintf+0x39c>
    4c18:	84 36       	cpi	r24, 0x64	; 100
    4c1a:	11 f0       	breq	.+4      	; 0x4c20 <vfprintf+0x1d0>
    4c1c:	89 36       	cpi	r24, 0x69	; 105
    4c1e:	51 f5       	brne	.+84     	; 0x4c74 <vfprintf+0x224>
    4c20:	27 ff       	sbrs	r18, 7
    4c22:	08 c0       	rjmp	.+16     	; 0x4c34 <vfprintf+0x1e4>
    4c24:	f8 01       	movw	r30, r16
    4c26:	60 81       	ld	r22, Z
    4c28:	71 81       	ldd	r23, Z+1	; 0x01
    4c2a:	82 81       	ldd	r24, Z+2	; 0x02
    4c2c:	93 81       	ldd	r25, Z+3	; 0x03
    4c2e:	0c 5f       	subi	r16, 0xFC	; 252
    4c30:	1f 4f       	sbci	r17, 0xFF	; 255
    4c32:	0a c0       	rjmp	.+20     	; 0x4c48 <vfprintf+0x1f8>
    4c34:	f8 01       	movw	r30, r16
    4c36:	40 81       	ld	r20, Z
    4c38:	51 81       	ldd	r21, Z+1	; 0x01
    4c3a:	ba 01       	movw	r22, r20
    4c3c:	88 27       	eor	r24, r24
    4c3e:	77 fd       	sbrc	r23, 7
    4c40:	80 95       	com	r24
    4c42:	98 2f       	mov	r25, r24
    4c44:	0e 5f       	subi	r16, 0xFE	; 254
    4c46:	1f 4f       	sbci	r17, 0xFF	; 255
    4c48:	4f e6       	ldi	r20, 0x6F	; 111
    4c4a:	b4 2e       	mov	r11, r20
    4c4c:	b2 22       	and	r11, r18
    4c4e:	97 ff       	sbrs	r25, 7
    4c50:	09 c0       	rjmp	.+18     	; 0x4c64 <vfprintf+0x214>
    4c52:	90 95       	com	r25
    4c54:	80 95       	com	r24
    4c56:	70 95       	com	r23
    4c58:	61 95       	neg	r22
    4c5a:	7f 4f       	sbci	r23, 0xFF	; 255
    4c5c:	8f 4f       	sbci	r24, 0xFF	; 255
    4c5e:	9f 4f       	sbci	r25, 0xFF	; 255
    4c60:	f0 e8       	ldi	r31, 0x80	; 128
    4c62:	bf 2a       	or	r11, r31
    4c64:	a4 01       	movw	r20, r8
    4c66:	2a e0       	ldi	r18, 0x0A	; 10
    4c68:	30 e0       	ldi	r19, 0x00	; 0
    4c6a:	0e 94 59 27 	call	0x4eb2	; 0x4eb2 <__ultoa_invert>
    4c6e:	78 2e       	mov	r7, r24
    4c70:	78 18       	sub	r7, r8
    4c72:	43 c0       	rjmp	.+134    	; 0x4cfa <vfprintf+0x2aa>
    4c74:	85 37       	cpi	r24, 0x75	; 117
    4c76:	31 f4       	brne	.+12     	; 0x4c84 <vfprintf+0x234>
    4c78:	3f ee       	ldi	r19, 0xEF	; 239
    4c7a:	b3 2e       	mov	r11, r19
    4c7c:	b2 22       	and	r11, r18
    4c7e:	2a e0       	ldi	r18, 0x0A	; 10
    4c80:	30 e0       	ldi	r19, 0x00	; 0
    4c82:	23 c0       	rjmp	.+70     	; 0x4cca <vfprintf+0x27a>
    4c84:	99 ef       	ldi	r25, 0xF9	; 249
    4c86:	b9 2e       	mov	r11, r25
    4c88:	b2 22       	and	r11, r18
    4c8a:	8f 36       	cpi	r24, 0x6F	; 111
    4c8c:	61 f0       	breq	.+24     	; 0x4ca6 <vfprintf+0x256>
    4c8e:	80 37       	cpi	r24, 0x70	; 112
    4c90:	20 f4       	brcc	.+8      	; 0x4c9a <vfprintf+0x24a>
    4c92:	88 35       	cpi	r24, 0x58	; 88
    4c94:	09 f0       	breq	.+2      	; 0x4c98 <vfprintf+0x248>
    4c96:	ad c0       	rjmp	.+346    	; 0x4df2 <vfprintf+0x3a2>
    4c98:	12 c0       	rjmp	.+36     	; 0x4cbe <vfprintf+0x26e>
    4c9a:	80 37       	cpi	r24, 0x70	; 112
    4c9c:	39 f0       	breq	.+14     	; 0x4cac <vfprintf+0x25c>
    4c9e:	88 37       	cpi	r24, 0x78	; 120
    4ca0:	09 f0       	breq	.+2      	; 0x4ca4 <vfprintf+0x254>
    4ca2:	a7 c0       	rjmp	.+334    	; 0x4df2 <vfprintf+0x3a2>
    4ca4:	05 c0       	rjmp	.+10     	; 0x4cb0 <vfprintf+0x260>
    4ca6:	28 e0       	ldi	r18, 0x08	; 8
    4ca8:	30 e0       	ldi	r19, 0x00	; 0
    4caa:	0f c0       	rjmp	.+30     	; 0x4cca <vfprintf+0x27a>
    4cac:	20 e1       	ldi	r18, 0x10	; 16
    4cae:	b2 2a       	or	r11, r18
    4cb0:	b4 fe       	sbrs	r11, 4
    4cb2:	02 c0       	rjmp	.+4      	; 0x4cb8 <vfprintf+0x268>
    4cb4:	84 e0       	ldi	r24, 0x04	; 4
    4cb6:	b8 2a       	or	r11, r24
    4cb8:	20 e1       	ldi	r18, 0x10	; 16
    4cba:	30 e0       	ldi	r19, 0x00	; 0
    4cbc:	06 c0       	rjmp	.+12     	; 0x4cca <vfprintf+0x27a>
    4cbe:	b4 fe       	sbrs	r11, 4
    4cc0:	02 c0       	rjmp	.+4      	; 0x4cc6 <vfprintf+0x276>
    4cc2:	e6 e0       	ldi	r30, 0x06	; 6
    4cc4:	be 2a       	or	r11, r30
    4cc6:	20 e1       	ldi	r18, 0x10	; 16
    4cc8:	32 e0       	ldi	r19, 0x02	; 2
    4cca:	b7 fe       	sbrs	r11, 7
    4ccc:	08 c0       	rjmp	.+16     	; 0x4cde <vfprintf+0x28e>
    4cce:	f8 01       	movw	r30, r16
    4cd0:	60 81       	ld	r22, Z
    4cd2:	71 81       	ldd	r23, Z+1	; 0x01
    4cd4:	82 81       	ldd	r24, Z+2	; 0x02
    4cd6:	93 81       	ldd	r25, Z+3	; 0x03
    4cd8:	0c 5f       	subi	r16, 0xFC	; 252
    4cda:	1f 4f       	sbci	r17, 0xFF	; 255
    4cdc:	07 c0       	rjmp	.+14     	; 0x4cec <vfprintf+0x29c>
    4cde:	f8 01       	movw	r30, r16
    4ce0:	60 81       	ld	r22, Z
    4ce2:	71 81       	ldd	r23, Z+1	; 0x01
    4ce4:	80 e0       	ldi	r24, 0x00	; 0
    4ce6:	90 e0       	ldi	r25, 0x00	; 0
    4ce8:	0e 5f       	subi	r16, 0xFE	; 254
    4cea:	1f 4f       	sbci	r17, 0xFF	; 255
    4cec:	a4 01       	movw	r20, r8
    4cee:	0e 94 59 27 	call	0x4eb2	; 0x4eb2 <__ultoa_invert>
    4cf2:	78 2e       	mov	r7, r24
    4cf4:	78 18       	sub	r7, r8
    4cf6:	ff e7       	ldi	r31, 0x7F	; 127
    4cf8:	bf 22       	and	r11, r31
    4cfa:	b6 fe       	sbrs	r11, 6
    4cfc:	0b c0       	rjmp	.+22     	; 0x4d14 <vfprintf+0x2c4>
    4cfe:	2e ef       	ldi	r18, 0xFE	; 254
    4d00:	b2 22       	and	r11, r18
    4d02:	7e 14       	cp	r7, r14
    4d04:	38 f4       	brcc	.+14     	; 0x4d14 <vfprintf+0x2c4>
    4d06:	b4 fe       	sbrs	r11, 4
    4d08:	07 c0       	rjmp	.+14     	; 0x4d18 <vfprintf+0x2c8>
    4d0a:	b2 fc       	sbrc	r11, 2
    4d0c:	05 c0       	rjmp	.+10     	; 0x4d18 <vfprintf+0x2c8>
    4d0e:	8f ee       	ldi	r24, 0xEF	; 239
    4d10:	b8 22       	and	r11, r24
    4d12:	02 c0       	rjmp	.+4      	; 0x4d18 <vfprintf+0x2c8>
    4d14:	a7 2c       	mov	r10, r7
    4d16:	01 c0       	rjmp	.+2      	; 0x4d1a <vfprintf+0x2ca>
    4d18:	ae 2c       	mov	r10, r14
    4d1a:	8b 2d       	mov	r24, r11
    4d1c:	b4 fe       	sbrs	r11, 4
    4d1e:	0d c0       	rjmp	.+26     	; 0x4d3a <vfprintf+0x2ea>
    4d20:	fe 01       	movw	r30, r28
    4d22:	e7 0d       	add	r30, r7
    4d24:	f1 1d       	adc	r31, r1
    4d26:	90 81       	ld	r25, Z
    4d28:	90 33       	cpi	r25, 0x30	; 48
    4d2a:	19 f4       	brne	.+6      	; 0x4d32 <vfprintf+0x2e2>
    4d2c:	e9 ee       	ldi	r30, 0xE9	; 233
    4d2e:	be 22       	and	r11, r30
    4d30:	07 c0       	rjmp	.+14     	; 0x4d40 <vfprintf+0x2f0>
    4d32:	a3 94       	inc	r10
    4d34:	b2 fe       	sbrs	r11, 2
    4d36:	04 c0       	rjmp	.+8      	; 0x4d40 <vfprintf+0x2f0>
    4d38:	02 c0       	rjmp	.+4      	; 0x4d3e <vfprintf+0x2ee>
    4d3a:	86 78       	andi	r24, 0x86	; 134
    4d3c:	09 f0       	breq	.+2      	; 0x4d40 <vfprintf+0x2f0>
    4d3e:	a3 94       	inc	r10
    4d40:	6b 2c       	mov	r6, r11
    4d42:	b3 fc       	sbrc	r11, 3
    4d44:	14 c0       	rjmp	.+40     	; 0x4d6e <vfprintf+0x31e>
    4d46:	b0 fe       	sbrs	r11, 0
    4d48:	0f c0       	rjmp	.+30     	; 0x4d68 <vfprintf+0x318>
    4d4a:	af 14       	cp	r10, r15
    4d4c:	10 f0       	brcs	.+4      	; 0x4d52 <vfprintf+0x302>
    4d4e:	e7 2c       	mov	r14, r7
    4d50:	0b c0       	rjmp	.+22     	; 0x4d68 <vfprintf+0x318>
    4d52:	e7 2c       	mov	r14, r7
    4d54:	ef 0c       	add	r14, r15
    4d56:	ea 18       	sub	r14, r10
    4d58:	af 2c       	mov	r10, r15
    4d5a:	06 c0       	rjmp	.+12     	; 0x4d68 <vfprintf+0x318>
    4d5c:	80 e2       	ldi	r24, 0x20	; 32
    4d5e:	90 e0       	ldi	r25, 0x00	; 0
    4d60:	b6 01       	movw	r22, r12
    4d62:	0e 94 2d 27 	call	0x4e5a	; 0x4e5a <fputc>
    4d66:	a3 94       	inc	r10
    4d68:	af 14       	cp	r10, r15
    4d6a:	c0 f3       	brcs	.-16     	; 0x4d5c <vfprintf+0x30c>
    4d6c:	04 c0       	rjmp	.+8      	; 0x4d76 <vfprintf+0x326>
    4d6e:	af 14       	cp	r10, r15
    4d70:	10 f4       	brcc	.+4      	; 0x4d76 <vfprintf+0x326>
    4d72:	fa 18       	sub	r15, r10
    4d74:	01 c0       	rjmp	.+2      	; 0x4d78 <vfprintf+0x328>
    4d76:	ff 24       	eor	r15, r15
    4d78:	64 fe       	sbrs	r6, 4
    4d7a:	0f c0       	rjmp	.+30     	; 0x4d9a <vfprintf+0x34a>
    4d7c:	80 e3       	ldi	r24, 0x30	; 48
    4d7e:	90 e0       	ldi	r25, 0x00	; 0
    4d80:	b6 01       	movw	r22, r12
    4d82:	0e 94 2d 27 	call	0x4e5a	; 0x4e5a <fputc>
    4d86:	62 fe       	sbrs	r6, 2
    4d88:	1d c0       	rjmp	.+58     	; 0x4dc4 <vfprintf+0x374>
    4d8a:	61 fc       	sbrc	r6, 1
    4d8c:	03 c0       	rjmp	.+6      	; 0x4d94 <vfprintf+0x344>
    4d8e:	88 e7       	ldi	r24, 0x78	; 120
    4d90:	90 e0       	ldi	r25, 0x00	; 0
    4d92:	0e c0       	rjmp	.+28     	; 0x4db0 <vfprintf+0x360>
    4d94:	88 e5       	ldi	r24, 0x58	; 88
    4d96:	90 e0       	ldi	r25, 0x00	; 0
    4d98:	0b c0       	rjmp	.+22     	; 0x4db0 <vfprintf+0x360>
    4d9a:	86 2d       	mov	r24, r6
    4d9c:	86 78       	andi	r24, 0x86	; 134
    4d9e:	91 f0       	breq	.+36     	; 0x4dc4 <vfprintf+0x374>
    4da0:	61 fe       	sbrs	r6, 1
    4da2:	02 c0       	rjmp	.+4      	; 0x4da8 <vfprintf+0x358>
    4da4:	8b e2       	ldi	r24, 0x2B	; 43
    4da6:	01 c0       	rjmp	.+2      	; 0x4daa <vfprintf+0x35a>
    4da8:	80 e2       	ldi	r24, 0x20	; 32
    4daa:	b7 fc       	sbrc	r11, 7
    4dac:	8d e2       	ldi	r24, 0x2D	; 45
    4dae:	90 e0       	ldi	r25, 0x00	; 0
    4db0:	b6 01       	movw	r22, r12
    4db2:	0e 94 2d 27 	call	0x4e5a	; 0x4e5a <fputc>
    4db6:	06 c0       	rjmp	.+12     	; 0x4dc4 <vfprintf+0x374>
    4db8:	80 e3       	ldi	r24, 0x30	; 48
    4dba:	90 e0       	ldi	r25, 0x00	; 0
    4dbc:	b6 01       	movw	r22, r12
    4dbe:	0e 94 2d 27 	call	0x4e5a	; 0x4e5a <fputc>
    4dc2:	ea 94       	dec	r14
    4dc4:	7e 14       	cp	r7, r14
    4dc6:	c0 f3       	brcs	.-16     	; 0x4db8 <vfprintf+0x368>
    4dc8:	7a 94       	dec	r7
    4dca:	f4 01       	movw	r30, r8
    4dcc:	e7 0d       	add	r30, r7
    4dce:	f1 1d       	adc	r31, r1
    4dd0:	80 81       	ld	r24, Z
    4dd2:	90 e0       	ldi	r25, 0x00	; 0
    4dd4:	b6 01       	movw	r22, r12
    4dd6:	0e 94 2d 27 	call	0x4e5a	; 0x4e5a <fputc>
    4dda:	77 20       	and	r7, r7
    4ddc:	a9 f7       	brne	.-22     	; 0x4dc8 <vfprintf+0x378>
    4dde:	06 c0       	rjmp	.+12     	; 0x4dec <vfprintf+0x39c>
    4de0:	80 e2       	ldi	r24, 0x20	; 32
    4de2:	90 e0       	ldi	r25, 0x00	; 0
    4de4:	b6 01       	movw	r22, r12
    4de6:	0e 94 2d 27 	call	0x4e5a	; 0x4e5a <fputc>
    4dea:	fa 94       	dec	r15
    4dec:	ff 20       	and	r15, r15
    4dee:	c1 f7       	brne	.-16     	; 0x4de0 <vfprintf+0x390>
    4df0:	47 ce       	rjmp	.-882    	; 0x4a80 <vfprintf+0x30>
    4df2:	f6 01       	movw	r30, r12
    4df4:	26 81       	ldd	r18, Z+6	; 0x06
    4df6:	37 81       	ldd	r19, Z+7	; 0x07
    4df8:	c9 01       	movw	r24, r18
    4dfa:	2c 96       	adiw	r28, 0x0c	; 12
    4dfc:	e1 e1       	ldi	r30, 0x11	; 17
    4dfe:	0c 94 7c 21 	jmp	0x42f8	; 0x42f8 <__epilogue_restores__+0x2>

00004e02 <__eerd_byte_m328p>:
    4e02:	f9 99       	sbic	0x1f, 1	; 31
    4e04:	fe cf       	rjmp	.-4      	; 0x4e02 <__eerd_byte_m328p>
    4e06:	92 bd       	out	0x22, r25	; 34
    4e08:	81 bd       	out	0x21, r24	; 33
    4e0a:	f8 9a       	sbi	0x1f, 0	; 31
    4e0c:	99 27       	eor	r25, r25
    4e0e:	80 b5       	in	r24, 0x20	; 32
    4e10:	08 95       	ret

00004e12 <__eewr_byte_m328p>:
    4e12:	26 2f       	mov	r18, r22

00004e14 <__eewr_r18_m328p>:
    4e14:	f9 99       	sbic	0x1f, 1	; 31
    4e16:	fe cf       	rjmp	.-4      	; 0x4e14 <__eewr_r18_m328p>
    4e18:	1f ba       	out	0x1f, r1	; 31
    4e1a:	92 bd       	out	0x22, r25	; 34
    4e1c:	81 bd       	out	0x21, r24	; 33
    4e1e:	20 bd       	out	0x20, r18	; 32
    4e20:	0f b6       	in	r0, 0x3f	; 63
    4e22:	f8 94       	cli
    4e24:	fa 9a       	sbi	0x1f, 2	; 31
    4e26:	f9 9a       	sbi	0x1f, 1	; 31
    4e28:	0f be       	out	0x3f, r0	; 63
    4e2a:	01 96       	adiw	r24, 0x01	; 1
    4e2c:	08 95       	ret

00004e2e <strnlen_P>:
    4e2e:	fc 01       	movw	r30, r24
    4e30:	05 90       	lpm	r0, Z+
    4e32:	61 50       	subi	r22, 0x01	; 1
    4e34:	70 40       	sbci	r23, 0x00	; 0
    4e36:	01 10       	cpse	r0, r1
    4e38:	d8 f7       	brcc	.-10     	; 0x4e30 <strnlen_P+0x2>
    4e3a:	80 95       	com	r24
    4e3c:	90 95       	com	r25
    4e3e:	8e 0f       	add	r24, r30
    4e40:	9f 1f       	adc	r25, r31
    4e42:	08 95       	ret

00004e44 <strnlen>:
    4e44:	fc 01       	movw	r30, r24
    4e46:	61 50       	subi	r22, 0x01	; 1
    4e48:	70 40       	sbci	r23, 0x00	; 0
    4e4a:	01 90       	ld	r0, Z+
    4e4c:	01 10       	cpse	r0, r1
    4e4e:	d8 f7       	brcc	.-10     	; 0x4e46 <strnlen+0x2>
    4e50:	80 95       	com	r24
    4e52:	90 95       	com	r25
    4e54:	8e 0f       	add	r24, r30
    4e56:	9f 1f       	adc	r25, r31
    4e58:	08 95       	ret

00004e5a <fputc>:
    4e5a:	0f 93       	push	r16
    4e5c:	1f 93       	push	r17
    4e5e:	cf 93       	push	r28
    4e60:	df 93       	push	r29
    4e62:	8c 01       	movw	r16, r24
    4e64:	eb 01       	movw	r28, r22
    4e66:	8b 81       	ldd	r24, Y+3	; 0x03
    4e68:	81 ff       	sbrs	r24, 1
    4e6a:	1b c0       	rjmp	.+54     	; 0x4ea2 <fputc+0x48>
    4e6c:	82 ff       	sbrs	r24, 2
    4e6e:	0d c0       	rjmp	.+26     	; 0x4e8a <fputc+0x30>
    4e70:	2e 81       	ldd	r18, Y+6	; 0x06
    4e72:	3f 81       	ldd	r19, Y+7	; 0x07
    4e74:	8c 81       	ldd	r24, Y+4	; 0x04
    4e76:	9d 81       	ldd	r25, Y+5	; 0x05
    4e78:	28 17       	cp	r18, r24
    4e7a:	39 07       	cpc	r19, r25
    4e7c:	64 f4       	brge	.+24     	; 0x4e96 <fputc+0x3c>
    4e7e:	e8 81       	ld	r30, Y
    4e80:	f9 81       	ldd	r31, Y+1	; 0x01
    4e82:	01 93       	st	Z+, r16
    4e84:	f9 83       	std	Y+1, r31	; 0x01
    4e86:	e8 83       	st	Y, r30
    4e88:	06 c0       	rjmp	.+12     	; 0x4e96 <fputc+0x3c>
    4e8a:	e8 85       	ldd	r30, Y+8	; 0x08
    4e8c:	f9 85       	ldd	r31, Y+9	; 0x09
    4e8e:	80 2f       	mov	r24, r16
    4e90:	09 95       	icall
    4e92:	00 97       	sbiw	r24, 0x00	; 0
    4e94:	31 f4       	brne	.+12     	; 0x4ea2 <fputc+0x48>
    4e96:	8e 81       	ldd	r24, Y+6	; 0x06
    4e98:	9f 81       	ldd	r25, Y+7	; 0x07
    4e9a:	01 96       	adiw	r24, 0x01	; 1
    4e9c:	9f 83       	std	Y+7, r25	; 0x07
    4e9e:	8e 83       	std	Y+6, r24	; 0x06
    4ea0:	02 c0       	rjmp	.+4      	; 0x4ea6 <fputc+0x4c>
    4ea2:	0f ef       	ldi	r16, 0xFF	; 255
    4ea4:	1f ef       	ldi	r17, 0xFF	; 255
    4ea6:	c8 01       	movw	r24, r16
    4ea8:	df 91       	pop	r29
    4eaa:	cf 91       	pop	r28
    4eac:	1f 91       	pop	r17
    4eae:	0f 91       	pop	r16
    4eb0:	08 95       	ret

00004eb2 <__ultoa_invert>:
    4eb2:	fa 01       	movw	r30, r20
    4eb4:	aa 27       	eor	r26, r26
    4eb6:	28 30       	cpi	r18, 0x08	; 8
    4eb8:	51 f1       	breq	.+84     	; 0x4f0e <__ultoa_invert+0x5c>
    4eba:	20 31       	cpi	r18, 0x10	; 16
    4ebc:	81 f1       	breq	.+96     	; 0x4f1e <__ultoa_invert+0x6c>
    4ebe:	e8 94       	clt
    4ec0:	6f 93       	push	r22
    4ec2:	6e 7f       	andi	r22, 0xFE	; 254
    4ec4:	6e 5f       	subi	r22, 0xFE	; 254
    4ec6:	7f 4f       	sbci	r23, 0xFF	; 255
    4ec8:	8f 4f       	sbci	r24, 0xFF	; 255
    4eca:	9f 4f       	sbci	r25, 0xFF	; 255
    4ecc:	af 4f       	sbci	r26, 0xFF	; 255
    4ece:	b1 e0       	ldi	r27, 0x01	; 1
    4ed0:	3e d0       	rcall	.+124    	; 0x4f4e <__ultoa_invert+0x9c>
    4ed2:	b4 e0       	ldi	r27, 0x04	; 4
    4ed4:	3c d0       	rcall	.+120    	; 0x4f4e <__ultoa_invert+0x9c>
    4ed6:	67 0f       	add	r22, r23
    4ed8:	78 1f       	adc	r23, r24
    4eda:	89 1f       	adc	r24, r25
    4edc:	9a 1f       	adc	r25, r26
    4ede:	a1 1d       	adc	r26, r1
    4ee0:	68 0f       	add	r22, r24
    4ee2:	79 1f       	adc	r23, r25
    4ee4:	8a 1f       	adc	r24, r26
    4ee6:	91 1d       	adc	r25, r1
    4ee8:	a1 1d       	adc	r26, r1
    4eea:	6a 0f       	add	r22, r26
    4eec:	71 1d       	adc	r23, r1
    4eee:	81 1d       	adc	r24, r1
    4ef0:	91 1d       	adc	r25, r1
    4ef2:	a1 1d       	adc	r26, r1
    4ef4:	20 d0       	rcall	.+64     	; 0x4f36 <__ultoa_invert+0x84>
    4ef6:	09 f4       	brne	.+2      	; 0x4efa <__ultoa_invert+0x48>
    4ef8:	68 94       	set
    4efa:	3f 91       	pop	r19
    4efc:	2a e0       	ldi	r18, 0x0A	; 10
    4efe:	26 9f       	mul	r18, r22
    4f00:	11 24       	eor	r1, r1
    4f02:	30 19       	sub	r19, r0
    4f04:	30 5d       	subi	r19, 0xD0	; 208
    4f06:	31 93       	st	Z+, r19
    4f08:	de f6       	brtc	.-74     	; 0x4ec0 <__ultoa_invert+0xe>
    4f0a:	cf 01       	movw	r24, r30
    4f0c:	08 95       	ret
    4f0e:	46 2f       	mov	r20, r22
    4f10:	47 70       	andi	r20, 0x07	; 7
    4f12:	40 5d       	subi	r20, 0xD0	; 208
    4f14:	41 93       	st	Z+, r20
    4f16:	b3 e0       	ldi	r27, 0x03	; 3
    4f18:	0f d0       	rcall	.+30     	; 0x4f38 <__ultoa_invert+0x86>
    4f1a:	c9 f7       	brne	.-14     	; 0x4f0e <__ultoa_invert+0x5c>
    4f1c:	f6 cf       	rjmp	.-20     	; 0x4f0a <__ultoa_invert+0x58>
    4f1e:	46 2f       	mov	r20, r22
    4f20:	4f 70       	andi	r20, 0x0F	; 15
    4f22:	40 5d       	subi	r20, 0xD0	; 208
    4f24:	4a 33       	cpi	r20, 0x3A	; 58
    4f26:	18 f0       	brcs	.+6      	; 0x4f2e <__ultoa_invert+0x7c>
    4f28:	49 5d       	subi	r20, 0xD9	; 217
    4f2a:	31 fd       	sbrc	r19, 1
    4f2c:	40 52       	subi	r20, 0x20	; 32
    4f2e:	41 93       	st	Z+, r20
    4f30:	02 d0       	rcall	.+4      	; 0x4f36 <__ultoa_invert+0x84>
    4f32:	a9 f7       	brne	.-22     	; 0x4f1e <__ultoa_invert+0x6c>
    4f34:	ea cf       	rjmp	.-44     	; 0x4f0a <__ultoa_invert+0x58>
    4f36:	b4 e0       	ldi	r27, 0x04	; 4
    4f38:	a6 95       	lsr	r26
    4f3a:	97 95       	ror	r25
    4f3c:	87 95       	ror	r24
    4f3e:	77 95       	ror	r23
    4f40:	67 95       	ror	r22
    4f42:	ba 95       	dec	r27
    4f44:	c9 f7       	brne	.-14     	; 0x4f38 <__ultoa_invert+0x86>
    4f46:	00 97       	sbiw	r24, 0x00	; 0
    4f48:	61 05       	cpc	r22, r1
    4f4a:	71 05       	cpc	r23, r1
    4f4c:	08 95       	ret
    4f4e:	9b 01       	movw	r18, r22
    4f50:	ac 01       	movw	r20, r24
    4f52:	0a 2e       	mov	r0, r26
    4f54:	06 94       	lsr	r0
    4f56:	57 95       	ror	r21
    4f58:	47 95       	ror	r20
    4f5a:	37 95       	ror	r19
    4f5c:	27 95       	ror	r18
    4f5e:	ba 95       	dec	r27
    4f60:	c9 f7       	brne	.-14     	; 0x4f54 <__ultoa_invert+0xa2>
    4f62:	62 0f       	add	r22, r18
    4f64:	73 1f       	adc	r23, r19
    4f66:	84 1f       	adc	r24, r20
    4f68:	95 1f       	adc	r25, r21
    4f6a:	a0 1d       	adc	r26, r0
    4f6c:	08 95       	ret

00004f6e <_exit>:
    4f6e:	f8 94       	cli

00004f70 <__stop_program>:
    4f70:	ff cf       	rjmp	.-2      	; 0x4f70 <__stop_program>
